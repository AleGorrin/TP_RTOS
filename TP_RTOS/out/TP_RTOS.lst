
RTOS/TP_RTOS/TP_RTOS/out/TP_RTOS.elf:     file format elf32-littlearm
RTOS/TP_RTOS/TP_RTOS/out/TP_RTOS.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a00074d

Program Header:
0x70000001 off    0x000158d0 vaddr 0x1a0058d0 paddr 0x1a0058d0 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00000000 vaddr 0x10000000 paddr 0x10000000 align 2**16
         filesz 0x000000b4 memsz 0x00002bb8 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x000058d8 memsz 0x000058d8 flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a0058d8 align 2**16
         filesz 0x000000b8 memsz 0x000000b8 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000058cc  1a000000  1a000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b8  10000000  1a0058d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  000200b8  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  000200b8  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  000200b8  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  000200b8  2**2
                  CONTENTS
  6 .bss          00002b00  100000b8  100000b8  000000b8  2**2
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  000200b8  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  000200b8  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  000200b8  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  000200b8  2**2
                  CONTENTS
 11 .init_array   00000004  1a0058cc  1a0058cc  000158cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a0058d0  1a0058d0  000158d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  000200b8  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  000200b8  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  000200b8  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  000200b8  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  000200b8  2**2
                  CONTENTS
 18 .noinit       00000000  10002bb8  10002bb8  000200b8  2**2
                  CONTENTS
 19 .debug_info   00032660  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 00006f2c  00000000  00000000  00052718  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    0000dfbf  00000000  00000000  00059644  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_aranges 000010c8  00000000  00000000  00067603  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_ranges 00001358  00000000  00000000  000686cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_macro  0001115e  00000000  00000000  00069a23  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_line   0001f0cd  00000000  00000000  0007ab81  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_str    000309b9  00000000  00000000  00099c4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .comment      00000068  00000000  00000000  000ca607  2**0
                  CONTENTS, READONLY
 28 .ARM.attributes 00000032  00000000  00000000  000ca66f  2**0
                  CONTENTS, READONLY
 29 .debug_frame  00003220  00000000  00000000  000ca6a4  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
100000b8 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a0058cc l    d  .init_array	00000000 .init_array
1a0058d0 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
10002bb8 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 supervisor.c
100000b8 l     O .bss	00000001 debugPrint
100000bc l     O .bss	0000000a uartBuff.14396
100000c8 l     O .bss	0000000a uartBuff.14425
00000000 l    df *ABS*	00000000 fsm_debounce.c
00000000 l    df *ABS*	00000000 system.c
100000d4 l     O .bss	00000004 heap_end.5864
00000000 l    df *ABS*	00000000 heap_4.c
1a0008a0 l     F .text	00000064 prvHeapInit
100000dc l     O .bss	00002000 ucHeap
1a000904 l     F .text	00000058 prvInsertBlockIntoFreeList
100000d8 l     O .bss	00000004 pxEnd
100020dc l     O .bss	00000004 xBlockAllocatedBit
100020e0 l     O .bss	00000004 xFreeBytesRemaining
100020e4 l     O .bss	00000004 xMinimumEverFreeBytesRemaining
100020e8 l     O .bss	00000008 xStart
00000000 l    df *ABS*	00000000 queue.c
1a000ae8 l     F .text	00000012 prvGetDisinheritPriorityAfterTimeout
1a000afa l     F .text	0000001e prvIsQueueFull
1a000b18 l     F .text	0000001a prvIsQueueEmpty
1a000b32 l     F .text	00000076 prvCopyDataToQueue
1a000ba8 l     F .text	00000024 prvCopyDataFromQueue
1a000bcc l     F .text	0000006e prvUnlockQueue
1a000cc0 l     F .text	00000022 prvInitialiseNewQueue
1a000f44 l     F .text	00000018 prvInitialiseMutex
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 static_provider.c
100020f0 l     O .bss	00000168 uxIdleTaskStack.10813
10002258 l     O .bss	000005a0 uxTimerTaskStack.10820
100027f8 l     O .bss	00000060 xIdleTaskTCB.10812
10002858 l     O .bss	00000060 xTimerTaskTCB.10819
00000000 l    df *ABS*	00000000 hooks.c
00000000 l    df *ABS*	00000000 tasks.c
1a0014dc l     F .text	0000002c prvResetNextTaskUnblockTime
1a001508 l     F .text	00000090 prvInitialiseNewTask
1a001598 l     F .text	00000068 prvInitialiseTaskLists
1a001600 l     F .text	000000ac prvAddNewTaskToReadyList
1a0016ac l     F .text	00000038 prvDeleteTCB
1a0016e4 l     F .text	0000004c prvCheckTasksWaitingTermination
1a001730 l     F .text	00000028 prvIdleTask
1a001758 l     F .text	00000098 prvAddCurrentTaskToDelayedList
100028bc l     O .bss	00000004 pxDelayedTaskList
100028c0 l     O .bss	00000004 pxOverflowDelayedTaskList
100028c4 l     O .bss	0000008c pxReadyTasksLists
10002950 l     O .bss	00000004 uxCurrentNumberOfTasks
10002954 l     O .bss	00000004 uxDeletedTasksWaitingCleanUp
10002958 l     O .bss	00000004 uxPendedTicks
1000295c l     O .bss	00000004 uxSchedulerSuspended
10002960 l     O .bss	00000004 uxTaskNumber
10002964 l     O .bss	00000004 uxTopReadyPriority
10002968 l     O .bss	00000014 xDelayedTaskList1
1000297c l     O .bss	00000014 xDelayedTaskList2
10002990 l     O .bss	00000004 xNextTaskUnblockTime
10002994 l     O .bss	00000004 xNumOfOverflows
10002998 l     O .bss	00000014 xPendingReadyList
100029ac l     O .bss	00000004 xSchedulerRunning
100029b0 l     O .bss	00000014 xSuspendedTaskList
100029c4 l     O .bss	00000014 xTasksWaitingTermination
100029d8 l     O .bss	00000004 xTickCount
100029dc l     O .bss	00000004 xYieldPending
00000000 l    df *ABS*	00000000 timers.c
1a00218c l     F .text	00000020 prvGetNextExpireTime
1a0021ac l     F .text	00000048 prvInsertTimerInActiveList
1a0021f4 l     F .text	00000070 prvCheckForValidListAndQueue
1a0025a8 l     F .text	00000016 prvTimerTask
1a002334 l     F .text	00000078 prvSwitchTimerLists
1a0023ac l     F .text	0000002c prvSampleTimeNow
1a0023d8 l     F .text	00000060 prvProcessExpiredTimer
1a002438 l     F .text	00000074 prvProcessTimerOrBlockTask
1a0024ac l     F .text	000000fc prvProcessReceivedCommands
100029e0 l     O .bss	00000004 pxCurrentTimerList
100029e4 l     O .bss	00000004 pxOverflowTimerList
100029e8 l     O .bss	000000a0 ucStaticTimerQueueStorage.11914
10002a88 l     O .bss	00000014 xActiveTimerList1
10002a9c l     O .bss	00000014 xActiveTimerList2
10002ab0 l     O .bss	00000004 xLastTime.11863
10002ab4 l     O .bss	00000050 xStaticTimerQueue.11913
10002b04 l     O .bss	00000004 xTimerQueue
10002b08 l     O .bss	00000004 xTimerTaskHandle
00000000 l    df *ABS*	00000000 port.c
1a0025c0 l     F .text	00000040 prvTaskExitError
1a002600 l     F .text	00000022 prvPortStartFirstTask
1a002628 l     F .text	0000000e vPortEnableVFP
1a002690 l       .text	00000000 pxCurrentTCBConst2
1a002770 l       .text	00000000 pxCurrentTCBConst
10002b0c l     O .bss	00000001 ucMaxSysCallPriority
10002b10 l     O .bss	00000004 ulMaxPRIGROUPValue
10000008 l     O .data	00000004 uxCriticalNesting
00000000 l    df *ABS*	00000000 freertos_cm_support.c
00000000 l    df *ABS*	00000000 board.c
1a002964 l     F .text	00000044 Board_LED_Init
1a0029a8 l     F .text	00000040 Board_TEC_Init
1a0029e8 l     F .text	00000040 Board_GPIO_Init
1a002a28 l     F .text	00000030 Board_ADC_Init
1a002a58 l     F .text	00000038 Board_SPI_Init
1a002a90 l     F .text	00000024 Board_I2C_Init
1a005544 l     O .text	00000008 GpioButtons
1a00554c l     O .text	0000000c GpioLeds
1a005558 l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 board_sysinit.c
1a005570 l     O .text	00000004 InitClkStates
1a005574 l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 dac_18xx_43xx.c
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
1000000c l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a002cb4 l     F .text	0000002c Chip_UART_GetIndex
1a0055e8 l     O .text	00000008 UART_BClock
1a0055f0 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a002e50 l     F .text	00000014 Chip_ADC_GetClockIndex
1a002e64 l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a00301c l     F .text	000000a0 pll_calc_divs
1a0030bc l     F .text	0000010c pll_get_frac
1a0031c8 l     F .text	0000004c Chip_Clock_FindBaseClock
1a00343c l     F .text	00000022 Chip_Clock_GetDivRate
10002b18 l     O .bss	00000008 audio_usb_pll_freq
1a005604 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 sct_18xx_43xx.c
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a005670 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 sct_pwm_18xx_43xx.c
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a0037ec l     F .text	00000014 Chip_SSP_GetClockIndex
1a003800 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
10000044 l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_sct.c
1a0056b8 l     O .text	0000001c SCTdataList
00000000 l    df *ABS*	00000000 sapi_dac.c
00000000 l    df *ABS*	00000000 sapi_uart.c
1a0056d4 l     O .text	00000048 lpcUarts
00000000 l    df *ABS*	00000000 sapi_pwm.c
1a003ab4 l     F .text	0000000c pwmInitTimers
1a003ae8 l     F .text	00000034 pwmAttach
1a003b1c l     F .text	0000001c pwmDetach
10000048 l     O .data	0000000b AttachedPWMList
1a00571c l     O .text	0000000b pwmMap
00000000 l    df *ABS*	00000000 sapi_adc.c
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a003c70 l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_usb_device.c
10002b20 l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 sapi_print.c
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
1a00445c l     F .text	00000048 std
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 itoa.c
00000000 l    df *ABS*	00000000 lock.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 utoa.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
1a004cc8 l     F .text	0000002e __sfputc_r
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 impure.c
10000058 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 
1a0058d0 l       .init_array	00000000 __init_array_end
1a0058cc l       .bss_RAM5	00000000 __preinit_array_end
1a0058cc l       .init_array	00000000 __init_array_start
1a0058cc l       .bss_RAM5	00000000 __preinit_array_start
1a000478 g     F .text	00000088 informar
1a003260 g     F .text	0000001c Chip_Clock_GetDividerSource
1a000500 g     F .text	00000048 tecla_led_tarea_init
1a0007ec g     F .text	00000012 _isatty_r
1a000654 g     F .text	00000050 buttonReleased
1a004874 g     F .text	000000dc _puts_r
1a0001ba  w    F .text	00000002 TIMER2_IRQHandler
1a0007fe g     F .text	0000000a _lseek_r
1a000184  w    F .text	00000002 DebugMon_Handler
1a0001ba  w    F .text	00000002 RIT_IRQHandler
1a002efc g     F .text	00000016 Chip_ADC_DeInit
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a0001ba  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a0001ba  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a0026d8 g     F .text	0000002c vPortExitCritical
1a0001ba  w    F .text	00000002 I2C0_IRQHandler
1a004844 g     F .text	00000030 printf
1a002b4a g     F .text	00000008 __stdio_init
10002bac g     O .bss	00000001 __lock___atexit_recursive_mutex
1a0049ba g     F .text	00000024 __sseek
1a00450c g     F .text	00000070 __sinit
1a004a68 g     F .text	000000a4 __swbuf_r
1a00017a  w    F .text	00000002 HardFault_Handler
1a001368 g     F .text	00000052 vQueueWaitForMessageRestricted
1a0044b0 g     F .text	0000002c __sfmoreglue
1a000000 g       *ABS*	00000000 __vectors_start__
1a002fc4 g     F .text	0000000c Chip_ADC_SetResolution
1a004cbc g     F .text	0000000c __malloc_unlock
1a002774 g     F .text	0000002c SysTick_Handler
1a002d34 g     F .text	00000040 Chip_UART_SetBaud
10002bad g     O .bss	00000001 __lock___arc4random_mutex
1a000748  w    F .text	00000002 initialise_monitor_handles
1a003fbc g     F .text	00000008 printString
1a0001ba  w    F .text	00000002 SDIO_IRQHandler
1a002aec g     F .text	0000001c Board_UARTGetChar
1a0001ba  w    F .text	00000002 ATIMER_IRQHandler
1a002710 g     F .text	00000064 PendSV_Handler
1a000f72 g     F .text	000000ce xQueueGenericSendFromISR
1a000178  w    F .text	00000002 NMI_Handler
1a0058d8 g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a0001ba  w    F .text	00000002 I2C1_IRQHandler
1a0035f0 g     F .text	00000010 Chip_SCT_Init
1a0001ba  w    F .text	00000002 UART1_IRQHandler
1a0001ba  w    F .text	00000002 GPIO5_IRQHandler
1a0001ba  w    F .text	00000002 CAN1_IRQHandler
100028b8 g     O .bss	00000004 pxCurrentTCB
1a0007e2 g     F .text	0000000a _fstat_r
53ff7142 g       *ABS*	00000000 __valid_user_code_checksum
1a000548 g     F .text	00000058 tecla_led_tareas_crear
1a0058d8 g       .ARM.exidx	00000000 _etext
1a0001ba  w    F .text	00000002 USB1_IRQHandler
1a0001ba  w    F .text	00000002 I2S0_IRQHandler
1a001e78 g     F .text	00000018 vTaskInternalSetTimeOutState
1a0001ba  w    F .text	00000002 TIMER3_IRQHandler
1a0034de g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a0001ba  w    F .text	00000002 UART0_IRQHandler
1a0001a8 g     F .text	00000012 bss_init
1a0027d8 g     F .text	00000110 xPortStartScheduler
1a0046c6 g     F .text	0000001c memcpy
1a001d84 g     F .text	00000030 vTaskPlaceOnEventList
1a0001ba  w    F .text	00000002 SGPIO_IRQHandler
1a0044a4 g     F .text	0000000c _cleanup_r
1a0027a0  w    F .text	00000038 vPortSetupTimerInterrupt
1a003fd4 g     F .text	00000000 .hidden __aeabi_uldivmod
10002bb8 g       .noinit	00000000 _noinit
1a004950 g     F .text	00000010 puts
1a000a78 g     F .text	00000070 vPortFree
1a003a9e g     F .text	00000016 uartWriteString
10002ba4 g     O .bss	00000004 SystemCoreClock
1a000460 g     F .text	00000016 tarea_tecla
1a002ce0 g     F .text	00000054 Chip_UART_Init
1a00119c g     F .text	000001a4 xQueueSemaphoreTake
1a002c0e g     F .text	00000010 Chip_DAC_UpdateValue
1a0001ba  w    F .text	00000002 ADC0_IRQHandler
1a0028e8 g     F .text	0000005c vPortValidateInterruptPriority
1a002ea4 g     F .text	00000018 readAdcVal
1a000180  w    F .text	00000002 UsageFault_Handler
1a003590 g     F .text	0000004c Chip_Clock_GetRate
1a0013d6 g     F .text	00000016 vListInsertEnd
1a0001ba  w    F .text	00000002 GPIO6_IRQHandler
1a003fac g     F .text	00000010 printInitUart
1a002b8c g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a0046bc g     F .text	00000004 itoa
1a004004 g     F .text	000002d0 .hidden __udivmoddi4
1a000880 g     F .text	00000020 _sbrk_r
1a005540 g     O .text	00000004 ExtRateIn
1a0001ba  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a00394c g     F .text	0000004c Sct_EnablePwmFor
1a000808 g     F .text	0000004e _read_r
1a0013d0 g     F .text	00000006 vListInitialiseItem
1a0001ba  w    F .text	00000002 GPIO1_IRQHandler
1a001040 g     F .text	0000015c xQueueReceive
10002b64 g     O .bss	00000040 xQueueRegistry
1a001460 g     F .text	00000018 vApplicationGetTimerTaskMemory
1a0001ba  w    F .text	00000002 SSP0_IRQHandler
1a0058d0 g       .ARM.exidx	00000000 __exidx_start
10002bae g     O .bss	00000001 __lock___env_recursive_mutex
1a0002fc g     O .text	00000004 CRP_WORD
1a002e96 g     F .text	0000000e setStartMode
10002baf g     O .bss	00000001 __lock___sinit_recursive_mutex
1a005870 g     O .text	00000004 _global_impure_ptr
1a004644 g     F .text	00000048 __libc_init_array
1a003b5c g     F .text	000000bc adcInit
1a0001ba  w    F .text	00000002 ADC1_IRQHandler
1a00095c g     F .text	0000011c pvPortMalloc
1a0038f4 g     F .text	00000024 Sct_Init
1a002b08 g     F .text	00000030 Board_Init
1a0007d6  w    F .text	00000002 _init
1a0013ba g     F .text	00000016 vListInitialise
1a000114 g       .text	00000000 __data_section_table
1a001a4c g     F .text	0000000c xTaskGetTickCount
1a000dc4 g     F .text	00000180 xQueueGenericSend
1a0001ba  w    F .text	00000002 RTC_IRQHandler
10002bb8 g       .bss	00000000 _ebss
1a002fd0 g     F .text	0000002a Chip_ADC_EnableChannel
1a0001ba  w    F .text	00000002 TIMER0_IRQHandler
1a00074c g     F .text	00000088 Reset_Handler
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a0001ba  w    F .text	00000002 SPI_IRQHandler
1a0037a0 g     F .text	0000004a Chip_SCTPWM_SetRate
1a002c7c g     F .text	00000038 Chip_I2C_SetClockRate
1a001ffc g     F .text	000000b4 xTaskPriorityDisinherit
1a0001ba  w    F .text	00000002 LCD_IRQHandler
1a003214 g     F .text	0000004c Chip_Clock_EnableCrystal
10002bb0 g     O .bss	00000001 __lock___malloc_recursive_mutex
1a002f12 g     F .text	00000008 Chip_ADC_ReadValue
10008000 g       *ABS*	00000000 __top_RamLoc32
1a001dec g     F .text	0000008c xTaskRemoveFromEventList
1a0014a4  w    F .text	0000001c vApplicationMallocFailedHook
1a00018a g     F .text	0000001e data_init
1a002f72 g     F .text	00000020 Chip_ADC_SetStartMode
1a0001ba  w    F .text	00000002 TIMER1_IRQHandler
1a005810 g     O .text	00000020 __sf_fake_stderr
1a002c58 g     F .text	00000024 Chip_I2C_Init
10000000 g     O .data	00000002 leds
1a0018c8 g     F .text	000000e0 vTaskDelete
1a0046c4 g     F .text	00000002 __retarget_lock_release_recursive
1a0001ba  w    F .text	00000002 UART2_IRQHandler
1a003fc4 g     F .text	00000010 printEnter
1a00468c g     F .text	00000030 __itoa
1a0033d0 g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a005728 g     O .text	000000e6 gpioPinsInit
1a001478  w    F .text	0000002c vAssertCalled
1a003a84 g     F .text	0000001a uartWriteByte
1a002170 g     F .text	0000001c pvTaskIncrementMutexHeldCount
1a003818 g     F .text	00000012 Chip_SSP_SetClockRate
1a004cf6 g     F .text	00000024 __sfputs_r
1a0001ba  w    F .text	00000002 GPIO2_IRQHandler
1a0044dc g     F .text	0000000c __sfp_lock_acquire
1a005280 g     F .text	00000000 memchr
1a001e90 g     F .text	00000084 xTaskCheckForTimeOut
1a0046f4 g     F .text	0000009c _free_r
1a003c18 g     F .text	00000058 adcRead
1a0034b8 g     F .text	00000026 Chip_Clock_GetBaseClock
1a001f40 g     F .text	000000bc xTaskPriorityInherit
100000b8 g       .bss	00000000 _bss
1a002f1a g     F .text	00000036 Chip_ADC_ReadStatus
1a0006a4 g     F .text	00000006 fsmButtonError
1a002f92 g     F .text	00000032 Chip_ADC_SetSampleRate
10002b14 g     O .bss	00000004 freeRtosInterruptCallback
1a001a3c g     F .text	00000010 vTaskSuspendAll
10000004 g     O .data	00000002 teclas
1a0001ba  w    F .text	00000002 I2S1_IRQHandler
1a00382a g     F .text	0000003e Chip_SSP_SetBitRate
1a001420 g     F .text	00000026 uxListRemove
1a003600 g     F .text	00000002 Chip_GPIO_Init
1a00556c g     O .text	00000004 OscRateIn
1a003a08 g     F .text	0000007c uartInit
1a0017f0 g     F .text	00000072 xTaskCreateStatic
10002bb8 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a0003e8 g     F .text	00000078 tarea_led
1a001cb8 g     F .text	000000cc vTaskSwitchContext
1a0001ba  w    F .text	00000002 SSP1_IRQHandler
1a000ce2 g     F .text	00000092 xQueueGenericCreateStatic
1a001db4 g     F .text	00000038 vTaskPlaceOnEventListRestricted
1a000178 g       .text	00000000 __bss_section_table_end
1a000648 g     F .text	0000000c buttonPressed
1a0007d8 g     F .text	0000000a _close_r
1a003ca4 g     F .text	000001ac gpioInit
1a001448 g     F .text	00000018 vApplicationGetIdleTaskMemory
1a003b38 g     F .text	00000024 pwmInit
1a0022c8 g     F .text	0000006c xTimerGenericCommand
1a004b0c g     F .text	000000dc __swsetup_r
1a0014c0  w    F .text	0000001c vApplicationStackOverflowHook
1a0042d4  w    F .text	00000002 .hidden __aeabi_ldiv0
1a00457c g     F .text	0000008c __sfp
1a004500 g     F .text	0000000c __sinit_lock_release
1a004960 g     F .text	00000022 __sread
1a003f24 g     F .text	0000001c USB0_IRQHandler
1a00355c g     F .text	00000034 Chip_Clock_Disable
1a0001ba  w    F .text	00000002 GPIO3_IRQHandler
1a004cb0 g     F .text	0000000c __malloc_lock
10002b2c g     O .bss	00000038 tecla_led_config
1a002ad8 g     F .text	00000014 Board_UARTPutChar
1a000360 g     F .text	00000088 potenciometro
1a0001ba  w    F .text	00000002 SCT_IRQHandler
1a0043e4 g     F .text	00000078 _fflush_r
1a005830 g     O .text	00000020 __sf_fake_stdin
1a0049e8 g     F .text	00000080 __utoa
1a00327c g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a0046c2 g     F .text	00000002 __retarget_lock_acquire_recursive
1a0046e2 g     F .text	00000010 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a0005a0 g     F .text	000000a8 main
1a0046c0 g     F .text	00000002 __retarget_lock_init_recursive
1a0001ba  w    F .text	00000002 WDT_IRQHandler
1a0013ec g     F .text	00000034 vListInsert
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a002670 g     F .text	00000024 SVC_Handler
1a0049de g     F .text	00000008 __sclose
1a002264 g     F .text	00000064 xTimerCreateTimerTask
1a003934 g     F .text	00000018 Sct_SetDutyCycle
1a004790 g     F .text	000000b4 _malloc_r
1a0039dc g     F .text	00000018 uartTxReady
1a0001ba  w    F .text	00000002 GPIO7_IRQHandler
1a0034ec g     F .text	0000003c Chip_Clock_EnableOpts
1a002b42 g     F .text	00000008 __stdio_getchar
1a000d74 g     F .text	0000004e xQueueGenericCreate
1a002c04 g     F .text	0000000a Chip_DAC_DeInit
1a003298 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a003350 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a0006b4 g     F .text	00000094 fsmButtonUpdate
1a0038a0 g     F .text	00000038 SystemInit
1a0001ba  w    F .text	00000002 SPIFI_IRQHandler
1a0001ba  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a003e50 g     F .text	0000006a gpioWrite
1a0007d4  w    F .text	00000002 _fini
1a004844 g     F .text	00000030 iprintf
1a001b70 g     F .text	000000fc xTaskResumeAll
1a0019a8 g     F .text	00000094 vTaskStartScheduler
1a002ebc g     F .text	00000040 Chip_ADC_Init
10002ba8 g     O .bss	00000004 g_pUsbApi
1a002b54 g     F .text	00000038 Board_SetupMuxing
1a002d74 g     F .text	000000dc Chip_UART_SetBaudFDR
1a000856 g     F .text	00000028 _write_r
1a002ffa g     F .text	00000022 Chip_ADC_SetBurstCmd
1a0001ba  w    F .text	00000002 ETH_IRQHandler
1a004f6c g     F .text	000000ea _printf_common
10000054 g     O .data	00000004 _impure_ptr
1a0042d8 g     F .text	0000010c __sflush_r
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a003998 g     F .text	00000044 dacInit
1a003918 g     F .text	0000001c Sct_Uint8ToTicks
1a0039f4 g     F .text	00000014 uartTxWrite
1a0001ba  w    F .text	00000002 CAN0_IRQHandler
10000000 g       .data	00000000 _data
1a001f14 g     F .text	0000000c vTaskMissedYield
10002bb8 g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a003868 g     F .text	00000038 Chip_SSP_Init
1a001340 g     F .text	00000028 vQueueAddToRegistry
1a0001ba  w    F .text	00000002 GINT0_IRQHandler
1a001a58 g     F .text	00000118 xTaskIncrementTick
1a002c1e g     F .text	00000018 Chip_DAC_SetBias
1a004be8 g     F .text	00000048 __swhatbuf_r
1a002944 g     F .text	00000020 DAC_IRQHandler
1a002ab4 g     F .text	00000024 Board_Debug_Init
1a002b38 g     F .text	0000000a __stdio_putchar
1a000c3c g     F .text	00000084 xQueueGenericReset
1a002f50 g     F .text	00000022 Chip_ADC_Int_SetChannelCmd
100000b8 g       .data	00000000 _edata
1a002c38 g     F .text	00000020 Chip_I2C_EventHandler
1a0001ba  w    F .text	00000002 M0SUB_IRQHandler
10002bb1 g     O .bss	00000001 __lock___at_quick_exit_mutex
1a001862 g     F .text	00000066 xTaskCreate
1a00375c g     F .text	00000044 Chip_SCTPWM_SetOutPin
1a003604 g     F .text	00000158 Chip_SetupCoreClock
1a004982 g     F .text	00000038 __swrite
1a0001ba  w    F .text	00000002 GPIO0_IRQHandler
1a000300 g     F .text	00000060 supervisor
1a004d1c g     F .text	00000250 _vfiprintf_r
1a000000 g     O .text	00000040 g_pfnVectors
1a004608 g     F .text	0000003c _fwalk_reent
1a0035dc g     F .text	00000014 SystemCoreClockUpdate
1a003ac0 g     F .text	00000028 pwmIsAttached
1a0001ba  w    F .text	00000002 DMA_IRQHandler
1a001c6c g     F .text	0000004c vTaskDelay
1a0001ba  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a0044e8 g     F .text	0000000c __sfp_lock_release
1a005850 g     O .text	00000020 __sf_fake_stdout
1a001f20 g     F .text	00000020 xTaskGetSchedulerState
1a0020b0 g     F .text	000000c0 vTaskPriorityDisinheritAfterTimeout
1a0042d4  w    F .text	00000002 .hidden __aeabi_idiv0
1a00017e  w    F .text	00000002 BusFault_Handler
10002bb2 g     O .bss	00000001 __lock___dd_hash_mutex
1a004c30 g     F .text	00000080 __smakebuf_r
10002bb3 g     O .bss	00000001 __lock___tz_mutex
1a00263c g     F .text	0000002c pxPortInitialiseStack
1a005058 g     F .text	00000228 _printf_i
1a003528 g     F .text	00000034 Chip_Clock_Enable
1a0001ba  w    F .text	00000002 UART3_IRQHandler
10002b28 g     O .bss	00000004 __malloc_sbrk_start
1a0001ba  w    F .text	00000002 MCPWM_IRQHandler
1a0001ba  w    F .text	00000002 M0APP_IRQHandler
1a003eba g     F .text	00000068 gpioRead
1a003f40 g     F .text	0000006c boardInit
1a002694 g     F .text	00000044 vPortEnterCritical
10002b24 g     O .bss	00000004 __malloc_free_list
1a000040 g     O .text	000000d4 g_pfnVendorVectors
1a004d1c g     F .text	00000250 _vfprintf_r
1a0006aa g     F .text	0000000a fsmButtonInit
1a0001ba  w    F .text	00000002 GINT1_IRQHandler
1a000f5c g     F .text	00000016 xQueueCreateMutex
1a003460 g     F .text	00000058 Chip_Clock_SetBaseClock
1a0038d8 g     F .text	0000001c cyclesCounterInit
1a0001ba  w    F .text	00000002 GPIO4_IRQHandler
10002bb4 g     O .bss	00000001 __lock___sfp_recursive_mutex
1a0044f4 g     F .text	0000000c __sinit_lock_acquire
1a002bf8 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 4d 07 00 1a 79 01 00 1a 7b 01 00 1a     ....M...y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a 42 71 ff 53     }...........Bq.S
	...
1a00002c:	71 26 00 1a 85 01 00 1a 00 00 00 00 11 27 00 1a     q&...........'..
1a00003c:	75 27 00 1a                                         u'..

1a000040 <g_pfnVendorVectors>:
1a000040:	45 29 00 1a bb 01 00 1a bb 01 00 1a 00 00 00 00     E)..............
1a000050:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000060:	25 3f 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     %?..............
1a000070:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000080:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000090:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000a0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000b0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000c0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000d0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000e0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000f0:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000100:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000110:	bb 01 00 1a                                         ....

1a000114 <__data_section_table>:
1a000114:	1a0058d8 	.word	0x1a0058d8
1a000118:	10000000 	.word	0x10000000
1a00011c:	000000b8 	.word	0x000000b8
1a000120:	1a0058d8 	.word	0x1a0058d8
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a0058d8 	.word	0x1a0058d8
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a0058d8 	.word	0x1a0058d8
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a0058d8 	.word	0x1a0058d8
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	100000b8 	.word	0x100000b8
1a000154:	00002b00 	.word	0x00002b00
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
    while (1) {
    }
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
    while (1) {
    }
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
    while (1) {
    }
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
    while (1) {
    }
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
    while (1) {
    }
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
    while (1) {
    }
1a000182:	e7fe      	b.n	1a000182 <UsageFault_Handler+0x2>

1a000184 <DebugMon_Handler>:
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
    while (1) {
    }
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
    while (1) {
    }
1a000186:	e7fe      	b.n	1a000186 <DebugMon_Handler+0x2>
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
    while (1) {
    }
1a000188:	e7fe      	b.n	1a000188 <DebugMon_Handler+0x4>

1a00018a <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018a:	2300      	movs	r3, #0
1a00018c:	4293      	cmp	r3, r2
1a00018e:	d20a      	bcs.n	1a0001a6 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000190:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000192:	f850 4b04 	ldr.w	r4, [r0], #4
1a000196:	f841 4b04 	str.w	r4, [r1], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019a:	3304      	adds	r3, #4
1a00019c:	4293      	cmp	r3, r2
1a00019e:	d3f8      	bcc.n	1a000192 <data_init+0x8>
}
1a0001a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a4:	4770      	bx	lr
1a0001a6:	4770      	bx	lr

1a0001a8 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a8:	2300      	movs	r3, #0
1a0001aa:	428b      	cmp	r3, r1
1a0001ac:	d204      	bcs.n	1a0001b8 <bss_init+0x10>
        *pulDest++ = 0;
1a0001ae:	2200      	movs	r2, #0
1a0001b0:	f840 2b04 	str.w	r2, [r0], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b4:	3304      	adds	r3, #4
1a0001b6:	e7f8      	b.n	1a0001aa <bss_init+0x2>
}
1a0001b8:	4770      	bx	lr

1a0001ba <ADC0_IRQHandler>:
};

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
    while (1) {
    }
1a0001ba:	e7fe      	b.n	1a0001ba <ADC0_IRQHandler>
1a0001bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <supervisor>:

/*==============================[definiciones de funciones externas]=============================*/

// Implementacion de funcion de la tarea
void supervisor( void* taskParmPtr )									// Implementacion de funcion del Supervisor
{
1a000300:	b510      	push	{r4, lr}
   // ------------------------------------ CONFIGURACIONES ----------------------------------------
   gpioWrite( LED1, ON );
1a000302:	2101      	movs	r1, #1
1a000304:	202b      	movs	r0, #43	; 0x2b
1a000306:	f003 fda3 	bl	1a003e50 <gpioWrite>
   vTaskDelay( 1000 / portTICK_RATE_MS );
1a00030a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1a00030e:	f001 fcad 	bl	1a001c6c <vTaskDelay>
   gpioWrite( LED1, OFF );
1a000312:	2100      	movs	r1, #0
1a000314:	202b      	movs	r0, #43	; 0x2b
1a000316:	f003 fd9b 	bl	1a003e50 <gpioWrite>

   portTickType xPeriodicity =  5000 / portTICK_RATE_MS;				// Tarea periodica cada 5000 ms
   portTickType xLastWakeTime = xTaskGetTickCount();
1a00031a:	f001 fb97 	bl	1a001a4c <xTaskGetTickCount>

   // ---------------------------------- REPETIR POR SIEMPRE --------------------------------------
   while(TRUE) {

	   vTaskDelay( 50 / portTICK_RATE_MS );
1a00031e:	2032      	movs	r0, #50	; 0x32
1a000320:	f001 fca4 	bl	1a001c6c <vTaskDelay>
	   gpioWrite(LEDB, ON);
1a000324:	2101      	movs	r1, #1
1a000326:	202a      	movs	r0, #42	; 0x2a
1a000328:	f003 fd92 	bl	1a003e50 <gpioWrite>
	   debugPrintlnString( "Informacion del supervisor" );
1a00032c:	4c0a      	ldr	r4, [pc, #40]	; (1a000358 <supervisor+0x58>)
1a00032e:	490b      	ldr	r1, [pc, #44]	; (1a00035c <supervisor+0x5c>)
1a000330:	7820      	ldrb	r0, [r4, #0]
1a000332:	f003 fe43 	bl	1a003fbc <printString>
1a000336:	7820      	ldrb	r0, [r4, #0]
1a000338:	f003 fe44 	bl	1a003fc4 <printEnter>
	   vTaskDelay( 2450 / portTICK_RATE_MS );
1a00033c:	f640 1092 	movw	r0, #2450	; 0x992
1a000340:	f001 fc94 	bl	1a001c6c <vTaskDelay>
	   gpioWrite(LEDB, OFF);
1a000344:	2100      	movs	r1, #0
1a000346:	202a      	movs	r0, #42	; 0x2a
1a000348:	f003 fd82 	bl	1a003e50 <gpioWrite>
	   vTaskDelay( 2500 / portTICK_RATE_MS );
1a00034c:	f640 10c4 	movw	r0, #2500	; 0x9c4
1a000350:	f001 fc8c 	bl	1a001c6c <vTaskDelay>
1a000354:	e7e3      	b.n	1a00031e <supervisor+0x1e>
1a000356:	bf00      	nop
1a000358:	100000b8 	.word	0x100000b8
1a00035c:	1a00540c 	.word	0x1a00540c

1a000360 <potenciometro>:
   }
   vTaskDelete(NULL);
}

void potenciometro( void* taskParmPtr )
{
1a000360:	b510      	push	{r4, lr}
	// ---------------------------------- CONFIGURACIONES -----------------------------------------

	pwmConfig( 0, PWM_ENABLE );												// Inicializar UART_USB a 115200 baudios
1a000362:	2100      	movs	r1, #0
1a000364:	4608      	mov	r0, r1
1a000366:	f003 fbe7 	bl	1a003b38 <pwmInit>
	pwmConfig( PWM7, PWM_ENABLE_OUTPUT );
1a00036a:	2102      	movs	r1, #2
1a00036c:	2007      	movs	r0, #7
1a00036e:	f003 fbe3 	bl	1a003b38 <pwmInit>

	adcConfig( ADC_ENABLE );												// Inicializar AnalogIO
1a000372:	2000      	movs	r0, #0
1a000374:	f003 fbf2 	bl	1a003b5c <adcInit>
	dacConfig( DAC_ENABLE );
1a000378:	2000      	movs	r0, #0
1a00037a:	f003 fb0d 	bl	1a003998 <dacInit>

	static char uartBuff[10];												// Buffer

	uint16_t muestra = 0;													// Variable para almacenar el valor leido del ADC CH1

	portTickType xPeriodicity =  3000 / portTICK_RATE_MS;
1a00037e:	e015      	b.n	1a0003ac <potenciometro+0x4c>
		muestra = adcRead( CH1 );											// Leo la Entrada Analogica AI0 - ADC0 CH1
		vTaskDelay( 50 / portTICK_RATE_MS );
		itoa( muestra, uartBuff, 10 ); 										// Conversión de muestra entera a ascii con base decimal
		vTaskDelay( 50 / portTICK_RATE_MS );
		if (muestra < 300){
			vTaskDelay( 2000 / portTICK_RATE_MS );
1a000380:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
1a000384:	f001 fc72 	bl	1a001c6c <vTaskDelay>
			uartWriteString( UART_USB, "Valor del potenciometro bajo: " );	// Envío la primer parte del mnesaje a la Uart
1a000388:	4914      	ldr	r1, [pc, #80]	; (1a0003dc <potenciometro+0x7c>)
1a00038a:	2003      	movs	r0, #3
1a00038c:	f003 fb87 	bl	1a003a9e <uartWriteString>
			vTaskDelay( 50 / portTICK_RATE_MS );
1a000390:	2032      	movs	r0, #50	; 0x32
1a000392:	f001 fc6b 	bl	1a001c6c <vTaskDelay>
			uartWriteString( UART_USB, uartBuff );							// Enviar muestra y Enter
1a000396:	4912      	ldr	r1, [pc, #72]	; (1a0003e0 <potenciometro+0x80>)
1a000398:	2003      	movs	r0, #3
1a00039a:	f003 fb80 	bl	1a003a9e <uartWriteString>
			vTaskDelay( 50 / portTICK_RATE_MS );
1a00039e:	2032      	movs	r0, #50	; 0x32
1a0003a0:	f001 fc64 	bl	1a001c6c <vTaskDelay>
			uartWriteString( UART_USB, ";\r\n" );
1a0003a4:	490f      	ldr	r1, [pc, #60]	; (1a0003e4 <potenciometro+0x84>)
1a0003a6:	2003      	movs	r0, #3
1a0003a8:	f003 fb79 	bl	1a003a9e <uartWriteString>
		vTaskDelay( 2000 / portTICK_RATE_MS );
1a0003ac:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
1a0003b0:	f001 fc5c 	bl	1a001c6c <vTaskDelay>
		muestra = adcRead( CH1 );											// Leo la Entrada Analogica AI0 - ADC0 CH1
1a0003b4:	2000      	movs	r0, #0
1a0003b6:	f003 fc2f 	bl	1a003c18 <adcRead>
1a0003ba:	4604      	mov	r4, r0
		vTaskDelay( 50 / portTICK_RATE_MS );
1a0003bc:	2032      	movs	r0, #50	; 0x32
1a0003be:	f001 fc55 	bl	1a001c6c <vTaskDelay>
		itoa( muestra, uartBuff, 10 ); 										// Conversión de muestra entera a ascii con base decimal
1a0003c2:	220a      	movs	r2, #10
1a0003c4:	4906      	ldr	r1, [pc, #24]	; (1a0003e0 <potenciometro+0x80>)
1a0003c6:	4620      	mov	r0, r4
1a0003c8:	f004 f978 	bl	1a0046bc <itoa>
		vTaskDelay( 50 / portTICK_RATE_MS );
1a0003cc:	2032      	movs	r0, #50	; 0x32
1a0003ce:	f001 fc4d 	bl	1a001c6c <vTaskDelay>
		if (muestra < 300){
1a0003d2:	f5b4 7f96 	cmp.w	r4, #300	; 0x12c
1a0003d6:	d2e9      	bcs.n	1a0003ac <potenciometro+0x4c>
1a0003d8:	e7d2      	b.n	1a000380 <potenciometro+0x20>
1a0003da:	bf00      	nop
1a0003dc:	1a0053e8 	.word	0x1a0053e8
1a0003e0:	100000bc 	.word	0x100000bc
1a0003e4:	1a005408 	.word	0x1a005408

1a0003e8 <tarea_led>:
		}
	}
}

void tarea_led( void* taskParmPtr )
{
1a0003e8:	b538      	push	{r3, r4, r5, lr}
1a0003ea:	4604      	mov	r4, r0
	tecla_led_t* config = (tecla_led_t*) taskParmPtr;
	TickType_t diferencia;
	bool_t tension = 0;
1a0003ec:	e01a      	b.n	1a000424 <tarea_led+0x3c>
	   {
		   debugPrintlnString( "Se pidio peticion" );
	   }
	   else
	   {
		   debugPrintlnString( "se activo cambio de tension" );
1a0003ee:	4d19      	ldr	r5, [pc, #100]	; (1a000454 <tarea_led+0x6c>)
1a0003f0:	4919      	ldr	r1, [pc, #100]	; (1a000458 <tarea_led+0x70>)
1a0003f2:	7828      	ldrb	r0, [r5, #0]
1a0003f4:	f003 fde2 	bl	1a003fbc <printString>
1a0003f8:	7828      	ldrb	r0, [r5, #0]
1a0003fa:	f003 fde3 	bl	1a003fc4 <printEnter>
		   //tension =  !tension;
	   }

	   xSemaphoreGive(config->mutex);								// Se cierra la seccion critica
1a0003fe:	2300      	movs	r3, #0
1a000400:	461a      	mov	r2, r3
1a000402:	4619      	mov	r1, r3
1a000404:	69a0      	ldr	r0, [r4, #24]
1a000406:	f000 fcdd 	bl	1a000dc4 <xQueueGenericSend>

	   gpioWrite(config->led, ON);
1a00040a:	2101      	movs	r1, #1
1a00040c:	f994 0001 	ldrsb.w	r0, [r4, #1]
1a000410:	f003 fd1e 	bl	1a003e50 <gpioWrite>
	   vTaskDelay( diferencia );
1a000414:	2000      	movs	r0, #0
1a000416:	f001 fc29 	bl	1a001c6c <vTaskDelay>
	   gpioWrite(config->led, OFF);
1a00041a:	2100      	movs	r1, #0
1a00041c:	f994 0001 	ldrsb.w	r0, [r4, #1]
1a000420:	f003 fd16 	bl	1a003e50 <gpioWrite>
	   xSemaphoreTake(config->sem_tec_pulsada, portMAX_DELAY );
1a000424:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a000428:	6960      	ldr	r0, [r4, #20]
1a00042a:	f000 feb7 	bl	1a00119c <xQueueSemaphoreTake>
	   xSemaphoreTake(config->mutex, portMAX_DELAY);				// Se establece como seccion critica
1a00042e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a000432:	69a0      	ldr	r0, [r4, #24]
1a000434:	f000 feb2 	bl	1a00119c <xQueueSemaphoreTake>
	   if (config->tecla == TEC3)
1a000438:	f994 3000 	ldrsb.w	r3, [r4]
1a00043c:	2b26      	cmp	r3, #38	; 0x26
1a00043e:	d1d6      	bne.n	1a0003ee <tarea_led+0x6>
		   debugPrintlnString( "Se pidio peticion" );
1a000440:	4d04      	ldr	r5, [pc, #16]	; (1a000454 <tarea_led+0x6c>)
1a000442:	4906      	ldr	r1, [pc, #24]	; (1a00045c <tarea_led+0x74>)
1a000444:	7828      	ldrb	r0, [r5, #0]
1a000446:	f003 fdb9 	bl	1a003fbc <printString>
1a00044a:	7828      	ldrb	r0, [r5, #0]
1a00044c:	f003 fdba 	bl	1a003fc4 <printEnter>
1a000450:	e7d5      	b.n	1a0003fe <tarea_led+0x16>
1a000452:	bf00      	nop
1a000454:	100000b8 	.word	0x100000b8
1a000458:	1a00543c 	.word	0x1a00543c
1a00045c:	1a005428 	.word	0x1a005428

1a000460 <tarea_tecla>:
   }
   vTaskDelete(NULL);
}

void tarea_tecla( void* taskParmPtr )
{
1a000460:	b510      	push	{r4, lr}
1a000462:	4604      	mov	r4, r0
   // ------------------------------------- CONFIGURACIONES -----------------------------------------

	tecla_led_t* config = (tecla_led_t*) taskParmPtr;

	fsmButtonInit(config);
1a000464:	f000 f921 	bl	1a0006aa <fsmButtonInit>

   // ----------------------------------- REPETIR POR SIEMPRE ---------------------------------------
   while(TRUE) {
	   fsmButtonUpdate( config );
1a000468:	4620      	mov	r0, r4
1a00046a:	f000 f923 	bl	1a0006b4 <fsmButtonUpdate>
	   vTaskDelay( 1 / portTICK_RATE_MS );
1a00046e:	2001      	movs	r0, #1
1a000470:	f001 fbfc 	bl	1a001c6c <vTaskDelay>
1a000474:	e7f8      	b.n	1a000468 <tarea_tecla+0x8>
1a000476:	Address 0x000000001a000476 is out of bounds.


1a000478 <informar>:
   }
   vTaskDelete(NULL);
}

void informar( void* taskParmPtr )									// Implementacion de funcion del Supervisor
{
1a000478:	b538      	push	{r3, r4, r5, lr}
1a00047a:	2400      	movs	r4, #0
	TickType_t diferencia = *((TickType_t*)taskParmPtr);

	bool_t tension;
	uint16_t muestra;

	pwmConfig( 0, PWM_ENABLE );										// Inicializar UART_USB a 115200 baudios
1a00047c:	4621      	mov	r1, r4
1a00047e:	4620      	mov	r0, r4
1a000480:	f003 fb5a 	bl	1a003b38 <pwmInit>
	pwmConfig( PWM7, PWM_ENABLE_OUTPUT );
1a000484:	2102      	movs	r1, #2
1a000486:	2007      	movs	r0, #7
1a000488:	f003 fb56 	bl	1a003b38 <pwmInit>

	adcConfig( ADC_ENABLE );										// Inicializar AnalogIO
1a00048c:	4620      	mov	r0, r4
1a00048e:	f003 fb65 	bl	1a003b5c <adcInit>
	dacConfig( DAC_ENABLE );
1a000492:	4620      	mov	r0, r4
1a000494:	f003 fa80 	bl	1a003998 <dacInit>

	static char uartBuff[10];
	muestra = adcRead( CH1 );
1a000498:	4620      	mov	r0, r4
1a00049a:	f003 fbbd 	bl	1a003c18 <adcRead>
	muestra = adcRead( CH1 );										// Leo la Entrada Analogica AI0 - ADC0 CH1
1a00049e:	4620      	mov	r0, r4
1a0004a0:	f003 fbba 	bl	1a003c18 <adcRead>
1a0004a4:	4605      	mov	r5, r0
	vTaskDelay( 50 / portTICK_RATE_MS );
1a0004a6:	2032      	movs	r0, #50	; 0x32
1a0004a8:	f001 fbe0 	bl	1a001c6c <vTaskDelay>
	itoa( muestra, uartBuff, 10 ); 									// Conversión de muestra entera a ascii con base decimal
1a0004ac:	220a      	movs	r2, #10
1a0004ae:	4910      	ldr	r1, [pc, #64]	; (1a0004f0 <informar+0x78>)
1a0004b0:	4628      	mov	r0, r5
1a0004b2:	f004 f903 	bl	1a0046bc <itoa>

	if ((tension == 0) && (muestra > 300) ){
1a0004b6:	f5b5 7f96 	cmp.w	r5, #300	; 0x12c
1a0004ba:	d807      	bhi.n	1a0004cc <informar+0x54>
		debugPrintlnString( "Todos los estados se encuentran estables" );
	}
	else if ((tension == 1) && (muestra > 300)){
		debugPrintlnString( "Se encontro problemas de tension" );
	}
	else if ((tension == 0) && (muestra < 300)){
1a0004bc:	b914      	cbnz	r4, 1a0004c4 <informar+0x4c>
1a0004be:	f5b5 7f96 	cmp.w	r5, #300	; 0x12c
1a0004c2:	d30c      	bcc.n	1a0004de <informar+0x66>
		debugPrintlnString( "Se encontro problemas de bateria" );
	}
	else if ((tension == 1) && (muestra < 300)){
		debugPrintlnString( "Estado de alerta maxima" );
	}
	vTaskDelete(NULL);
1a0004c4:	2000      	movs	r0, #0
1a0004c6:	f001 f9ff 	bl	1a0018c8 <vTaskDelete>
}
1a0004ca:	bd38      	pop	{r3, r4, r5, pc}
		debugPrintlnString( "Todos los estados se encuentran estables" );
1a0004cc:	4c09      	ldr	r4, [pc, #36]	; (1a0004f4 <informar+0x7c>)
1a0004ce:	490a      	ldr	r1, [pc, #40]	; (1a0004f8 <informar+0x80>)
1a0004d0:	7820      	ldrb	r0, [r4, #0]
1a0004d2:	f003 fd73 	bl	1a003fbc <printString>
1a0004d6:	7820      	ldrb	r0, [r4, #0]
1a0004d8:	f003 fd74 	bl	1a003fc4 <printEnter>
1a0004dc:	e7f2      	b.n	1a0004c4 <informar+0x4c>
		debugPrintlnString( "Se encontro problemas de bateria" );
1a0004de:	4c05      	ldr	r4, [pc, #20]	; (1a0004f4 <informar+0x7c>)
1a0004e0:	4906      	ldr	r1, [pc, #24]	; (1a0004fc <informar+0x84>)
1a0004e2:	7820      	ldrb	r0, [r4, #0]
1a0004e4:	f003 fd6a 	bl	1a003fbc <printString>
1a0004e8:	7820      	ldrb	r0, [r4, #0]
1a0004ea:	f003 fd6b 	bl	1a003fc4 <printEnter>
1a0004ee:	e7e9      	b.n	1a0004c4 <informar+0x4c>
1a0004f0:	100000c8 	.word	0x100000c8
1a0004f4:	100000b8 	.word	0x100000b8
1a0004f8:	1a005320 	.word	0x1a005320
1a0004fc:	1a005370 	.word	0x1a005370

1a000500 <tecla_led_tarea_init>:
{
1a000500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for(i=0; i < N_TECLAS; i++)
1a000502:	2400      	movs	r4, #0
1a000504:	e016      	b.n	1a000534 <tecla_led_tarea_init+0x34>
		tecla_led_config[i].tecla = teclas[i];
1a000506:	4b0d      	ldr	r3, [pc, #52]	; (1a00053c <tecla_led_tarea_init+0x3c>)
1a000508:	5719      	ldrsb	r1, [r3, r4]
1a00050a:	4d0d      	ldr	r5, [pc, #52]	; (1a000540 <tecla_led_tarea_init+0x40>)
1a00050c:	00e6      	lsls	r6, r4, #3
1a00050e:	1b32      	subs	r2, r6, r4
1a000510:	0093      	lsls	r3, r2, #2
1a000512:	18ef      	adds	r7, r5, r3
1a000514:	54e9      	strb	r1, [r5, r3]
		tecla_led_config[i].led = leds[i];
1a000516:	4b0b      	ldr	r3, [pc, #44]	; (1a000544 <tecla_led_tarea_init+0x44>)
1a000518:	571b      	ldrsb	r3, [r3, r4]
1a00051a:	707b      	strb	r3, [r7, #1]
		tecla_led_config[i].sem_tec_pulsada = xSemaphoreCreateBinary();
1a00051c:	2203      	movs	r2, #3
1a00051e:	2100      	movs	r1, #0
1a000520:	2001      	movs	r0, #1
1a000522:	f000 fc27 	bl	1a000d74 <xQueueGenericCreate>
1a000526:	6178      	str	r0, [r7, #20]
		tecla_led_config[i].mutex		   = xSemaphoreCreateMutex();
1a000528:	2001      	movs	r0, #1
1a00052a:	f000 fd17 	bl	1a000f5c <xQueueCreateMutex>
1a00052e:	61b8      	str	r0, [r7, #24]
	for(i=0; i < N_TECLAS; i++)
1a000530:	3401      	adds	r4, #1
1a000532:	b2e4      	uxtb	r4, r4
1a000534:	2c01      	cmp	r4, #1
1a000536:	d9e6      	bls.n	1a000506 <tecla_led_tarea_init+0x6>
}
1a000538:	2001      	movs	r0, #1
1a00053a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00053c:	10000004 	.word	0x10000004
1a000540:	10002b2c 	.word	0x10002b2c
1a000544:	10000000 	.word	0x10000000

1a000548 <tecla_led_tareas_crear>:
{
1a000548:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00054a:	b083      	sub	sp, #12
	for( i=0; i < N_TECLAS; i++ )
1a00054c:	2400      	movs	r4, #0
1a00054e:	e018      	b.n	1a000582 <tecla_led_tareas_crear+0x3a>
						&tecla_led_config[i],                          // Parametros de tarea
1a000550:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
1a000554:	009d      	lsls	r5, r3, #2
1a000556:	4b0d      	ldr	r3, [pc, #52]	; (1a00058c <tecla_led_tareas_crear+0x44>)
1a000558:	441d      	add	r5, r3
				xTaskCreate(
1a00055a:	2700      	movs	r7, #0
1a00055c:	9701      	str	r7, [sp, #4]
1a00055e:	2601      	movs	r6, #1
1a000560:	9600      	str	r6, [sp, #0]
1a000562:	462b      	mov	r3, r5
1a000564:	22b4      	movs	r2, #180	; 0xb4
1a000566:	490a      	ldr	r1, [pc, #40]	; (1a000590 <tecla_led_tareas_crear+0x48>)
1a000568:	480a      	ldr	r0, [pc, #40]	; (1a000594 <tecla_led_tareas_crear+0x4c>)
1a00056a:	f001 f97a 	bl	1a001862 <xTaskCreate>
				xTaskCreate(
1a00056e:	9701      	str	r7, [sp, #4]
1a000570:	9600      	str	r6, [sp, #0]
1a000572:	462b      	mov	r3, r5
1a000574:	22b4      	movs	r2, #180	; 0xb4
1a000576:	4908      	ldr	r1, [pc, #32]	; (1a000598 <tecla_led_tareas_crear+0x50>)
1a000578:	4808      	ldr	r0, [pc, #32]	; (1a00059c <tecla_led_tareas_crear+0x54>)
1a00057a:	f001 f972 	bl	1a001862 <xTaskCreate>
	for( i=0; i < N_TECLAS; i++ )
1a00057e:	4434      	add	r4, r6
1a000580:	b2e4      	uxtb	r4, r4
1a000582:	2c01      	cmp	r4, #1
1a000584:	d9e4      	bls.n	1a000550 <tecla_led_tareas_crear+0x8>
}
1a000586:	2001      	movs	r0, #1
1a000588:	b003      	add	sp, #12
1a00058a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a00058c:	10002b2c 	.word	0x10002b2c
1a000590:	1a005458 	.word	0x1a005458
1a000594:	1a000461 	.word	0x1a000461
1a000598:	1a005468 	.word	0x1a005468
1a00059c:	1a0003e9 	.word	0x1a0003e9

1a0005a0 <main>:
{
1a0005a0:	b5f0      	push	{r4, r5, r6, r7, lr}
1a0005a2:	b083      	sub	sp, #12
   boardConfig();										// Inicializar y configurar la plataforma
1a0005a4:	f003 fccc 	bl	1a003f40 <boardInit>
   debugPrintConfigUart( UART_USB, 115200 );			// UART for debug messages
1a0005a8:	4c20      	ldr	r4, [pc, #128]	; (1a00062c <main+0x8c>)
1a0005aa:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
1a0005ae:	2103      	movs	r1, #3
1a0005b0:	4620      	mov	r0, r4
1a0005b2:	f003 fcfb 	bl	1a003fac <printInitUart>
   debugPrintlnString( "TP_Alejandro_Gorrin" );
1a0005b6:	491e      	ldr	r1, [pc, #120]	; (1a000630 <main+0x90>)
1a0005b8:	7820      	ldrb	r0, [r4, #0]
1a0005ba:	f003 fcff 	bl	1a003fbc <printString>
1a0005be:	7820      	ldrb	r0, [r4, #0]
1a0005c0:	f003 fd00 	bl	1a003fc4 <printEnter>
   if (tecla_led_tarea_init() == FALSE )				// Inicializa arreglo tecla_led, crea su semaforo y mutex
1a0005c4:	f7ff ff9c 	bl	1a000500 <tecla_led_tarea_init>
1a0005c8:	b910      	cbnz	r0, 1a0005d0 <main+0x30>
}
1a0005ca:	2000      	movs	r0, #0
1a0005cc:	b003      	add	sp, #12
1a0005ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
   if ( tecla_led_tareas_crear() == FALSE )				// creamos todas las tareas en freeRTOS
1a0005d0:	f7ff ffba 	bl	1a000548 <tecla_led_tareas_crear>
1a0005d4:	2800      	cmp	r0, #0
1a0005d6:	d0f8      	beq.n	1a0005ca <main+0x2a>
      xTaskCreate(
1a0005d8:	4d16      	ldr	r5, [pc, #88]	; (1a000634 <main+0x94>)
1a0005da:	2400      	movs	r4, #0
1a0005dc:	9401      	str	r4, [sp, #4]
1a0005de:	2601      	movs	r6, #1
1a0005e0:	9600      	str	r6, [sp, #0]
1a0005e2:	4623      	mov	r3, r4
1a0005e4:	22b4      	movs	r2, #180	; 0xb4
1a0005e6:	4629      	mov	r1, r5
1a0005e8:	4813      	ldr	r0, [pc, #76]	; (1a000638 <main+0x98>)
1a0005ea:	f001 f93a 	bl	1a001862 <xTaskCreate>
1a0005ee:	4607      	mov	r7, r0
      xTaskCreate(
1a0005f0:	9401      	str	r4, [sp, #4]
1a0005f2:	9600      	str	r6, [sp, #0]
1a0005f4:	4623      	mov	r3, r4
1a0005f6:	22b4      	movs	r2, #180	; 0xb4
1a0005f8:	4629      	mov	r1, r5
1a0005fa:	4810      	ldr	r0, [pc, #64]	; (1a00063c <main+0x9c>)
1a0005fc:	f001 f931 	bl	1a001862 <xTaskCreate>
      xTaskCreate(
1a000600:	9401      	str	r4, [sp, #4]
1a000602:	9600      	str	r6, [sp, #0]
1a000604:	4623      	mov	r3, r4
1a000606:	22b4      	movs	r2, #180	; 0xb4
1a000608:	4629      	mov	r1, r5
1a00060a:	480d      	ldr	r0, [pc, #52]	; (1a000640 <main+0xa0>)
1a00060c:	f001 f929 	bl	1a001862 <xTaskCreate>
         if (res == pdFAIL){							//Gestionar el error
1a000610:	b117      	cbz	r7, 1a000618 <main+0x78>
   vTaskStartScheduler();						// Iniciar scheduler
1a000612:	f001 f9c9 	bl	1a0019a8 <vTaskStartScheduler>
   }
1a000616:	e7fe      	b.n	1a000616 <main+0x76>
      	   debugPrintlnString( "No se lograron crear las tareas" );
1a000618:	4c04      	ldr	r4, [pc, #16]	; (1a00062c <main+0x8c>)
1a00061a:	490a      	ldr	r1, [pc, #40]	; (1a000644 <main+0xa4>)
1a00061c:	7820      	ldrb	r0, [r4, #0]
1a00061e:	f003 fccd 	bl	1a003fbc <printString>
1a000622:	7820      	ldrb	r0, [r4, #0]
1a000624:	f003 fcce 	bl	1a003fc4 <printEnter>
1a000628:	e7f3      	b.n	1a000612 <main+0x72>
1a00062a:	bf00      	nop
1a00062c:	100000b8 	.word	0x100000b8
1a000630:	1a0053ac 	.word	0x1a0053ac
1a000634:	1a0053c0 	.word	0x1a0053c0
1a000638:	1a000301 	.word	0x1a000301
1a00063c:	1a000361 	.word	0x1a000361
1a000640:	1a000479 	.word	0x1a000479
1a000644:	1a0053c8 	.word	0x1a0053c8

1a000648 <buttonPressed>:
void informar( void* taskParmPtr );

void tarea_led( void* taskParmPtr );

void buttonPressed( tecla_led_t* config )
{
1a000648:	b510      	push	{r4, lr}
1a00064a:	4604      	mov	r4, r0
	config->tiempo_down = xTaskGetTickCount();
1a00064c:	f001 f9fe 	bl	1a001a4c <xTaskGetTickCount>
1a000650:	60a0      	str	r0, [r4, #8]
}
1a000652:	bd10      	pop	{r4, pc}

1a000654 <buttonReleased>:

void buttonReleased( tecla_led_t* config )
{
1a000654:	b530      	push	{r4, r5, lr}
1a000656:	b083      	sub	sp, #12
1a000658:	4605      	mov	r5, r0
	config->tiempo_up = xTaskGetTickCount();
1a00065a:	f001 f9f7 	bl	1a001a4c <xTaskGetTickCount>
1a00065e:	60e8      	str	r0, [r5, #12]

	xSemaphoreTake(config->mutex, portMAX_DELAY);		// Se abre seccion critica
1a000660:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a000664:	69a8      	ldr	r0, [r5, #24]
1a000666:	f000 fd99 	bl	1a00119c <xQueueSemaphoreTake>


	BaseType_t res =
			xTaskCreate(
1a00066a:	2400      	movs	r4, #0
1a00066c:	9401      	str	r4, [sp, #4]
1a00066e:	2301      	movs	r3, #1
1a000670:	9300      	str	r3, [sp, #0]
1a000672:	4623      	mov	r3, r4
1a000674:	22b4      	movs	r2, #180	; 0xb4
1a000676:	4909      	ldr	r1, [pc, #36]	; (1a00069c <buttonReleased+0x48>)
1a000678:	4809      	ldr	r0, [pc, #36]	; (1a0006a0 <buttonReleased+0x4c>)
1a00067a:	f001 f8f2 	bl	1a001862 <xTaskCreate>
				  0,                          				// Parametros de tarea
				  tskIDLE_PRIORITY+1,         				// Prioridad de la tarea
				  0                           				// Puntero a la tarea creada en el sistema
			   );

	xSemaphoreGive(config->mutex);						// Se cierra seccion critica
1a00067e:	4623      	mov	r3, r4
1a000680:	4622      	mov	r2, r4
1a000682:	4621      	mov	r1, r4
1a000684:	69a8      	ldr	r0, [r5, #24]
1a000686:	f000 fb9d 	bl	1a000dc4 <xQueueGenericSend>

	xSemaphoreGive( config->sem_tec_pulsada);
1a00068a:	4623      	mov	r3, r4
1a00068c:	4622      	mov	r2, r4
1a00068e:	4621      	mov	r1, r4
1a000690:	6968      	ldr	r0, [r5, #20]
1a000692:	f000 fb97 	bl	1a000dc4 <xQueueGenericSend>
}
1a000696:	b003      	add	sp, #12
1a000698:	bd30      	pop	{r4, r5, pc}
1a00069a:	bf00      	nop
1a00069c:	1a0053c0 	.word	0x1a0053c0
1a0006a0:	1a000479 	.word	0x1a000479

1a0006a4 <fsmButtonError>:

void fsmButtonError( tecla_led_t* config )
{
   config->fsmButtonState = STATE_BUTTON_UP;
1a0006a4:	2300      	movs	r3, #0
1a0006a6:	7083      	strb	r3, [r0, #2]
}
1a0006a8:	4770      	bx	lr

1a0006aa <fsmButtonInit>:

void fsmButtonInit( tecla_led_t* config )
{
   config->fsmButtonState = STATE_BUTTON_UP;
1a0006aa:	2300      	movs	r3, #0
1a0006ac:	7083      	strb	r3, [r0, #2]
   config->contRising = 0;
1a0006ae:	7443      	strb	r3, [r0, #17]
   config->contFalling = 0;
1a0006b0:	7403      	strb	r3, [r0, #16]
}
1a0006b2:	4770      	bx	lr

1a0006b4 <fsmButtonUpdate>:

void fsmButtonUpdate( tecla_led_t* config )
{
1a0006b4:	b510      	push	{r4, lr}
1a0006b6:	4604      	mov	r4, r0
   switch( config->fsmButtonState )
1a0006b8:	7883      	ldrb	r3, [r0, #2]
1a0006ba:	2b03      	cmp	r3, #3
1a0006bc:	d841      	bhi.n	1a000742 <fsmButtonUpdate+0x8e>
1a0006be:	e8df f003 	tbb	[pc, r3]
1a0006c2:	0a02      	.short	0x0a02
1a0006c4:	2912      	.short	0x2912
   {
      case STATE_BUTTON_UP: 
         if( !gpioRead(config->tecla) ){
1a0006c6:	f990 0000 	ldrsb.w	r0, [r0]
1a0006ca:	f003 fbf6 	bl	1a003eba <gpioRead>
1a0006ce:	b980      	cbnz	r0, 1a0006f2 <fsmButtonUpdate+0x3e>
            config->fsmButtonState = STATE_BUTTON_FALLING;
1a0006d0:	2302      	movs	r3, #2
1a0006d2:	70a3      	strb	r3, [r4, #2]
1a0006d4:	e00d      	b.n	1a0006f2 <fsmButtonUpdate+0x3e>
         }
      break;

      case STATE_BUTTON_DOWN:
         if( gpioRead(config->tecla) ){
1a0006d6:	f990 0000 	ldrsb.w	r0, [r0]
1a0006da:	f003 fbee 	bl	1a003eba <gpioRead>
1a0006de:	b140      	cbz	r0, 1a0006f2 <fsmButtonUpdate+0x3e>
        	 config->fsmButtonState = STATE_BUTTON_RISING;
1a0006e0:	2303      	movs	r3, #3
1a0006e2:	70a3      	strb	r3, [r4, #2]
1a0006e4:	e005      	b.n	1a0006f2 <fsmButtonUpdate+0x3e>
         }
      break;

      case STATE_BUTTON_FALLING:      
         if( config->contFalling >= DEBOUNCE_TIME ){
1a0006e6:	7c03      	ldrb	r3, [r0, #16]
1a0006e8:	2b27      	cmp	r3, #39	; 0x27
1a0006ea:	d803      	bhi.n	1a0006f4 <fsmButtonUpdate+0x40>
            } else{
            	config->fsmButtonState = STATE_BUTTON_UP;
            }
            config->contFalling = 0;
         }
         config->contFalling++;
1a0006ec:	7c23      	ldrb	r3, [r4, #16]
1a0006ee:	3301      	adds	r3, #1
1a0006f0:	7423      	strb	r3, [r4, #16]

      default:
         fsmButtonError(config);
         break;
   }
}
1a0006f2:	bd10      	pop	{r4, pc}
            if( !gpioRead(config->tecla) ){
1a0006f4:	f990 0000 	ldrsb.w	r0, [r0]
1a0006f8:	f003 fbdf 	bl	1a003eba <gpioRead>
1a0006fc:	b120      	cbz	r0, 1a000708 <fsmButtonUpdate+0x54>
            	config->fsmButtonState = STATE_BUTTON_UP;
1a0006fe:	2300      	movs	r3, #0
1a000700:	70a3      	strb	r3, [r4, #2]
            config->contFalling = 0;
1a000702:	2300      	movs	r3, #0
1a000704:	7423      	strb	r3, [r4, #16]
1a000706:	e7f1      	b.n	1a0006ec <fsmButtonUpdate+0x38>
            	config->fsmButtonState = STATE_BUTTON_DOWN;
1a000708:	2301      	movs	r3, #1
1a00070a:	70a3      	strb	r3, [r4, #2]
               buttonPressed(config);
1a00070c:	4620      	mov	r0, r4
1a00070e:	f7ff ff9b 	bl	1a000648 <buttonPressed>
1a000712:	e7f6      	b.n	1a000702 <fsmButtonUpdate+0x4e>
         if( config->contRising >= DEBOUNCE_TIME ){
1a000714:	7c43      	ldrb	r3, [r0, #17]
1a000716:	2b27      	cmp	r3, #39	; 0x27
1a000718:	d803      	bhi.n	1a000722 <fsmButtonUpdate+0x6e>
         config->contRising++;
1a00071a:	7c63      	ldrb	r3, [r4, #17]
1a00071c:	3301      	adds	r3, #1
1a00071e:	7463      	strb	r3, [r4, #17]
         break;
1a000720:	e7e7      	b.n	1a0006f2 <fsmButtonUpdate+0x3e>
            if( gpioRead(config->tecla) )
1a000722:	f990 0000 	ldrsb.w	r0, [r0]
1a000726:	f003 fbc8 	bl	1a003eba <gpioRead>
1a00072a:	b920      	cbnz	r0, 1a000736 <fsmButtonUpdate+0x82>
            	config->fsmButtonState = STATE_BUTTON_DOWN;
1a00072c:	2301      	movs	r3, #1
1a00072e:	70a3      	strb	r3, [r4, #2]
            config->contRising = 0;
1a000730:	2300      	movs	r3, #0
1a000732:	7463      	strb	r3, [r4, #17]
1a000734:	e7f1      	b.n	1a00071a <fsmButtonUpdate+0x66>
            	config->fsmButtonState = STATE_BUTTON_UP;
1a000736:	2300      	movs	r3, #0
1a000738:	70a3      	strb	r3, [r4, #2]
                buttonReleased(config);
1a00073a:	4620      	mov	r0, r4
1a00073c:	f7ff ff8a 	bl	1a000654 <buttonReleased>
1a000740:	e7f6      	b.n	1a000730 <fsmButtonUpdate+0x7c>
         fsmButtonError(config);
1a000742:	f7ff ffaf 	bl	1a0006a4 <fsmButtonError>
}
1a000746:	e7d4      	b.n	1a0006f2 <fsmButtonUpdate+0x3e>

1a000748 <initialise_monitor_handles>:
}
1a000748:	4770      	bx	lr
1a00074a:	Address 0x000000001a00074a is out of bounds.


1a00074c <Reset_Handler>:
void Reset_Handler(void) {
1a00074c:	b510      	push	{r4, lr}
    __asm__ volatile("cpsid i");
1a00074e:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a000750:	4b19      	ldr	r3, [pc, #100]	; (1a0007b8 <Reset_Handler+0x6c>)
1a000752:	4a1a      	ldr	r2, [pc, #104]	; (1a0007bc <Reset_Handler+0x70>)
1a000754:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a000756:	3304      	adds	r3, #4
1a000758:	4a19      	ldr	r2, [pc, #100]	; (1a0007c0 <Reset_Handler+0x74>)
1a00075a:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a00075c:	2300      	movs	r3, #0
1a00075e:	e005      	b.n	1a00076c <Reset_Handler+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a000760:	4a18      	ldr	r2, [pc, #96]	; (1a0007c4 <Reset_Handler+0x78>)
1a000762:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a000766:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a00076a:	3301      	adds	r3, #1
1a00076c:	2b07      	cmp	r3, #7
1a00076e:	d9f7      	bls.n	1a000760 <Reset_Handler+0x14>
    __asm__ volatile("cpsie i");
1a000770:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a000772:	4b15      	ldr	r3, [pc, #84]	; (1a0007c8 <Reset_Handler+0x7c>)
    while (SectionTableAddr < &__data_section_table_end) {
1a000774:	e007      	b.n	1a000786 <Reset_Handler+0x3a>
        SectionLen = *SectionTableAddr++;
1a000776:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a00077a:	689a      	ldr	r2, [r3, #8]
1a00077c:	6859      	ldr	r1, [r3, #4]
1a00077e:	6818      	ldr	r0, [r3, #0]
1a000780:	f7ff fd03 	bl	1a00018a <data_init>
        SectionLen = *SectionTableAddr++;
1a000784:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a000786:	4a11      	ldr	r2, [pc, #68]	; (1a0007cc <Reset_Handler+0x80>)
1a000788:	4293      	cmp	r3, r2
1a00078a:	d3f4      	bcc.n	1a000776 <Reset_Handler+0x2a>
1a00078c:	e006      	b.n	1a00079c <Reset_Handler+0x50>
        ExeAddr = *SectionTableAddr++;
1a00078e:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a000790:	6859      	ldr	r1, [r3, #4]
1a000792:	f854 0b08 	ldr.w	r0, [r4], #8
1a000796:	f7ff fd07 	bl	1a0001a8 <bss_init>
        SectionLen = *SectionTableAddr++;
1a00079a:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a00079c:	4a0c      	ldr	r2, [pc, #48]	; (1a0007d0 <Reset_Handler+0x84>)
1a00079e:	4293      	cmp	r3, r2
1a0007a0:	d3f5      	bcc.n	1a00078e <Reset_Handler+0x42>
    SystemInit();
1a0007a2:	f003 f87d 	bl	1a0038a0 <SystemInit>
    __libc_init_array();
1a0007a6:	f003 ff4d 	bl	1a004644 <__libc_init_array>
    initialise_monitor_handles();
1a0007aa:	f7ff ffcd 	bl	1a000748 <initialise_monitor_handles>
    main();
1a0007ae:	f7ff fef7 	bl	1a0005a0 <main>
        __asm__ volatile("wfi");
1a0007b2:	bf30      	wfi
1a0007b4:	e7fd      	b.n	1a0007b2 <Reset_Handler+0x66>
1a0007b6:	bf00      	nop
1a0007b8:	40053100 	.word	0x40053100
1a0007bc:	10df1000 	.word	0x10df1000
1a0007c0:	01dff7ff 	.word	0x01dff7ff
1a0007c4:	e000e280 	.word	0xe000e280
1a0007c8:	1a000114 	.word	0x1a000114
1a0007cc:	1a000150 	.word	0x1a000150
1a0007d0:	1a000178 	.word	0x1a000178

1a0007d4 <_fini>:
void _fini(void) {}
1a0007d4:	4770      	bx	lr

1a0007d6 <_init>:
void _init(void) {}
1a0007d6:	4770      	bx	lr

1a0007d8 <_close_r>:
   (void) __params__;
}

int _close_r(struct _reent *r, int fd) {
   UNUSED(fd);
   SET_ERR(EBADF);
1a0007d8:	2309      	movs	r3, #9
1a0007da:	6003      	str	r3, [r0, #0]
   return -1;
}
1a0007dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0007e0:	4770      	bx	lr

1a0007e2 <_fstat_r>:
}

int _fstat_r(struct _reent *r, int fd, struct stat *st) {
   UNUSED(fd);
   UNUSED(st);
   SET_ERR(ENOSYS);
1a0007e2:	2358      	movs	r3, #88	; 0x58
1a0007e4:	6003      	str	r3, [r0, #0]
   return -1;
}
1a0007e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0007ea:	4770      	bx	lr

1a0007ec <_isatty_r>:
   UNUSED(r);
   return 1;
}

int _isatty_r(struct _reent *r, int fd) {
   switch (fd) {
1a0007ec:	2902      	cmp	r1, #2
1a0007ee:	d904      	bls.n	1a0007fa <_isatty_r+0xe>
   case 0:
   case 1:
   case 2:
       return 1;
   default:
       SET_ERR(EBADF);
1a0007f0:	2309      	movs	r3, #9
1a0007f2:	6003      	str	r3, [r0, #0]
       return -1;
1a0007f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0007f8:	4770      	bx	lr
       return 1;
1a0007fa:	2001      	movs	r0, #1
   }
}
1a0007fc:	4770      	bx	lr

1a0007fe <_lseek_r>:

_off_t _lseek_r(struct _reent *r, int fd, _off_t off, int w) {
   UNUSED(fd);
   UNUSED(off);
   UNUSED(w);
   SET_ERR(ENOSYS);
1a0007fe:	2358      	movs	r3, #88	; 0x58
1a000800:	6003      	str	r3, [r0, #0]
   return -1;
}
1a000802:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000806:	4770      	bx	lr

1a000808 <_read_r>:
   }
}
*/
_ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
  size_t i = 0;
  switch (fd) {
1a000808:	2902      	cmp	r1, #2
1a00080a:	d81f      	bhi.n	1a00084c <_read_r+0x44>
_ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
1a00080c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a000810:	461d      	mov	r5, r3
1a000812:	4617      	mov	r7, r2
1a000814:	4606      	mov	r6, r0
  size_t i = 0;
1a000816:	2400      	movs	r4, #0
  case 0:
  case 1:
  case 2:
      while( i < n ){
1a000818:	42ac      	cmp	r4, r5
1a00081a:	d211      	bcs.n	1a000840 <_read_r+0x38>
         int c = __stdio_getchar();
1a00081c:	f002 f991 	bl	1a002b42 <__stdio_getchar>
         if( c != -1 ){
1a000820:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a000824:	d0f8      	beq.n	1a000818 <_read_r+0x10>
            ((char*) b)[i++] = (char) c;
1a000826:	f104 0801 	add.w	r8, r4, #1
1a00082a:	5538      	strb	r0, [r7, r4]
            if( c == '\r' || c == '\n' ){
1a00082c:	280d      	cmp	r0, #13
1a00082e:	d003      	beq.n	1a000838 <_read_r+0x30>
1a000830:	280a      	cmp	r0, #10
1a000832:	d001      	beq.n	1a000838 <_read_r+0x30>
            ((char*) b)[i++] = (char) c;
1a000834:	4644      	mov	r4, r8
1a000836:	e7ef      	b.n	1a000818 <_read_r+0x10>
               // read anotherone to prevent \r\n
               (void) __stdio_getchar();
1a000838:	f002 f983 	bl	1a002b42 <__stdio_getchar>
               return i;
1a00083c:	4640      	mov	r0, r8
1a00083e:	e003      	b.n	1a000848 <_read_r+0x40>
            }
         }
      }
      SET_ERR(ENODEV);
1a000840:	2313      	movs	r3, #19
1a000842:	6033      	str	r3, [r6, #0]
      return -1;
1a000844:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  default:
      SET_ERR(ENODEV);
      return -1;
  }
}
1a000848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_ERR(ENODEV);
1a00084c:	2313      	movs	r3, #19
1a00084e:	6003      	str	r3, [r0, #0]
      return -1;
1a000850:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a000854:	4770      	bx	lr

1a000856 <_write_r>:
   return -1;
}

_ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
   size_t i;
   switch (fd) {
1a000856:	2902      	cmp	r1, #2
1a000858:	d80c      	bhi.n	1a000874 <_write_r+0x1e>
_ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
1a00085a:	b570      	push	{r4, r5, r6, lr}
1a00085c:	461d      	mov	r5, r3
1a00085e:	4616      	mov	r6, r2
   case 0:
   case 1:
   case 2:
       for (i = 0; i < n; i++)
1a000860:	2400      	movs	r4, #0
1a000862:	42ac      	cmp	r4, r5
1a000864:	d204      	bcs.n	1a000870 <_write_r+0x1a>
           __stdio_putchar(((char*) b)[i]);
1a000866:	5d30      	ldrb	r0, [r6, r4]
1a000868:	f002 f966 	bl	1a002b38 <__stdio_putchar>
       for (i = 0; i < n; i++)
1a00086c:	3401      	adds	r4, #1
1a00086e:	e7f8      	b.n	1a000862 <_write_r+0xc>
       return n;
1a000870:	4628      	mov	r0, r5
   default:
       SET_ERR(ENODEV);
       return -1;
   }
}
1a000872:	bd70      	pop	{r4, r5, r6, pc}
       SET_ERR(ENODEV);
1a000874:	2313      	movs	r3, #19
1a000876:	6003      	str	r3, [r0, #0]
       return -1;
1a000878:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a00087c:	4770      	bx	lr
1a00087e:	Address 0x000000001a00087e is out of bounds.


1a000880 <_sbrk_r>:

void *_sbrk_r(struct _reent *r, ptrdiff_t incr) {
   extern int _pvHeapStart;
   static void *heap_end;
   void *prev_heap_end;
   if (heap_end == 0) {
1a000880:	4b05      	ldr	r3, [pc, #20]	; (1a000898 <_sbrk_r+0x18>)
1a000882:	681b      	ldr	r3, [r3, #0]
1a000884:	b123      	cbz	r3, 1a000890 <_sbrk_r+0x10>
       heap_end = &_pvHeapStart;
   }
   prev_heap_end = heap_end;
1a000886:	4b04      	ldr	r3, [pc, #16]	; (1a000898 <_sbrk_r+0x18>)
1a000888:	6818      	ldr	r0, [r3, #0]
   heap_end += incr;
1a00088a:	4401      	add	r1, r0
1a00088c:	6019      	str	r1, [r3, #0]
   return prev_heap_end;
}
1a00088e:	4770      	bx	lr
       heap_end = &_pvHeapStart;
1a000890:	4b01      	ldr	r3, [pc, #4]	; (1a000898 <_sbrk_r+0x18>)
1a000892:	4a02      	ldr	r2, [pc, #8]	; (1a00089c <_sbrk_r+0x1c>)
1a000894:	601a      	str	r2, [r3, #0]
1a000896:	e7f6      	b.n	1a000886 <_sbrk_r+0x6>
1a000898:	100000d4 	.word	0x100000d4
1a00089c:	10002bb8 	.word	0x10002bb8

1a0008a0 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
1a0008a0:	4a12      	ldr	r2, [pc, #72]	; (1a0008ec <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
1a0008a2:	f012 0f07 	tst.w	r2, #7
1a0008a6:	d007      	beq.n	1a0008b8 <prvHeapInit+0x18>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
1a0008a8:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
1a0008aa:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
1a0008ae:	f5c1 5300 	rsb	r3, r1, #8192	; 0x2000
1a0008b2:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
1a0008b4:	460a      	mov	r2, r1
1a0008b6:	e001      	b.n	1a0008bc <prvHeapInit+0x1c>
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
1a0008b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
1a0008bc:	480c      	ldr	r0, [pc, #48]	; (1a0008f0 <prvHeapInit+0x50>)
1a0008be:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
1a0008c0:	2100      	movs	r1, #0
1a0008c2:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
1a0008c4:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
1a0008c6:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
1a0008c8:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
1a0008cc:	4809      	ldr	r0, [pc, #36]	; (1a0008f4 <prvHeapInit+0x54>)
1a0008ce:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
1a0008d0:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
1a0008d2:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
1a0008d4:	1a99      	subs	r1, r3, r2
1a0008d6:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
1a0008d8:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
1a0008da:	4b07      	ldr	r3, [pc, #28]	; (1a0008f8 <prvHeapInit+0x58>)
1a0008dc:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
1a0008de:	4b07      	ldr	r3, [pc, #28]	; (1a0008fc <prvHeapInit+0x5c>)
1a0008e0:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
1a0008e2:	4b07      	ldr	r3, [pc, #28]	; (1a000900 <prvHeapInit+0x60>)
1a0008e4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
1a0008e8:	601a      	str	r2, [r3, #0]
}
1a0008ea:	4770      	bx	lr
1a0008ec:	100000dc 	.word	0x100000dc
1a0008f0:	100020e8 	.word	0x100020e8
1a0008f4:	100000d8 	.word	0x100000d8
1a0008f8:	100020e4 	.word	0x100020e4
1a0008fc:	100020e0 	.word	0x100020e0
1a000900:	100020dc 	.word	0x100020dc

1a000904 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
1a000904:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
1a000906:	4a13      	ldr	r2, [pc, #76]	; (1a000954 <prvInsertBlockIntoFreeList+0x50>)
1a000908:	e000      	b.n	1a00090c <prvInsertBlockIntoFreeList+0x8>
1a00090a:	461a      	mov	r2, r3
1a00090c:	6813      	ldr	r3, [r2, #0]
1a00090e:	4283      	cmp	r3, r0
1a000910:	d3fb      	bcc.n	1a00090a <prvInsertBlockIntoFreeList+0x6>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
1a000912:	6851      	ldr	r1, [r2, #4]
1a000914:	1854      	adds	r4, r2, r1
1a000916:	4284      	cmp	r4, r0
1a000918:	d00a      	beq.n	1a000930 <prvInsertBlockIntoFreeList+0x2c>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
1a00091a:	6841      	ldr	r1, [r0, #4]
1a00091c:	1844      	adds	r4, r0, r1
1a00091e:	42a3      	cmp	r3, r4
1a000920:	d00b      	beq.n	1a00093a <prvInsertBlockIntoFreeList+0x36>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
1a000922:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
1a000924:	4290      	cmp	r0, r2
1a000926:	d000      	beq.n	1a00092a <prvInsertBlockIntoFreeList+0x26>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
1a000928:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
1a00092a:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00092e:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
1a000930:	6840      	ldr	r0, [r0, #4]
1a000932:	4401      	add	r1, r0
1a000934:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
1a000936:	4610      	mov	r0, r2
1a000938:	e7ef      	b.n	1a00091a <prvInsertBlockIntoFreeList+0x16>
		if( pxIterator->pxNextFreeBlock != pxEnd )
1a00093a:	4c07      	ldr	r4, [pc, #28]	; (1a000958 <prvInsertBlockIntoFreeList+0x54>)
1a00093c:	6824      	ldr	r4, [r4, #0]
1a00093e:	42a3      	cmp	r3, r4
1a000940:	d006      	beq.n	1a000950 <prvInsertBlockIntoFreeList+0x4c>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
1a000942:	685b      	ldr	r3, [r3, #4]
1a000944:	4419      	add	r1, r3
1a000946:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
1a000948:	6813      	ldr	r3, [r2, #0]
1a00094a:	681b      	ldr	r3, [r3, #0]
1a00094c:	6003      	str	r3, [r0, #0]
1a00094e:	e7e9      	b.n	1a000924 <prvInsertBlockIntoFreeList+0x20>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
1a000950:	6004      	str	r4, [r0, #0]
1a000952:	e7e7      	b.n	1a000924 <prvInsertBlockIntoFreeList+0x20>
1a000954:	100020e8 	.word	0x100020e8
1a000958:	100000d8 	.word	0x100000d8

1a00095c <pvPortMalloc>:
{
1a00095c:	b570      	push	{r4, r5, r6, lr}
1a00095e:	4604      	mov	r4, r0
	vTaskSuspendAll();
1a000960:	f001 f86c 	bl	1a001a3c <vTaskSuspendAll>
		if( pxEnd == NULL )
1a000964:	4b3f      	ldr	r3, [pc, #252]	; (1a000a64 <pvPortMalloc+0x108>)
1a000966:	681b      	ldr	r3, [r3, #0]
1a000968:	b1bb      	cbz	r3, 1a00099a <pvPortMalloc+0x3e>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
1a00096a:	4b3f      	ldr	r3, [pc, #252]	; (1a000a68 <pvPortMalloc+0x10c>)
1a00096c:	681b      	ldr	r3, [r3, #0]
1a00096e:	421c      	tst	r4, r3
1a000970:	d116      	bne.n	1a0009a0 <pvPortMalloc+0x44>
			if( xWantedSize > 0 )
1a000972:	b334      	cbz	r4, 1a0009c2 <pvPortMalloc+0x66>
				xWantedSize += xHeapStructSize;
1a000974:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
1a000976:	f014 0f07 	tst.w	r4, #7
1a00097a:	d022      	beq.n	1a0009c2 <pvPortMalloc+0x66>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
1a00097c:	f024 0407 	bic.w	r4, r4, #7
1a000980:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
1a000982:	f004 0307 	and.w	r3, r4, #7
1a000986:	b1e3      	cbz	r3, 1a0009c2 <pvPortMalloc+0x66>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
1a000988:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00098c:	f383 8811 	msr	BASEPRI, r3
1a000990:	f3bf 8f6f 	isb	sy
1a000994:	f3bf 8f4f 	dsb	sy
1a000998:	e7fe      	b.n	1a000998 <pvPortMalloc+0x3c>
			prvHeapInit();
1a00099a:	f7ff ff81 	bl	1a0008a0 <prvHeapInit>
1a00099e:	e7e4      	b.n	1a00096a <pvPortMalloc+0xe>
	( void ) xTaskResumeAll();
1a0009a0:	f001 f8e6 	bl	1a001b70 <xTaskResumeAll>
void *pvReturn = NULL;
1a0009a4:	2600      	movs	r6, #0
			vApplicationMallocFailedHook();
1a0009a6:	f000 fd7d 	bl	1a0014a4 <vApplicationMallocFailedHook>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
1a0009aa:	f016 0f07 	tst.w	r6, #7
1a0009ae:	d057      	beq.n	1a000a60 <pvPortMalloc+0x104>
1a0009b0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0009b4:	f383 8811 	msr	BASEPRI, r3
1a0009b8:	f3bf 8f6f 	isb	sy
1a0009bc:	f3bf 8f4f 	dsb	sy
1a0009c0:	e7fe      	b.n	1a0009c0 <pvPortMalloc+0x64>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
1a0009c2:	b134      	cbz	r4, 1a0009d2 <pvPortMalloc+0x76>
1a0009c4:	4b29      	ldr	r3, [pc, #164]	; (1a000a6c <pvPortMalloc+0x110>)
1a0009c6:	681b      	ldr	r3, [r3, #0]
1a0009c8:	42a3      	cmp	r3, r4
1a0009ca:	d306      	bcc.n	1a0009da <pvPortMalloc+0x7e>
				pxBlock = xStart.pxNextFreeBlock;
1a0009cc:	4b28      	ldr	r3, [pc, #160]	; (1a000a70 <pvPortMalloc+0x114>)
1a0009ce:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
1a0009d0:	e009      	b.n	1a0009e6 <pvPortMalloc+0x8a>
	( void ) xTaskResumeAll();
1a0009d2:	f001 f8cd 	bl	1a001b70 <xTaskResumeAll>
void *pvReturn = NULL;
1a0009d6:	2600      	movs	r6, #0
1a0009d8:	e7e5      	b.n	1a0009a6 <pvPortMalloc+0x4a>
	( void ) xTaskResumeAll();
1a0009da:	f001 f8c9 	bl	1a001b70 <xTaskResumeAll>
void *pvReturn = NULL;
1a0009de:	2600      	movs	r6, #0
1a0009e0:	e7e1      	b.n	1a0009a6 <pvPortMalloc+0x4a>
					pxPreviousBlock = pxBlock;
1a0009e2:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
1a0009e4:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
1a0009e6:	686a      	ldr	r2, [r5, #4]
1a0009e8:	42a2      	cmp	r2, r4
1a0009ea:	d202      	bcs.n	1a0009f2 <pvPortMalloc+0x96>
1a0009ec:	682a      	ldr	r2, [r5, #0]
1a0009ee:	2a00      	cmp	r2, #0
1a0009f0:	d1f7      	bne.n	1a0009e2 <pvPortMalloc+0x86>
				if( pxBlock != pxEnd )
1a0009f2:	4a1c      	ldr	r2, [pc, #112]	; (1a000a64 <pvPortMalloc+0x108>)
1a0009f4:	6812      	ldr	r2, [r2, #0]
1a0009f6:	42aa      	cmp	r2, r5
1a0009f8:	d014      	beq.n	1a000a24 <pvPortMalloc+0xc8>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
1a0009fa:	681e      	ldr	r6, [r3, #0]
1a0009fc:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
1a0009fe:	682a      	ldr	r2, [r5, #0]
1a000a00:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
1a000a02:	686b      	ldr	r3, [r5, #4]
1a000a04:	1b1b      	subs	r3, r3, r4
1a000a06:	2b10      	cmp	r3, #16
1a000a08:	d914      	bls.n	1a000a34 <pvPortMalloc+0xd8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
1a000a0a:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
1a000a0c:	f010 0f07 	tst.w	r0, #7
1a000a10:	d00c      	beq.n	1a000a2c <pvPortMalloc+0xd0>
1a000a12:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000a16:	f383 8811 	msr	BASEPRI, r3
1a000a1a:	f3bf 8f6f 	isb	sy
1a000a1e:	f3bf 8f4f 	dsb	sy
1a000a22:	e7fe      	b.n	1a000a22 <pvPortMalloc+0xc6>
	( void ) xTaskResumeAll();
1a000a24:	f001 f8a4 	bl	1a001b70 <xTaskResumeAll>
void *pvReturn = NULL;
1a000a28:	2600      	movs	r6, #0
1a000a2a:	e7bc      	b.n	1a0009a6 <pvPortMalloc+0x4a>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
1a000a2c:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
1a000a2e:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
1a000a30:	f7ff ff68 	bl	1a000904 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
1a000a34:	686a      	ldr	r2, [r5, #4]
1a000a36:	490d      	ldr	r1, [pc, #52]	; (1a000a6c <pvPortMalloc+0x110>)
1a000a38:	680b      	ldr	r3, [r1, #0]
1a000a3a:	1a9b      	subs	r3, r3, r2
1a000a3c:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
1a000a3e:	490d      	ldr	r1, [pc, #52]	; (1a000a74 <pvPortMalloc+0x118>)
1a000a40:	6809      	ldr	r1, [r1, #0]
1a000a42:	428b      	cmp	r3, r1
1a000a44:	d201      	bcs.n	1a000a4a <pvPortMalloc+0xee>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
1a000a46:	490b      	ldr	r1, [pc, #44]	; (1a000a74 <pvPortMalloc+0x118>)
1a000a48:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
1a000a4a:	4b07      	ldr	r3, [pc, #28]	; (1a000a68 <pvPortMalloc+0x10c>)
1a000a4c:	681b      	ldr	r3, [r3, #0]
1a000a4e:	4313      	orrs	r3, r2
1a000a50:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
1a000a52:	2300      	movs	r3, #0
1a000a54:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
1a000a56:	f001 f88b 	bl	1a001b70 <xTaskResumeAll>
		if( pvReturn == NULL )
1a000a5a:	2e00      	cmp	r6, #0
1a000a5c:	d1a5      	bne.n	1a0009aa <pvPortMalloc+0x4e>
1a000a5e:	e7a2      	b.n	1a0009a6 <pvPortMalloc+0x4a>
}
1a000a60:	4630      	mov	r0, r6
1a000a62:	bd70      	pop	{r4, r5, r6, pc}
1a000a64:	100000d8 	.word	0x100000d8
1a000a68:	100020dc 	.word	0x100020dc
1a000a6c:	100020e0 	.word	0x100020e0
1a000a70:	100020e8 	.word	0x100020e8
1a000a74:	100020e4 	.word	0x100020e4

1a000a78 <vPortFree>:
	if( pv != NULL )
1a000a78:	b380      	cbz	r0, 1a000adc <vPortFree+0x64>
{
1a000a7a:	b538      	push	{r3, r4, r5, lr}
1a000a7c:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
1a000a7e:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
1a000a82:	f850 2c04 	ldr.w	r2, [r0, #-4]
1a000a86:	4916      	ldr	r1, [pc, #88]	; (1a000ae0 <vPortFree+0x68>)
1a000a88:	6809      	ldr	r1, [r1, #0]
1a000a8a:	420a      	tst	r2, r1
1a000a8c:	d108      	bne.n	1a000aa0 <vPortFree+0x28>
1a000a8e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000a92:	f383 8811 	msr	BASEPRI, r3
1a000a96:	f3bf 8f6f 	isb	sy
1a000a9a:	f3bf 8f4f 	dsb	sy
1a000a9e:	e7fe      	b.n	1a000a9e <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
1a000aa0:	f850 0c08 	ldr.w	r0, [r0, #-8]
1a000aa4:	b140      	cbz	r0, 1a000ab8 <vPortFree+0x40>
1a000aa6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000aaa:	f383 8811 	msr	BASEPRI, r3
1a000aae:	f3bf 8f6f 	isb	sy
1a000ab2:	f3bf 8f4f 	dsb	sy
1a000ab6:	e7fe      	b.n	1a000ab6 <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
1a000ab8:	ea22 0201 	bic.w	r2, r2, r1
1a000abc:	f844 2c04 	str.w	r2, [r4, #-4]
				vTaskSuspendAll();
1a000ac0:	f000 ffbc 	bl	1a001a3c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
1a000ac4:	f854 1c04 	ldr.w	r1, [r4, #-4]
1a000ac8:	4a06      	ldr	r2, [pc, #24]	; (1a000ae4 <vPortFree+0x6c>)
1a000aca:	6813      	ldr	r3, [r2, #0]
1a000acc:	440b      	add	r3, r1
1a000ace:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
1a000ad0:	4628      	mov	r0, r5
1a000ad2:	f7ff ff17 	bl	1a000904 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
1a000ad6:	f001 f84b 	bl	1a001b70 <xTaskResumeAll>
}
1a000ada:	bd38      	pop	{r3, r4, r5, pc}
1a000adc:	4770      	bx	lr
1a000ade:	bf00      	nop
1a000ae0:	100020dc 	.word	0x100020dc
1a000ae4:	100020e0 	.word	0x100020e0

1a000ae8 <prvGetDisinheritPriorityAfterTimeout>:
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
1a000ae8:	6a43      	ldr	r3, [r0, #36]	; 0x24
1a000aea:	b123      	cbz	r3, 1a000af6 <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
1a000aec:	6b03      	ldr	r3, [r0, #48]	; 0x30
1a000aee:	6818      	ldr	r0, [r3, #0]
1a000af0:	f1c0 0007 	rsb	r0, r0, #7
1a000af4:	4770      	bx	lr
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
1a000af6:	2000      	movs	r0, #0
		}

		return uxHighestPriorityOfWaitingTasks;
	}
1a000af8:	4770      	bx	lr

1a000afa <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
1a000afa:	b510      	push	{r4, lr}
1a000afc:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
1a000afe:	f001 fdc9 	bl	1a002694 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
1a000b02:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a000b04:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a000b06:	429a      	cmp	r2, r3
1a000b08:	d004      	beq.n	1a000b14 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
1a000b0a:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
1a000b0c:	f001 fde4 	bl	1a0026d8 <vPortExitCritical>

	return xReturn;
}
1a000b10:	4620      	mov	r0, r4
1a000b12:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
1a000b14:	2401      	movs	r4, #1
1a000b16:	e7f9      	b.n	1a000b0c <prvIsQueueFull+0x12>

1a000b18 <prvIsQueueEmpty>:
{
1a000b18:	b510      	push	{r4, lr}
1a000b1a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a000b1c:	f001 fdba 	bl	1a002694 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
1a000b20:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a000b22:	b923      	cbnz	r3, 1a000b2e <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
1a000b24:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
1a000b26:	f001 fdd7 	bl	1a0026d8 <vPortExitCritical>
}
1a000b2a:	4620      	mov	r0, r4
1a000b2c:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
1a000b2e:	2400      	movs	r4, #0
1a000b30:	e7f9      	b.n	1a000b26 <prvIsQueueEmpty+0xe>

1a000b32 <prvCopyDataToQueue>:
{
1a000b32:	b570      	push	{r4, r5, r6, lr}
1a000b34:	4604      	mov	r4, r0
1a000b36:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a000b38:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
1a000b3a:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a000b3c:	b95a      	cbnz	r2, 1a000b56 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a000b3e:	6803      	ldr	r3, [r0, #0]
1a000b40:	b11b      	cbz	r3, 1a000b4a <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
1a000b42:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
1a000b44:	3501      	adds	r5, #1
1a000b46:	63a5      	str	r5, [r4, #56]	; 0x38
}
1a000b48:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
1a000b4a:	6840      	ldr	r0, [r0, #4]
1a000b4c:	f001 fa56 	bl	1a001ffc <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
1a000b50:	2300      	movs	r3, #0
1a000b52:	6063      	str	r3, [r4, #4]
1a000b54:	e7f6      	b.n	1a000b44 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
1a000b56:	b96e      	cbnz	r6, 1a000b74 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
1a000b58:	6880      	ldr	r0, [r0, #8]
1a000b5a:	f003 fdb4 	bl	1a0046c6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
1a000b5e:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a000b60:	68a3      	ldr	r3, [r4, #8]
1a000b62:	4413      	add	r3, r2
1a000b64:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a000b66:	6862      	ldr	r2, [r4, #4]
1a000b68:	4293      	cmp	r3, r2
1a000b6a:	d319      	bcc.n	1a000ba0 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
1a000b6c:	6823      	ldr	r3, [r4, #0]
1a000b6e:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
1a000b70:	2000      	movs	r0, #0
1a000b72:	e7e7      	b.n	1a000b44 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a000b74:	68c0      	ldr	r0, [r0, #12]
1a000b76:	f003 fda6 	bl	1a0046c6 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
1a000b7a:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a000b7c:	4252      	negs	r2, r2
1a000b7e:	68e3      	ldr	r3, [r4, #12]
1a000b80:	4413      	add	r3, r2
1a000b82:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a000b84:	6821      	ldr	r1, [r4, #0]
1a000b86:	428b      	cmp	r3, r1
1a000b88:	d202      	bcs.n	1a000b90 <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
1a000b8a:	6863      	ldr	r3, [r4, #4]
1a000b8c:	441a      	add	r2, r3
1a000b8e:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
1a000b90:	2e02      	cmp	r6, #2
1a000b92:	d001      	beq.n	1a000b98 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
1a000b94:	2000      	movs	r0, #0
1a000b96:	e7d5      	b.n	1a000b44 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a000b98:	b125      	cbz	r5, 1a000ba4 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
1a000b9a:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
1a000b9c:	2000      	movs	r0, #0
1a000b9e:	e7d1      	b.n	1a000b44 <prvCopyDataToQueue+0x12>
1a000ba0:	2000      	movs	r0, #0
1a000ba2:	e7cf      	b.n	1a000b44 <prvCopyDataToQueue+0x12>
1a000ba4:	2000      	movs	r0, #0
1a000ba6:	e7cd      	b.n	1a000b44 <prvCopyDataToQueue+0x12>

1a000ba8 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
1a000ba8:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a000baa:	b172      	cbz	r2, 1a000bca <prvCopyDataFromQueue+0x22>
{
1a000bac:	b510      	push	{r4, lr}
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
1a000bae:	68c3      	ldr	r3, [r0, #12]
1a000bb0:	4413      	add	r3, r2
1a000bb2:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
1a000bb4:	6844      	ldr	r4, [r0, #4]
1a000bb6:	42a3      	cmp	r3, r4
1a000bb8:	d301      	bcc.n	1a000bbe <prvCopyDataFromQueue+0x16>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
1a000bba:	6803      	ldr	r3, [r0, #0]
1a000bbc:	60c3      	str	r3, [r0, #12]
1a000bbe:	460c      	mov	r4, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
1a000bc0:	68c1      	ldr	r1, [r0, #12]
1a000bc2:	4620      	mov	r0, r4
1a000bc4:	f003 fd7f 	bl	1a0046c6 <memcpy>
}
1a000bc8:	bd10      	pop	{r4, pc}
1a000bca:	4770      	bx	lr

1a000bcc <prvUnlockQueue>:
{
1a000bcc:	b538      	push	{r3, r4, r5, lr}
1a000bce:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
1a000bd0:	f001 fd60 	bl	1a002694 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
1a000bd4:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
1a000bd8:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a000bda:	e003      	b.n	1a000be4 <prvUnlockQueue+0x18>
						vTaskMissedYield();
1a000bdc:	f001 f99a 	bl	1a001f14 <vTaskMissedYield>
			--cTxLock;
1a000be0:	3c01      	subs	r4, #1
1a000be2:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a000be4:	2c00      	cmp	r4, #0
1a000be6:	dd08      	ble.n	1a000bfa <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a000be8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
1a000bea:	b133      	cbz	r3, 1a000bfa <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a000bec:	f105 0024 	add.w	r0, r5, #36	; 0x24
1a000bf0:	f001 f8fc 	bl	1a001dec <xTaskRemoveFromEventList>
1a000bf4:	2800      	cmp	r0, #0
1a000bf6:	d0f3      	beq.n	1a000be0 <prvUnlockQueue+0x14>
1a000bf8:	e7f0      	b.n	1a000bdc <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
1a000bfa:	23ff      	movs	r3, #255	; 0xff
1a000bfc:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
1a000c00:	f001 fd6a 	bl	1a0026d8 <vPortExitCritical>
	taskENTER_CRITICAL();
1a000c04:	f001 fd46 	bl	1a002694 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
1a000c08:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
1a000c0c:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a000c0e:	e003      	b.n	1a000c18 <prvUnlockQueue+0x4c>
					vTaskMissedYield();
1a000c10:	f001 f980 	bl	1a001f14 <vTaskMissedYield>
				--cRxLock;
1a000c14:	3c01      	subs	r4, #1
1a000c16:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a000c18:	2c00      	cmp	r4, #0
1a000c1a:	dd08      	ble.n	1a000c2e <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a000c1c:	692b      	ldr	r3, [r5, #16]
1a000c1e:	b133      	cbz	r3, 1a000c2e <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a000c20:	f105 0010 	add.w	r0, r5, #16
1a000c24:	f001 f8e2 	bl	1a001dec <xTaskRemoveFromEventList>
1a000c28:	2800      	cmp	r0, #0
1a000c2a:	d0f3      	beq.n	1a000c14 <prvUnlockQueue+0x48>
1a000c2c:	e7f0      	b.n	1a000c10 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
1a000c2e:	23ff      	movs	r3, #255	; 0xff
1a000c30:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
1a000c34:	f001 fd50 	bl	1a0026d8 <vPortExitCritical>
}
1a000c38:	bd38      	pop	{r3, r4, r5, pc}
1a000c3a:	Address 0x000000001a000c3a is out of bounds.


1a000c3c <xQueueGenericReset>:
{
1a000c3c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
1a000c3e:	b1e0      	cbz	r0, 1a000c7a <xQueueGenericReset+0x3e>
1a000c40:	4604      	mov	r4, r0
1a000c42:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
1a000c44:	f001 fd26 	bl	1a002694 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
1a000c48:	6821      	ldr	r1, [r4, #0]
1a000c4a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a000c4c:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a000c4e:	fb03 1002 	mla	r0, r3, r2, r1
1a000c52:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
1a000c54:	2000      	movs	r0, #0
1a000c56:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
1a000c58:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
1a000c5a:	3a01      	subs	r2, #1
1a000c5c:	fb02 1303 	mla	r3, r2, r3, r1
1a000c60:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
1a000c62:	23ff      	movs	r3, #255	; 0xff
1a000c64:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
1a000c68:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
1a000c6c:	b9ed      	cbnz	r5, 1a000caa <xQueueGenericReset+0x6e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a000c6e:	6923      	ldr	r3, [r4, #16]
1a000c70:	b963      	cbnz	r3, 1a000c8c <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
1a000c72:	f001 fd31 	bl	1a0026d8 <vPortExitCritical>
}
1a000c76:	2001      	movs	r0, #1
1a000c78:	bd38      	pop	{r3, r4, r5, pc}
1a000c7a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000c7e:	f383 8811 	msr	BASEPRI, r3
1a000c82:	f3bf 8f6f 	isb	sy
1a000c86:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
1a000c8a:	e7fe      	b.n	1a000c8a <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a000c8c:	f104 0010 	add.w	r0, r4, #16
1a000c90:	f001 f8ac 	bl	1a001dec <xTaskRemoveFromEventList>
1a000c94:	2800      	cmp	r0, #0
1a000c96:	d0ec      	beq.n	1a000c72 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
1a000c98:	4b08      	ldr	r3, [pc, #32]	; (1a000cbc <xQueueGenericReset+0x80>)
1a000c9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000c9e:	601a      	str	r2, [r3, #0]
1a000ca0:	f3bf 8f4f 	dsb	sy
1a000ca4:	f3bf 8f6f 	isb	sy
1a000ca8:	e7e3      	b.n	1a000c72 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
1a000caa:	f104 0010 	add.w	r0, r4, #16
1a000cae:	f000 fb84 	bl	1a0013ba <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
1a000cb2:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000cb6:	f000 fb80 	bl	1a0013ba <vListInitialise>
1a000cba:	e7da      	b.n	1a000c72 <xQueueGenericReset+0x36>
1a000cbc:	e000ed04 	.word	0xe000ed04

1a000cc0 <prvInitialiseNewQueue>:
{
1a000cc0:	b538      	push	{r3, r4, r5, lr}
1a000cc2:	461d      	mov	r5, r3
1a000cc4:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
1a000cc6:	460b      	mov	r3, r1
1a000cc8:	b949      	cbnz	r1, 1a000cde <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
1a000cca:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
1a000ccc:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
1a000cce:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
1a000cd0:	2101      	movs	r1, #1
1a000cd2:	4620      	mov	r0, r4
1a000cd4:	f7ff ffb2 	bl	1a000c3c <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
1a000cd8:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
1a000cdc:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
1a000cde:	6022      	str	r2, [r4, #0]
1a000ce0:	e7f4      	b.n	1a000ccc <prvInitialiseNewQueue+0xc>

1a000ce2 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a000ce2:	b940      	cbnz	r0, 1a000cf6 <xQueueGenericCreateStatic+0x14>
1a000ce4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000ce8:	f383 8811 	msr	BASEPRI, r3
1a000cec:	f3bf 8f6f 	isb	sy
1a000cf0:	f3bf 8f4f 	dsb	sy
1a000cf4:	e7fe      	b.n	1a000cf4 <xQueueGenericCreateStatic+0x12>
	{
1a000cf6:	b510      	push	{r4, lr}
1a000cf8:	b084      	sub	sp, #16
1a000cfa:	4604      	mov	r4, r0
		configASSERT( pxStaticQueue != NULL );
1a000cfc:	b153      	cbz	r3, 1a000d14 <xQueueGenericCreateStatic+0x32>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
1a000cfe:	b192      	cbz	r2, 1a000d26 <xQueueGenericCreateStatic+0x44>
1a000d00:	b989      	cbnz	r1, 1a000d26 <xQueueGenericCreateStatic+0x44>
1a000d02:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000d06:	f383 8811 	msr	BASEPRI, r3
1a000d0a:	f3bf 8f6f 	isb	sy
1a000d0e:	f3bf 8f4f 	dsb	sy
1a000d12:	e7fe      	b.n	1a000d12 <xQueueGenericCreateStatic+0x30>
1a000d14:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000d18:	f383 8811 	msr	BASEPRI, r3
1a000d1c:	f3bf 8f6f 	isb	sy
1a000d20:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
1a000d24:	e7fe      	b.n	1a000d24 <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
1a000d26:	b16a      	cbz	r2, 1a000d44 <xQueueGenericCreateStatic+0x62>
			volatile size_t xSize = sizeof( StaticQueue_t );
1a000d28:	2050      	movs	r0, #80	; 0x50
1a000d2a:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
1a000d2c:	9803      	ldr	r0, [sp, #12]
1a000d2e:	2850      	cmp	r0, #80	; 0x50
1a000d30:	d013      	beq.n	1a000d5a <xQueueGenericCreateStatic+0x78>
1a000d32:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000d36:	f383 8811 	msr	BASEPRI, r3
1a000d3a:	f3bf 8f6f 	isb	sy
1a000d3e:	f3bf 8f4f 	dsb	sy
1a000d42:	e7fe      	b.n	1a000d42 <xQueueGenericCreateStatic+0x60>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
1a000d44:	2900      	cmp	r1, #0
1a000d46:	d0ef      	beq.n	1a000d28 <xQueueGenericCreateStatic+0x46>
1a000d48:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000d4c:	f383 8811 	msr	BASEPRI, r3
1a000d50:	f3bf 8f6f 	isb	sy
1a000d54:	f3bf 8f4f 	dsb	sy
1a000d58:	e7fe      	b.n	1a000d58 <xQueueGenericCreateStatic+0x76>
1a000d5a:	4620      	mov	r0, r4
1a000d5c:	461c      	mov	r4, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
1a000d5e:	2301      	movs	r3, #1
1a000d60:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a000d64:	9400      	str	r4, [sp, #0]
1a000d66:	f89d 3018 	ldrb.w	r3, [sp, #24]
1a000d6a:	f7ff ffa9 	bl	1a000cc0 <prvInitialiseNewQueue>
	}
1a000d6e:	4620      	mov	r0, r4
1a000d70:	b004      	add	sp, #16
1a000d72:	bd10      	pop	{r4, pc}

1a000d74 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a000d74:	b940      	cbnz	r0, 1a000d88 <xQueueGenericCreate+0x14>
1a000d76:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000d7a:	f383 8811 	msr	BASEPRI, r3
1a000d7e:	f3bf 8f6f 	isb	sy
1a000d82:	f3bf 8f4f 	dsb	sy
1a000d86:	e7fe      	b.n	1a000d86 <xQueueGenericCreate+0x12>
	{
1a000d88:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000d8a:	b083      	sub	sp, #12
1a000d8c:	4606      	mov	r6, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
1a000d8e:	b1b1      	cbz	r1, 1a000dbe <xQueueGenericCreate+0x4a>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a000d90:	fb01 f000 	mul.w	r0, r1, r0
1a000d94:	4617      	mov	r7, r2
1a000d96:	460c      	mov	r4, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
1a000d98:	3050      	adds	r0, #80	; 0x50
1a000d9a:	f7ff fddf 	bl	1a00095c <pvPortMalloc>
		if( pxNewQueue != NULL )
1a000d9e:	4605      	mov	r5, r0
1a000da0:	b150      	cbz	r0, 1a000db8 <xQueueGenericCreate+0x44>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
1a000da2:	2300      	movs	r3, #0
1a000da4:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a000da8:	9000      	str	r0, [sp, #0]
1a000daa:	463b      	mov	r3, r7
1a000dac:	f100 0250 	add.w	r2, r0, #80	; 0x50
1a000db0:	4621      	mov	r1, r4
1a000db2:	4630      	mov	r0, r6
1a000db4:	f7ff ff84 	bl	1a000cc0 <prvInitialiseNewQueue>
	}
1a000db8:	4628      	mov	r0, r5
1a000dba:	b003      	add	sp, #12
1a000dbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xQueueSizeInBytes = ( size_t ) 0;
1a000dbe:	2000      	movs	r0, #0
1a000dc0:	e7e8      	b.n	1a000d94 <xQueueGenericCreate+0x20>
1a000dc2:	Address 0x000000001a000dc2 is out of bounds.


1a000dc4 <xQueueGenericSend>:
{
1a000dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000dc6:	b085      	sub	sp, #20
1a000dc8:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
1a000dca:	b178      	cbz	r0, 1a000dec <xQueueGenericSend+0x28>
1a000dcc:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a000dce:	b1b1      	cbz	r1, 1a000dfe <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a000dd0:	2b02      	cmp	r3, #2
1a000dd2:	d120      	bne.n	1a000e16 <xQueueGenericSend+0x52>
1a000dd4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a000dd6:	2a01      	cmp	r2, #1
1a000dd8:	d01d      	beq.n	1a000e16 <xQueueGenericSend+0x52>
1a000dda:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000dde:	f383 8811 	msr	BASEPRI, r3
1a000de2:	f3bf 8f6f 	isb	sy
1a000de6:	f3bf 8f4f 	dsb	sy
1a000dea:	e7fe      	b.n	1a000dea <xQueueGenericSend+0x26>
1a000dec:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000df0:	f383 8811 	msr	BASEPRI, r3
1a000df4:	f3bf 8f6f 	isb	sy
1a000df8:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
1a000dfc:	e7fe      	b.n	1a000dfc <xQueueGenericSend+0x38>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a000dfe:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a000e00:	2a00      	cmp	r2, #0
1a000e02:	d0e5      	beq.n	1a000dd0 <xQueueGenericSend+0xc>
1a000e04:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000e08:	f383 8811 	msr	BASEPRI, r3
1a000e0c:	f3bf 8f6f 	isb	sy
1a000e10:	f3bf 8f4f 	dsb	sy
1a000e14:	e7fe      	b.n	1a000e14 <xQueueGenericSend+0x50>
1a000e16:	461e      	mov	r6, r3
1a000e18:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a000e1a:	f001 f881 	bl	1a001f20 <xTaskGetSchedulerState>
1a000e1e:	b950      	cbnz	r0, 1a000e36 <xQueueGenericSend+0x72>
1a000e20:	9b01      	ldr	r3, [sp, #4]
1a000e22:	b153      	cbz	r3, 1a000e3a <xQueueGenericSend+0x76>
1a000e24:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000e28:	f383 8811 	msr	BASEPRI, r3
1a000e2c:	f3bf 8f6f 	isb	sy
1a000e30:	f3bf 8f4f 	dsb	sy
1a000e34:	e7fe      	b.n	1a000e34 <xQueueGenericSend+0x70>
1a000e36:	2500      	movs	r5, #0
1a000e38:	e03b      	b.n	1a000eb2 <xQueueGenericSend+0xee>
1a000e3a:	2500      	movs	r5, #0
1a000e3c:	e039      	b.n	1a000eb2 <xQueueGenericSend+0xee>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a000e3e:	4632      	mov	r2, r6
1a000e40:	4639      	mov	r1, r7
1a000e42:	4620      	mov	r0, r4
1a000e44:	f7ff fe75 	bl	1a000b32 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a000e48:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a000e4a:	b96b      	cbnz	r3, 1a000e68 <xQueueGenericSend+0xa4>
					else if( xYieldRequired != pdFALSE )
1a000e4c:	b138      	cbz	r0, 1a000e5e <xQueueGenericSend+0x9a>
						queueYIELD_IF_USING_PREEMPTION();
1a000e4e:	4b3c      	ldr	r3, [pc, #240]	; (1a000f40 <xQueueGenericSend+0x17c>)
1a000e50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000e54:	601a      	str	r2, [r3, #0]
1a000e56:	f3bf 8f4f 	dsb	sy
1a000e5a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
1a000e5e:	f001 fc3b 	bl	1a0026d8 <vPortExitCritical>
				return pdPASS;
1a000e62:	2001      	movs	r0, #1
}
1a000e64:	b005      	add	sp, #20
1a000e66:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a000e68:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000e6c:	f000 ffbe 	bl	1a001dec <xTaskRemoveFromEventList>
1a000e70:	2800      	cmp	r0, #0
1a000e72:	d0f4      	beq.n	1a000e5e <xQueueGenericSend+0x9a>
							queueYIELD_IF_USING_PREEMPTION();
1a000e74:	4b32      	ldr	r3, [pc, #200]	; (1a000f40 <xQueueGenericSend+0x17c>)
1a000e76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000e7a:	601a      	str	r2, [r3, #0]
1a000e7c:	f3bf 8f4f 	dsb	sy
1a000e80:	f3bf 8f6f 	isb	sy
1a000e84:	e7eb      	b.n	1a000e5e <xQueueGenericSend+0x9a>
					taskEXIT_CRITICAL();
1a000e86:	f001 fc27 	bl	1a0026d8 <vPortExitCritical>
					return errQUEUE_FULL;
1a000e8a:	2000      	movs	r0, #0
1a000e8c:	e7ea      	b.n	1a000e64 <xQueueGenericSend+0xa0>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a000e8e:	a802      	add	r0, sp, #8
1a000e90:	f000 fff2 	bl	1a001e78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a000e94:	2501      	movs	r5, #1
1a000e96:	e019      	b.n	1a000ecc <xQueueGenericSend+0x108>
		prvLockQueue( pxQueue );
1a000e98:	2300      	movs	r3, #0
1a000e9a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a000e9e:	e021      	b.n	1a000ee4 <xQueueGenericSend+0x120>
1a000ea0:	2300      	movs	r3, #0
1a000ea2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a000ea6:	e023      	b.n	1a000ef0 <xQueueGenericSend+0x12c>
				prvUnlockQueue( pxQueue );
1a000ea8:	4620      	mov	r0, r4
1a000eaa:	f7ff fe8f 	bl	1a000bcc <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a000eae:	f000 fe5f 	bl	1a001b70 <xTaskResumeAll>
		taskENTER_CRITICAL();
1a000eb2:	f001 fbef 	bl	1a002694 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a000eb6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a000eb8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a000eba:	429a      	cmp	r2, r3
1a000ebc:	d3bf      	bcc.n	1a000e3e <xQueueGenericSend+0x7a>
1a000ebe:	2e02      	cmp	r6, #2
1a000ec0:	d0bd      	beq.n	1a000e3e <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
1a000ec2:	9b01      	ldr	r3, [sp, #4]
1a000ec4:	2b00      	cmp	r3, #0
1a000ec6:	d0de      	beq.n	1a000e86 <xQueueGenericSend+0xc2>
				else if( xEntryTimeSet == pdFALSE )
1a000ec8:	2d00      	cmp	r5, #0
1a000eca:	d0e0      	beq.n	1a000e8e <xQueueGenericSend+0xca>
		taskEXIT_CRITICAL();
1a000ecc:	f001 fc04 	bl	1a0026d8 <vPortExitCritical>
		vTaskSuspendAll();
1a000ed0:	f000 fdb4 	bl	1a001a3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a000ed4:	f001 fbde 	bl	1a002694 <vPortEnterCritical>
1a000ed8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a000edc:	b25b      	sxtb	r3, r3
1a000ede:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000ee2:	d0d9      	beq.n	1a000e98 <xQueueGenericSend+0xd4>
1a000ee4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a000ee8:	b25b      	sxtb	r3, r3
1a000eea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000eee:	d0d7      	beq.n	1a000ea0 <xQueueGenericSend+0xdc>
1a000ef0:	f001 fbf2 	bl	1a0026d8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a000ef4:	a901      	add	r1, sp, #4
1a000ef6:	a802      	add	r0, sp, #8
1a000ef8:	f000 ffca 	bl	1a001e90 <xTaskCheckForTimeOut>
1a000efc:	b9c8      	cbnz	r0, 1a000f32 <xQueueGenericSend+0x16e>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
1a000efe:	4620      	mov	r0, r4
1a000f00:	f7ff fdfb 	bl	1a000afa <prvIsQueueFull>
1a000f04:	2800      	cmp	r0, #0
1a000f06:	d0cf      	beq.n	1a000ea8 <xQueueGenericSend+0xe4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
1a000f08:	9901      	ldr	r1, [sp, #4]
1a000f0a:	f104 0010 	add.w	r0, r4, #16
1a000f0e:	f000 ff39 	bl	1a001d84 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a000f12:	4620      	mov	r0, r4
1a000f14:	f7ff fe5a 	bl	1a000bcc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a000f18:	f000 fe2a 	bl	1a001b70 <xTaskResumeAll>
1a000f1c:	2800      	cmp	r0, #0
1a000f1e:	d1c8      	bne.n	1a000eb2 <xQueueGenericSend+0xee>
					portYIELD_WITHIN_API();
1a000f20:	4b07      	ldr	r3, [pc, #28]	; (1a000f40 <xQueueGenericSend+0x17c>)
1a000f22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000f26:	601a      	str	r2, [r3, #0]
1a000f28:	f3bf 8f4f 	dsb	sy
1a000f2c:	f3bf 8f6f 	isb	sy
1a000f30:	e7bf      	b.n	1a000eb2 <xQueueGenericSend+0xee>
			prvUnlockQueue( pxQueue );
1a000f32:	4620      	mov	r0, r4
1a000f34:	f7ff fe4a 	bl	1a000bcc <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a000f38:	f000 fe1a 	bl	1a001b70 <xTaskResumeAll>
			return errQUEUE_FULL;
1a000f3c:	2000      	movs	r0, #0
1a000f3e:	e791      	b.n	1a000e64 <xQueueGenericSend+0xa0>
1a000f40:	e000ed04 	.word	0xe000ed04

1a000f44 <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
1a000f44:	b148      	cbz	r0, 1a000f5a <prvInitialiseMutex+0x16>
	{
1a000f46:	b508      	push	{r3, lr}
			pxNewQueue->pxMutexHolder = NULL;
1a000f48:	2100      	movs	r1, #0
1a000f4a:	6041      	str	r1, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
1a000f4c:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
1a000f4e:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
1a000f50:	460b      	mov	r3, r1
1a000f52:	460a      	mov	r2, r1
1a000f54:	f7ff ff36 	bl	1a000dc4 <xQueueGenericSend>
	}
1a000f58:	bd08      	pop	{r3, pc}
1a000f5a:	4770      	bx	lr

1a000f5c <xQueueCreateMutex>:
	{
1a000f5c:	b510      	push	{r4, lr}
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
1a000f5e:	4602      	mov	r2, r0
1a000f60:	2100      	movs	r1, #0
1a000f62:	2001      	movs	r0, #1
1a000f64:	f7ff ff06 	bl	1a000d74 <xQueueGenericCreate>
1a000f68:	4604      	mov	r4, r0
		prvInitialiseMutex( pxNewQueue );
1a000f6a:	f7ff ffeb 	bl	1a000f44 <prvInitialiseMutex>
	}
1a000f6e:	4620      	mov	r0, r4
1a000f70:	bd10      	pop	{r4, pc}

1a000f72 <xQueueGenericSendFromISR>:
{
1a000f72:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
1a000f76:	b178      	cbz	r0, 1a000f98 <xQueueGenericSendFromISR+0x26>
1a000f78:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a000f7a:	b1b1      	cbz	r1, 1a000faa <xQueueGenericSendFromISR+0x38>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a000f7c:	2b02      	cmp	r3, #2
1a000f7e:	d120      	bne.n	1a000fc2 <xQueueGenericSendFromISR+0x50>
1a000f80:	6be0      	ldr	r0, [r4, #60]	; 0x3c
1a000f82:	2801      	cmp	r0, #1
1a000f84:	d01d      	beq.n	1a000fc2 <xQueueGenericSendFromISR+0x50>
1a000f86:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000f8a:	f383 8811 	msr	BASEPRI, r3
1a000f8e:	f3bf 8f6f 	isb	sy
1a000f92:	f3bf 8f4f 	dsb	sy
1a000f96:	e7fe      	b.n	1a000f96 <xQueueGenericSendFromISR+0x24>
1a000f98:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000f9c:	f383 8811 	msr	BASEPRI, r3
1a000fa0:	f3bf 8f6f 	isb	sy
1a000fa4:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
1a000fa8:	e7fe      	b.n	1a000fa8 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a000faa:	6c00      	ldr	r0, [r0, #64]	; 0x40
1a000fac:	2800      	cmp	r0, #0
1a000fae:	d0e5      	beq.n	1a000f7c <xQueueGenericSendFromISR+0xa>
1a000fb0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000fb4:	f383 8811 	msr	BASEPRI, r3
1a000fb8:	f3bf 8f6f 	isb	sy
1a000fbc:	f3bf 8f4f 	dsb	sy
1a000fc0:	e7fe      	b.n	1a000fc0 <xQueueGenericSendFromISR+0x4e>
1a000fc2:	461f      	mov	r7, r3
1a000fc4:	4690      	mov	r8, r2
1a000fc6:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1a000fc8:	f001 fc8e 	bl	1a0028e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
1a000fcc:	f3ef 8611 	mrs	r6, BASEPRI
1a000fd0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000fd4:	f383 8811 	msr	BASEPRI, r3
1a000fd8:	f3bf 8f6f 	isb	sy
1a000fdc:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a000fe0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a000fe2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a000fe4:	429a      	cmp	r2, r3
1a000fe6:	d306      	bcc.n	1a000ff6 <xQueueGenericSendFromISR+0x84>
1a000fe8:	2f02      	cmp	r7, #2
1a000fea:	d004      	beq.n	1a000ff6 <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
1a000fec:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
1a000fee:	f386 8811 	msr	BASEPRI, r6
}
1a000ff2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
1a000ff6:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
1a000ffa:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a000ffc:	463a      	mov	r2, r7
1a000ffe:	4649      	mov	r1, r9
1a001000:	4620      	mov	r0, r4
1a001002:	f7ff fd96 	bl	1a000b32 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
1a001006:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a00100a:	d005      	beq.n	1a001018 <xQueueGenericSendFromISR+0xa6>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1a00100c:	1c6b      	adds	r3, r5, #1
1a00100e:	b25b      	sxtb	r3, r3
1a001010:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
1a001014:	2001      	movs	r0, #1
1a001016:	e7ea      	b.n	1a000fee <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a001018:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a00101a:	b90b      	cbnz	r3, 1a001020 <xQueueGenericSendFromISR+0xae>
			xReturn = pdPASS;
1a00101c:	2001      	movs	r0, #1
1a00101e:	e7e6      	b.n	1a000fee <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a001020:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a001024:	f000 fee2 	bl	1a001dec <xTaskRemoveFromEventList>
1a001028:	b130      	cbz	r0, 1a001038 <xQueueGenericSendFromISR+0xc6>
							if( pxHigherPriorityTaskWoken != NULL )
1a00102a:	f1b8 0f00 	cmp.w	r8, #0
1a00102e:	d005      	beq.n	1a00103c <xQueueGenericSendFromISR+0xca>
								*pxHigherPriorityTaskWoken = pdTRUE;
1a001030:	2001      	movs	r0, #1
1a001032:	f8c8 0000 	str.w	r0, [r8]
1a001036:	e7da      	b.n	1a000fee <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
1a001038:	2001      	movs	r0, #1
1a00103a:	e7d8      	b.n	1a000fee <xQueueGenericSendFromISR+0x7c>
1a00103c:	2001      	movs	r0, #1
1a00103e:	e7d6      	b.n	1a000fee <xQueueGenericSendFromISR+0x7c>

1a001040 <xQueueReceive>:
{
1a001040:	b5f0      	push	{r4, r5, r6, r7, lr}
1a001042:	b085      	sub	sp, #20
1a001044:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
1a001046:	b180      	cbz	r0, 1a00106a <xQueueReceive+0x2a>
1a001048:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a00104a:	b1b9      	cbz	r1, 1a00107c <xQueueReceive+0x3c>
1a00104c:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a00104e:	f000 ff67 	bl	1a001f20 <xTaskGetSchedulerState>
1a001052:	b9f8      	cbnz	r0, 1a001094 <xQueueReceive+0x54>
1a001054:	9b01      	ldr	r3, [sp, #4]
1a001056:	b1fb      	cbz	r3, 1a001098 <xQueueReceive+0x58>
	__asm volatile
1a001058:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00105c:	f383 8811 	msr	BASEPRI, r3
1a001060:	f3bf 8f6f 	isb	sy
1a001064:	f3bf 8f4f 	dsb	sy
1a001068:	e7fe      	b.n	1a001068 <xQueueReceive+0x28>
1a00106a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00106e:	f383 8811 	msr	BASEPRI, r3
1a001072:	f3bf 8f6f 	isb	sy
1a001076:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
1a00107a:	e7fe      	b.n	1a00107a <xQueueReceive+0x3a>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a00107c:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a00107e:	2b00      	cmp	r3, #0
1a001080:	d0e4      	beq.n	1a00104c <xQueueReceive+0xc>
1a001082:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001086:	f383 8811 	msr	BASEPRI, r3
1a00108a:	f3bf 8f6f 	isb	sy
1a00108e:	f3bf 8f4f 	dsb	sy
1a001092:	e7fe      	b.n	1a001092 <xQueueReceive+0x52>
1a001094:	2600      	movs	r6, #0
1a001096:	e03e      	b.n	1a001116 <xQueueReceive+0xd6>
1a001098:	2600      	movs	r6, #0
1a00109a:	e03c      	b.n	1a001116 <xQueueReceive+0xd6>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
1a00109c:	4639      	mov	r1, r7
1a00109e:	4620      	mov	r0, r4
1a0010a0:	f7ff fd82 	bl	1a000ba8 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1a0010a4:	3d01      	subs	r5, #1
1a0010a6:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a0010a8:	6923      	ldr	r3, [r4, #16]
1a0010aa:	b923      	cbnz	r3, 1a0010b6 <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
1a0010ac:	f001 fb14 	bl	1a0026d8 <vPortExitCritical>
				return pdPASS;
1a0010b0:	2001      	movs	r0, #1
}
1a0010b2:	b005      	add	sp, #20
1a0010b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a0010b6:	f104 0010 	add.w	r0, r4, #16
1a0010ba:	f000 fe97 	bl	1a001dec <xTaskRemoveFromEventList>
1a0010be:	2800      	cmp	r0, #0
1a0010c0:	d0f4      	beq.n	1a0010ac <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
1a0010c2:	4b35      	ldr	r3, [pc, #212]	; (1a001198 <xQueueReceive+0x158>)
1a0010c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0010c8:	601a      	str	r2, [r3, #0]
1a0010ca:	f3bf 8f4f 	dsb	sy
1a0010ce:	f3bf 8f6f 	isb	sy
1a0010d2:	e7eb      	b.n	1a0010ac <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
1a0010d4:	f001 fb00 	bl	1a0026d8 <vPortExitCritical>
					return errQUEUE_EMPTY;
1a0010d8:	2000      	movs	r0, #0
1a0010da:	e7ea      	b.n	1a0010b2 <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a0010dc:	a802      	add	r0, sp, #8
1a0010de:	f000 fecb 	bl	1a001e78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a0010e2:	2601      	movs	r6, #1
1a0010e4:	e021      	b.n	1a00112a <xQueueReceive+0xea>
		prvLockQueue( pxQueue );
1a0010e6:	2300      	movs	r3, #0
1a0010e8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a0010ec:	e029      	b.n	1a001142 <xQueueReceive+0x102>
1a0010ee:	2300      	movs	r3, #0
1a0010f0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a0010f4:	e02b      	b.n	1a00114e <xQueueReceive+0x10e>
				prvUnlockQueue( pxQueue );
1a0010f6:	4620      	mov	r0, r4
1a0010f8:	f7ff fd68 	bl	1a000bcc <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a0010fc:	f000 fd38 	bl	1a001b70 <xTaskResumeAll>
1a001100:	e009      	b.n	1a001116 <xQueueReceive+0xd6>
			prvUnlockQueue( pxQueue );
1a001102:	4620      	mov	r0, r4
1a001104:	f7ff fd62 	bl	1a000bcc <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a001108:	f000 fd32 	bl	1a001b70 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a00110c:	4620      	mov	r0, r4
1a00110e:	f7ff fd03 	bl	1a000b18 <prvIsQueueEmpty>
1a001112:	2800      	cmp	r0, #0
1a001114:	d13d      	bne.n	1a001192 <xQueueReceive+0x152>
		taskENTER_CRITICAL();
1a001116:	f001 fabd 	bl	1a002694 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a00111a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a00111c:	2d00      	cmp	r5, #0
1a00111e:	d1bd      	bne.n	1a00109c <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
1a001120:	9b01      	ldr	r3, [sp, #4]
1a001122:	2b00      	cmp	r3, #0
1a001124:	d0d6      	beq.n	1a0010d4 <xQueueReceive+0x94>
				else if( xEntryTimeSet == pdFALSE )
1a001126:	2e00      	cmp	r6, #0
1a001128:	d0d8      	beq.n	1a0010dc <xQueueReceive+0x9c>
		taskEXIT_CRITICAL();
1a00112a:	f001 fad5 	bl	1a0026d8 <vPortExitCritical>
		vTaskSuspendAll();
1a00112e:	f000 fc85 	bl	1a001a3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a001132:	f001 faaf 	bl	1a002694 <vPortEnterCritical>
1a001136:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a00113a:	b25b      	sxtb	r3, r3
1a00113c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001140:	d0d1      	beq.n	1a0010e6 <xQueueReceive+0xa6>
1a001142:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a001146:	b25b      	sxtb	r3, r3
1a001148:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a00114c:	d0cf      	beq.n	1a0010ee <xQueueReceive+0xae>
1a00114e:	f001 fac3 	bl	1a0026d8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a001152:	a901      	add	r1, sp, #4
1a001154:	a802      	add	r0, sp, #8
1a001156:	f000 fe9b 	bl	1a001e90 <xTaskCheckForTimeOut>
1a00115a:	2800      	cmp	r0, #0
1a00115c:	d1d1      	bne.n	1a001102 <xQueueReceive+0xc2>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a00115e:	4620      	mov	r0, r4
1a001160:	f7ff fcda 	bl	1a000b18 <prvIsQueueEmpty>
1a001164:	2800      	cmp	r0, #0
1a001166:	d0c6      	beq.n	1a0010f6 <xQueueReceive+0xb6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1a001168:	9901      	ldr	r1, [sp, #4]
1a00116a:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a00116e:	f000 fe09 	bl	1a001d84 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a001172:	4620      	mov	r0, r4
1a001174:	f7ff fd2a 	bl	1a000bcc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a001178:	f000 fcfa 	bl	1a001b70 <xTaskResumeAll>
1a00117c:	2800      	cmp	r0, #0
1a00117e:	d1ca      	bne.n	1a001116 <xQueueReceive+0xd6>
					portYIELD_WITHIN_API();
1a001180:	4b05      	ldr	r3, [pc, #20]	; (1a001198 <xQueueReceive+0x158>)
1a001182:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001186:	601a      	str	r2, [r3, #0]
1a001188:	f3bf 8f4f 	dsb	sy
1a00118c:	f3bf 8f6f 	isb	sy
1a001190:	e7c1      	b.n	1a001116 <xQueueReceive+0xd6>
				return errQUEUE_EMPTY;
1a001192:	2000      	movs	r0, #0
1a001194:	e78d      	b.n	1a0010b2 <xQueueReceive+0x72>
1a001196:	bf00      	nop
1a001198:	e000ed04 	.word	0xe000ed04

1a00119c <xQueueSemaphoreTake>:
{
1a00119c:	b570      	push	{r4, r5, r6, lr}
1a00119e:	b084      	sub	sp, #16
1a0011a0:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
1a0011a2:	b158      	cbz	r0, 1a0011bc <xQueueSemaphoreTake+0x20>
1a0011a4:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
1a0011a6:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a0011a8:	b18b      	cbz	r3, 1a0011ce <xQueueSemaphoreTake+0x32>
1a0011aa:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0011ae:	f383 8811 	msr	BASEPRI, r3
1a0011b2:	f3bf 8f6f 	isb	sy
1a0011b6:	f3bf 8f4f 	dsb	sy
1a0011ba:	e7fe      	b.n	1a0011ba <xQueueSemaphoreTake+0x1e>
1a0011bc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0011c0:	f383 8811 	msr	BASEPRI, r3
1a0011c4:	f3bf 8f6f 	isb	sy
1a0011c8:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
1a0011cc:	e7fe      	b.n	1a0011cc <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a0011ce:	f000 fea7 	bl	1a001f20 <xTaskGetSchedulerState>
1a0011d2:	b950      	cbnz	r0, 1a0011ea <xQueueSemaphoreTake+0x4e>
1a0011d4:	9b01      	ldr	r3, [sp, #4]
1a0011d6:	b15b      	cbz	r3, 1a0011f0 <xQueueSemaphoreTake+0x54>
1a0011d8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0011dc:	f383 8811 	msr	BASEPRI, r3
1a0011e0:	f3bf 8f6f 	isb	sy
1a0011e4:	f3bf 8f4f 	dsb	sy
1a0011e8:	e7fe      	b.n	1a0011e8 <xQueueSemaphoreTake+0x4c>
1a0011ea:	2500      	movs	r5, #0
1a0011ec:	462e      	mov	r6, r5
1a0011ee:	e054      	b.n	1a00129a <xQueueSemaphoreTake+0xfe>
1a0011f0:	2500      	movs	r5, #0
1a0011f2:	462e      	mov	r6, r5
1a0011f4:	e051      	b.n	1a00129a <xQueueSemaphoreTake+0xfe>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
1a0011f6:	3b01      	subs	r3, #1
1a0011f8:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a0011fa:	6823      	ldr	r3, [r4, #0]
1a0011fc:	b13b      	cbz	r3, 1a00120e <xQueueSemaphoreTake+0x72>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a0011fe:	6923      	ldr	r3, [r4, #16]
1a001200:	b94b      	cbnz	r3, 1a001216 <xQueueSemaphoreTake+0x7a>
				taskEXIT_CRITICAL();
1a001202:	f001 fa69 	bl	1a0026d8 <vPortExitCritical>
				return pdPASS;
1a001206:	2501      	movs	r5, #1
}
1a001208:	4628      	mov	r0, r5
1a00120a:	b004      	add	sp, #16
1a00120c:	bd70      	pop	{r4, r5, r6, pc}
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
1a00120e:	f000 ffaf 	bl	1a002170 <pvTaskIncrementMutexHeldCount>
1a001212:	6060      	str	r0, [r4, #4]
1a001214:	e7f3      	b.n	1a0011fe <xQueueSemaphoreTake+0x62>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a001216:	f104 0010 	add.w	r0, r4, #16
1a00121a:	f000 fde7 	bl	1a001dec <xTaskRemoveFromEventList>
1a00121e:	2800      	cmp	r0, #0
1a001220:	d0ef      	beq.n	1a001202 <xQueueSemaphoreTake+0x66>
						queueYIELD_IF_USING_PREEMPTION();
1a001222:	4b46      	ldr	r3, [pc, #280]	; (1a00133c <xQueueSemaphoreTake+0x1a0>)
1a001224:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001228:	601a      	str	r2, [r3, #0]
1a00122a:	f3bf 8f4f 	dsb	sy
1a00122e:	f3bf 8f6f 	isb	sy
1a001232:	e7e6      	b.n	1a001202 <xQueueSemaphoreTake+0x66>
						configASSERT( xInheritanceOccurred == pdFALSE );
1a001234:	b145      	cbz	r5, 1a001248 <xQueueSemaphoreTake+0xac>
1a001236:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00123a:	f383 8811 	msr	BASEPRI, r3
1a00123e:	f3bf 8f6f 	isb	sy
1a001242:	f3bf 8f4f 	dsb	sy
1a001246:	e7fe      	b.n	1a001246 <xQueueSemaphoreTake+0xaa>
					taskEXIT_CRITICAL();
1a001248:	f001 fa46 	bl	1a0026d8 <vPortExitCritical>
					return errQUEUE_EMPTY;
1a00124c:	e7dc      	b.n	1a001208 <xQueueSemaphoreTake+0x6c>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a00124e:	a802      	add	r0, sp, #8
1a001250:	f000 fe12 	bl	1a001e78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a001254:	2601      	movs	r6, #1
1a001256:	e02a      	b.n	1a0012ae <xQueueSemaphoreTake+0x112>
		prvLockQueue( pxQueue );
1a001258:	2300      	movs	r3, #0
1a00125a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a00125e:	e032      	b.n	1a0012c6 <xQueueSemaphoreTake+0x12a>
1a001260:	2300      	movs	r3, #0
1a001262:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a001266:	e034      	b.n	1a0012d2 <xQueueSemaphoreTake+0x136>
						taskENTER_CRITICAL();
1a001268:	f001 fa14 	bl	1a002694 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
1a00126c:	6860      	ldr	r0, [r4, #4]
1a00126e:	f000 fe67 	bl	1a001f40 <xTaskPriorityInherit>
1a001272:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
1a001274:	f001 fa30 	bl	1a0026d8 <vPortExitCritical>
1a001278:	e03b      	b.n	1a0012f2 <xQueueSemaphoreTake+0x156>
				prvUnlockQueue( pxQueue );
1a00127a:	4620      	mov	r0, r4
1a00127c:	f7ff fca6 	bl	1a000bcc <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a001280:	f000 fc76 	bl	1a001b70 <xTaskResumeAll>
1a001284:	e009      	b.n	1a00129a <xQueueSemaphoreTake+0xfe>
			prvUnlockQueue( pxQueue );
1a001286:	4620      	mov	r0, r4
1a001288:	f7ff fca0 	bl	1a000bcc <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a00128c:	f000 fc70 	bl	1a001b70 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a001290:	4620      	mov	r0, r4
1a001292:	f7ff fc41 	bl	1a000b18 <prvIsQueueEmpty>
1a001296:	2800      	cmp	r0, #0
1a001298:	d140      	bne.n	1a00131c <xQueueSemaphoreTake+0x180>
		taskENTER_CRITICAL();
1a00129a:	f001 f9fb 	bl	1a002694 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
1a00129e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
1a0012a0:	2b00      	cmp	r3, #0
1a0012a2:	d1a8      	bne.n	1a0011f6 <xQueueSemaphoreTake+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
1a0012a4:	9b01      	ldr	r3, [sp, #4]
1a0012a6:	2b00      	cmp	r3, #0
1a0012a8:	d0c4      	beq.n	1a001234 <xQueueSemaphoreTake+0x98>
				else if( xEntryTimeSet == pdFALSE )
1a0012aa:	2e00      	cmp	r6, #0
1a0012ac:	d0cf      	beq.n	1a00124e <xQueueSemaphoreTake+0xb2>
		taskEXIT_CRITICAL();
1a0012ae:	f001 fa13 	bl	1a0026d8 <vPortExitCritical>
		vTaskSuspendAll();
1a0012b2:	f000 fbc3 	bl	1a001a3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a0012b6:	f001 f9ed 	bl	1a002694 <vPortEnterCritical>
1a0012ba:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a0012be:	b25b      	sxtb	r3, r3
1a0012c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0012c4:	d0c8      	beq.n	1a001258 <xQueueSemaphoreTake+0xbc>
1a0012c6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a0012ca:	b25b      	sxtb	r3, r3
1a0012cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0012d0:	d0c6      	beq.n	1a001260 <xQueueSemaphoreTake+0xc4>
1a0012d2:	f001 fa01 	bl	1a0026d8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a0012d6:	a901      	add	r1, sp, #4
1a0012d8:	a802      	add	r0, sp, #8
1a0012da:	f000 fdd9 	bl	1a001e90 <xTaskCheckForTimeOut>
1a0012de:	2800      	cmp	r0, #0
1a0012e0:	d1d1      	bne.n	1a001286 <xQueueSemaphoreTake+0xea>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a0012e2:	4620      	mov	r0, r4
1a0012e4:	f7ff fc18 	bl	1a000b18 <prvIsQueueEmpty>
1a0012e8:	2800      	cmp	r0, #0
1a0012ea:	d0c6      	beq.n	1a00127a <xQueueSemaphoreTake+0xde>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a0012ec:	6823      	ldr	r3, [r4, #0]
1a0012ee:	2b00      	cmp	r3, #0
1a0012f0:	d0ba      	beq.n	1a001268 <xQueueSemaphoreTake+0xcc>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1a0012f2:	9901      	ldr	r1, [sp, #4]
1a0012f4:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a0012f8:	f000 fd44 	bl	1a001d84 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a0012fc:	4620      	mov	r0, r4
1a0012fe:	f7ff fc65 	bl	1a000bcc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a001302:	f000 fc35 	bl	1a001b70 <xTaskResumeAll>
1a001306:	2800      	cmp	r0, #0
1a001308:	d1c7      	bne.n	1a00129a <xQueueSemaphoreTake+0xfe>
					portYIELD_WITHIN_API();
1a00130a:	4b0c      	ldr	r3, [pc, #48]	; (1a00133c <xQueueSemaphoreTake+0x1a0>)
1a00130c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001310:	601a      	str	r2, [r3, #0]
1a001312:	f3bf 8f4f 	dsb	sy
1a001316:	f3bf 8f6f 	isb	sy
1a00131a:	e7be      	b.n	1a00129a <xQueueSemaphoreTake+0xfe>
					if( xInheritanceOccurred != pdFALSE )
1a00131c:	b90d      	cbnz	r5, 1a001322 <xQueueSemaphoreTake+0x186>
				return errQUEUE_EMPTY;
1a00131e:	2500      	movs	r5, #0
1a001320:	e772      	b.n	1a001208 <xQueueSemaphoreTake+0x6c>
						taskENTER_CRITICAL();
1a001322:	f001 f9b7 	bl	1a002694 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
1a001326:	4620      	mov	r0, r4
1a001328:	f7ff fbde 	bl	1a000ae8 <prvGetDisinheritPriorityAfterTimeout>
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
1a00132c:	4601      	mov	r1, r0
1a00132e:	6860      	ldr	r0, [r4, #4]
1a001330:	f000 febe 	bl	1a0020b0 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
1a001334:	f001 f9d0 	bl	1a0026d8 <vPortExitCritical>
1a001338:	e7f1      	b.n	1a00131e <xQueueSemaphoreTake+0x182>
1a00133a:	bf00      	nop
1a00133c:	e000ed04 	.word	0xe000ed04

1a001340 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a001340:	2300      	movs	r3, #0
1a001342:	2b07      	cmp	r3, #7
1a001344:	d80c      	bhi.n	1a001360 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
1a001346:	4a07      	ldr	r2, [pc, #28]	; (1a001364 <vQueueAddToRegistry+0x24>)
1a001348:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
1a00134c:	b10a      	cbz	r2, 1a001352 <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a00134e:	3301      	adds	r3, #1
1a001350:	e7f7      	b.n	1a001342 <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
1a001352:	4a04      	ldr	r2, [pc, #16]	; (1a001364 <vQueueAddToRegistry+0x24>)
1a001354:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
1a001358:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
1a00135c:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
1a00135e:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
1a001360:	4770      	bx	lr
1a001362:	bf00      	nop
1a001364:	10002b64 	.word	0x10002b64

1a001368 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
1a001368:	b570      	push	{r4, r5, r6, lr}
1a00136a:	4604      	mov	r4, r0
1a00136c:	460d      	mov	r5, r1
1a00136e:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
1a001370:	f001 f990 	bl	1a002694 <vPortEnterCritical>
1a001374:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a001378:	b25b      	sxtb	r3, r3
1a00137a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a00137e:	d00d      	beq.n	1a00139c <vQueueWaitForMessageRestricted+0x34>
1a001380:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a001384:	b25b      	sxtb	r3, r3
1a001386:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a00138a:	d00b      	beq.n	1a0013a4 <vQueueWaitForMessageRestricted+0x3c>
1a00138c:	f001 f9a4 	bl	1a0026d8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
1a001390:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a001392:	b15b      	cbz	r3, 1a0013ac <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
1a001394:	4620      	mov	r0, r4
1a001396:	f7ff fc19 	bl	1a000bcc <prvUnlockQueue>
	}
1a00139a:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
1a00139c:	2300      	movs	r3, #0
1a00139e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a0013a2:	e7ed      	b.n	1a001380 <vQueueWaitForMessageRestricted+0x18>
1a0013a4:	2300      	movs	r3, #0
1a0013a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a0013aa:	e7ef      	b.n	1a00138c <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
1a0013ac:	4632      	mov	r2, r6
1a0013ae:	4629      	mov	r1, r5
1a0013b0:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a0013b4:	f000 fcfe 	bl	1a001db4 <vTaskPlaceOnEventListRestricted>
1a0013b8:	e7ec      	b.n	1a001394 <vQueueWaitForMessageRestricted+0x2c>

1a0013ba <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a0013ba:	f100 0308 	add.w	r3, r0, #8
1a0013be:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
1a0013c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0013c4:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a0013c6:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a0013c8:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
1a0013ca:	2300      	movs	r3, #0
1a0013cc:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
1a0013ce:	4770      	bx	lr

1a0013d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
1a0013d0:	2300      	movs	r3, #0
1a0013d2:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
1a0013d4:	4770      	bx	lr

1a0013d6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
1a0013d6:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
1a0013d8:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
1a0013da:	689a      	ldr	r2, [r3, #8]
1a0013dc:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
1a0013de:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
1a0013e0:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a0013e2:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a0013e4:	6803      	ldr	r3, [r0, #0]
1a0013e6:	3301      	adds	r3, #1
1a0013e8:	6003      	str	r3, [r0, #0]
}
1a0013ea:	4770      	bx	lr

1a0013ec <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
1a0013ec:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
1a0013ee:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
1a0013f0:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a0013f4:	d002      	beq.n	1a0013fc <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a0013f6:	f100 0208 	add.w	r2, r0, #8
1a0013fa:	e002      	b.n	1a001402 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
1a0013fc:	6902      	ldr	r2, [r0, #16]
1a0013fe:	e004      	b.n	1a00140a <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001400:	461a      	mov	r2, r3
1a001402:	6853      	ldr	r3, [r2, #4]
1a001404:	681c      	ldr	r4, [r3, #0]
1a001406:	42ac      	cmp	r4, r5
1a001408:	d9fa      	bls.n	1a001400 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
1a00140a:	6853      	ldr	r3, [r2, #4]
1a00140c:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
1a00140e:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
1a001410:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
1a001412:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a001414:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a001416:	6803      	ldr	r3, [r0, #0]
1a001418:	3301      	adds	r3, #1
1a00141a:	6003      	str	r3, [r0, #0]
}
1a00141c:	bc30      	pop	{r4, r5}
1a00141e:	4770      	bx	lr

1a001420 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
1a001420:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
1a001422:	6841      	ldr	r1, [r0, #4]
1a001424:	6882      	ldr	r2, [r0, #8]
1a001426:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
1a001428:	6841      	ldr	r1, [r0, #4]
1a00142a:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
1a00142c:	685a      	ldr	r2, [r3, #4]
1a00142e:	4282      	cmp	r2, r0
1a001430:	d006      	beq.n	1a001440 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
1a001432:	2200      	movs	r2, #0
1a001434:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
1a001436:	681a      	ldr	r2, [r3, #0]
1a001438:	3a01      	subs	r2, #1
1a00143a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
1a00143c:	6818      	ldr	r0, [r3, #0]
}
1a00143e:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
1a001440:	6882      	ldr	r2, [r0, #8]
1a001442:	605a      	str	r2, [r3, #4]
1a001444:	e7f5      	b.n	1a001432 <uxListRemove+0x12>
1a001446:	Address 0x000000001a001446 is out of bounds.


1a001448 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCB;
static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

    /* Pass out a pointer to the StaticTask_t structure in which the Idle task's
    state will be stored. */
    *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
1a001448:	4b03      	ldr	r3, [pc, #12]	; (1a001458 <vApplicationGetIdleTaskMemory+0x10>)
1a00144a:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Idle task's stack. */
    *ppxIdleTaskStackBuffer = uxIdleTaskStack;
1a00144c:	4b03      	ldr	r3, [pc, #12]	; (1a00145c <vApplicationGetIdleTaskMemory+0x14>)
1a00144e:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxIdleTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configMINIMAL_STACK_SIZE is specified in words, not bytes. */
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
1a001450:	235a      	movs	r3, #90	; 0x5a
1a001452:	6013      	str	r3, [r2, #0]
}
1a001454:	4770      	bx	lr
1a001456:	bf00      	nop
1a001458:	100027f8 	.word	0x100027f8
1a00145c:	100020f0 	.word	0x100020f0

1a001460 <vApplicationGetTimerTaskMemory>:
static StaticTask_t xTimerTaskTCB;
static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

    /* Pass out a pointer to the StaticTask_t structure in which the Timer
    task's state will be stored. */
    *ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
1a001460:	4b03      	ldr	r3, [pc, #12]	; (1a001470 <vApplicationGetTimerTaskMemory+0x10>)
1a001462:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Timer task's stack. */
    *ppxTimerTaskStackBuffer = uxTimerTaskStack;
1a001464:	4b03      	ldr	r3, [pc, #12]	; (1a001474 <vApplicationGetTimerTaskMemory+0x14>)
1a001466:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxTimerTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configTIMER_TASK_STACK_DEPTH is specified in words, not bytes. */
    *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
1a001468:	f44f 73b4 	mov.w	r3, #360	; 0x168
1a00146c:	6013      	str	r3, [r2, #0]
1a00146e:	4770      	bx	lr
1a001470:	10002858 	.word	0x10002858
1a001474:	10002258 	.word	0x10002258

1a001478 <vAssertCalled>:
#include <task.h>

#define WEAK __attribute__ ((weak))

WEAK void vAssertCalled( uint32_t ulLine, const char * const pcFile )
{
1a001478:	b510      	push	{r4, lr}
1a00147a:	b082      	sub	sp, #8
1a00147c:	460c      	mov	r4, r1
// The following two variables are just to ensure the parameters are not
// optimised away and therefore unavailable when viewed in the debugger.
   volatile uint32_t ulLineNumber = ulLine, ulSetNonZeroInDebuggerToReturn = 0;
1a00147e:	9001      	str	r0, [sp, #4]
1a001480:	2300      	movs	r3, #0
1a001482:	9300      	str	r3, [sp, #0]
   volatile const char * const pcFileName = pcFile;

   taskENTER_CRITICAL();
1a001484:	f001 f906 	bl	1a002694 <vPortEnterCritical>
   {
      printf( "\r\nvAssertCalled()\r\n   LLine Number = %d\r\n   File Name = %s\r\n\r\n",
1a001488:	9901      	ldr	r1, [sp, #4]
1a00148a:	4622      	mov	r2, r4
1a00148c:	4804      	ldr	r0, [pc, #16]	; (1a0014a0 <vAssertCalled+0x28>)
1a00148e:	f003 f9d9 	bl	1a004844 <iprintf>
              ulLineNumber, pcFileName ); // @Eric
      while( ulSetNonZeroInDebuggerToReturn == 0 ) {
1a001492:	9b00      	ldr	r3, [sp, #0]
1a001494:	2b00      	cmp	r3, #0
1a001496:	d0fc      	beq.n	1a001492 <vAssertCalled+0x1a>
         // If you want to set out of this function in the debugger to see
         // the assert() location then set ulSetNonZeroInDebuggerToReturn to a
         // non-zero value.
      }
   }
   taskEXIT_CRITICAL();
1a001498:	f001 f91e 	bl	1a0026d8 <vPortExitCritical>

//   printf( "Stop in a while(1)\r\n\r\n" ); // @Eric
//   while(1); // @Eric
}
1a00149c:	b002      	add	sp, #8
1a00149e:	bd10      	pop	{r4, pc}
1a0014a0:	1a0054e8 	.word	0x1a0054e8

1a0014a4 <vApplicationMallocFailedHook>:
/*-----------------------------------------------------------*/

WEAK void vApplicationMallocFailedHook( void )
{
1a0014a4:	b508      	push	{r3, lr}
   // parts of the demo application.  If heap_1.c, heap_2.c or heap_4.c are used,
   // then the size of the heap available to pvPortMalloc() is defined by
   // configTOTAL_HEAP_SIZE in FreeRTOSConfig.h, and the xPortGetFreeHeapSize()
   // API function can be used to query the size of free heap space that remains.
   // More information is provided in the book text.
   printf( "Application Malloc Failed Hook!\r\n" );
1a0014a6:	4804      	ldr	r0, [pc, #16]	; (1a0014b8 <vApplicationMallocFailedHook+0x14>)
1a0014a8:	f003 fa52 	bl	1a004950 <puts>
   vAssertCalled( __LINE__, __FILE__ );
1a0014ac:	4903      	ldr	r1, [pc, #12]	; (1a0014bc <vApplicationMallocFailedHook+0x18>)
1a0014ae:	202c      	movs	r0, #44	; 0x2c
1a0014b0:	f7ff ffe2 	bl	1a001478 <vAssertCalled>
}
1a0014b4:	bd08      	pop	{r3, pc}
1a0014b6:	bf00      	nop
1a0014b8:	1a005474 	.word	0x1a005474
1a0014bc:	1a005498 	.word	0x1a005498

1a0014c0 <vApplicationStackOverflowHook>:
}
#endif /* 0 */
/*-----------------------------------------------------------*/

WEAK void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
{
1a0014c0:	b508      	push	{r3, lr}

   // Run time stack overflow checking is performed if
   // configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   // called if a stack overflow is detected. More information is provided in the
   // book text.
   printf( "\r\nApplication Stack Overflow!! on Task: %s\r\n", (char*)pcTaskName );
1a0014c2:	4804      	ldr	r0, [pc, #16]	; (1a0014d4 <vApplicationStackOverflowHook+0x14>)
1a0014c4:	f003 f9be 	bl	1a004844 <iprintf>
   vAssertCalled( __LINE__, __FILE__ );
1a0014c8:	4903      	ldr	r1, [pc, #12]	; (1a0014d8 <vApplicationStackOverflowHook+0x18>)
1a0014ca:	2050      	movs	r0, #80	; 0x50
1a0014cc:	f7ff ffd4 	bl	1a001478 <vAssertCalled>
}
1a0014d0:	bd08      	pop	{r3, pc}
1a0014d2:	bf00      	nop
1a0014d4:	1a0054b8 	.word	0x1a0054b8
1a0014d8:	1a005498 	.word	0x1a005498

1a0014dc <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a0014dc:	4b08      	ldr	r3, [pc, #32]	; (1a001500 <prvResetNextTaskUnblockTime+0x24>)
1a0014de:	681b      	ldr	r3, [r3, #0]
1a0014e0:	681b      	ldr	r3, [r3, #0]
1a0014e2:	b923      	cbnz	r3, 1a0014ee <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
1a0014e4:	4b07      	ldr	r3, [pc, #28]	; (1a001504 <prvResetNextTaskUnblockTime+0x28>)
1a0014e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0014ea:	601a      	str	r2, [r3, #0]
1a0014ec:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a0014ee:	4b04      	ldr	r3, [pc, #16]	; (1a001500 <prvResetNextTaskUnblockTime+0x24>)
1a0014f0:	681b      	ldr	r3, [r3, #0]
1a0014f2:	68db      	ldr	r3, [r3, #12]
1a0014f4:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
1a0014f6:	685a      	ldr	r2, [r3, #4]
1a0014f8:	4b02      	ldr	r3, [pc, #8]	; (1a001504 <prvResetNextTaskUnblockTime+0x28>)
1a0014fa:	601a      	str	r2, [r3, #0]
	}
}
1a0014fc:	4770      	bx	lr
1a0014fe:	bf00      	nop
1a001500:	100028bc 	.word	0x100028bc
1a001504:	10002990 	.word	0x10002990

1a001508 <prvInitialiseNewTask>:
{
1a001508:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a00150c:	4681      	mov	r9, r0
1a00150e:	460d      	mov	r5, r1
1a001510:	4617      	mov	r7, r2
1a001512:	469a      	mov	sl, r3
1a001514:	9e08      	ldr	r6, [sp, #32]
1a001516:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
1a00151a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
1a00151c:	0092      	lsls	r2, r2, #2
1a00151e:	21a5      	movs	r1, #165	; 0xa5
1a001520:	6b20      	ldr	r0, [r4, #48]	; 0x30
1a001522:	f003 f8de 	bl	1a0046e2 <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
1a001526:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a001528:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
1a00152c:	3a01      	subs	r2, #1
1a00152e:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
1a001532:	f027 0707 	bic.w	r7, r7, #7
			pxNewTCB->pxEndOfStack = pxTopOfStack;
1a001536:	6467      	str	r7, [r4, #68]	; 0x44
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a001538:	2300      	movs	r3, #0
1a00153a:	2b0f      	cmp	r3, #15
1a00153c:	d806      	bhi.n	1a00154c <prvInitialiseNewTask+0x44>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
1a00153e:	5cea      	ldrb	r2, [r5, r3]
1a001540:	18e1      	adds	r1, r4, r3
1a001542:	f881 2034 	strb.w	r2, [r1, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
1a001546:	b10a      	cbz	r2, 1a00154c <prvInitialiseNewTask+0x44>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a001548:	3301      	adds	r3, #1
1a00154a:	e7f6      	b.n	1a00153a <prvInitialiseNewTask+0x32>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
1a00154c:	2300      	movs	r3, #0
1a00154e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1a001552:	2e06      	cmp	r6, #6
1a001554:	d900      	bls.n	1a001558 <prvInitialiseNewTask+0x50>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1a001556:	2606      	movs	r6, #6
	pxNewTCB->uxPriority = uxPriority;
1a001558:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
1a00155a:	6526      	str	r6, [r4, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
1a00155c:	2500      	movs	r5, #0
1a00155e:	6565      	str	r5, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
1a001560:	1d20      	adds	r0, r4, #4
1a001562:	f7ff ff35 	bl	1a0013d0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
1a001566:	f104 0018 	add.w	r0, r4, #24
1a00156a:	f7ff ff31 	bl	1a0013d0 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
1a00156e:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001570:	f1c6 0607 	rsb	r6, r6, #7
1a001574:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
1a001576:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
1a001578:	65a5      	str	r5, [r4, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1a00157a:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1a00157e:	4652      	mov	r2, sl
1a001580:	4649      	mov	r1, r9
1a001582:	4638      	mov	r0, r7
1a001584:	f001 f85a 	bl	1a00263c <pxPortInitialiseStack>
1a001588:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
1a00158a:	f1b8 0f00 	cmp.w	r8, #0
1a00158e:	d001      	beq.n	1a001594 <prvInitialiseNewTask+0x8c>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1a001590:	f8c8 4000 	str.w	r4, [r8]
}
1a001594:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

1a001598 <prvInitialiseTaskLists>:
{
1a001598:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a00159a:	2400      	movs	r4, #0
1a00159c:	2c06      	cmp	r4, #6
1a00159e:	d808      	bhi.n	1a0015b2 <prvInitialiseTaskLists+0x1a>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
1a0015a0:	eb04 0284 	add.w	r2, r4, r4, lsl #2
1a0015a4:	0093      	lsls	r3, r2, #2
1a0015a6:	480e      	ldr	r0, [pc, #56]	; (1a0015e0 <prvInitialiseTaskLists+0x48>)
1a0015a8:	4418      	add	r0, r3
1a0015aa:	f7ff ff06 	bl	1a0013ba <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a0015ae:	3401      	adds	r4, #1
1a0015b0:	e7f4      	b.n	1a00159c <prvInitialiseTaskLists+0x4>
	vListInitialise( &xDelayedTaskList1 );
1a0015b2:	4d0c      	ldr	r5, [pc, #48]	; (1a0015e4 <prvInitialiseTaskLists+0x4c>)
1a0015b4:	4628      	mov	r0, r5
1a0015b6:	f7ff ff00 	bl	1a0013ba <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
1a0015ba:	4c0b      	ldr	r4, [pc, #44]	; (1a0015e8 <prvInitialiseTaskLists+0x50>)
1a0015bc:	4620      	mov	r0, r4
1a0015be:	f7ff fefc 	bl	1a0013ba <vListInitialise>
	vListInitialise( &xPendingReadyList );
1a0015c2:	480a      	ldr	r0, [pc, #40]	; (1a0015ec <prvInitialiseTaskLists+0x54>)
1a0015c4:	f7ff fef9 	bl	1a0013ba <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
1a0015c8:	4809      	ldr	r0, [pc, #36]	; (1a0015f0 <prvInitialiseTaskLists+0x58>)
1a0015ca:	f7ff fef6 	bl	1a0013ba <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
1a0015ce:	4809      	ldr	r0, [pc, #36]	; (1a0015f4 <prvInitialiseTaskLists+0x5c>)
1a0015d0:	f7ff fef3 	bl	1a0013ba <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
1a0015d4:	4b08      	ldr	r3, [pc, #32]	; (1a0015f8 <prvInitialiseTaskLists+0x60>)
1a0015d6:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
1a0015d8:	4b08      	ldr	r3, [pc, #32]	; (1a0015fc <prvInitialiseTaskLists+0x64>)
1a0015da:	601c      	str	r4, [r3, #0]
}
1a0015dc:	bd38      	pop	{r3, r4, r5, pc}
1a0015de:	bf00      	nop
1a0015e0:	100028c4 	.word	0x100028c4
1a0015e4:	10002968 	.word	0x10002968
1a0015e8:	1000297c 	.word	0x1000297c
1a0015ec:	10002998 	.word	0x10002998
1a0015f0:	100029c4 	.word	0x100029c4
1a0015f4:	100029b0 	.word	0x100029b0
1a0015f8:	100028bc 	.word	0x100028bc
1a0015fc:	100028c0 	.word	0x100028c0

1a001600 <prvAddNewTaskToReadyList>:
{
1a001600:	b510      	push	{r4, lr}
1a001602:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a001604:	f001 f846 	bl	1a002694 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
1a001608:	4a21      	ldr	r2, [pc, #132]	; (1a001690 <prvAddNewTaskToReadyList+0x90>)
1a00160a:	6813      	ldr	r3, [r2, #0]
1a00160c:	3301      	adds	r3, #1
1a00160e:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
1a001610:	4b20      	ldr	r3, [pc, #128]	; (1a001694 <prvAddNewTaskToReadyList+0x94>)
1a001612:	681b      	ldr	r3, [r3, #0]
1a001614:	b15b      	cbz	r3, 1a00162e <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
1a001616:	4b20      	ldr	r3, [pc, #128]	; (1a001698 <prvAddNewTaskToReadyList+0x98>)
1a001618:	681b      	ldr	r3, [r3, #0]
1a00161a:	b96b      	cbnz	r3, 1a001638 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1a00161c:	4b1d      	ldr	r3, [pc, #116]	; (1a001694 <prvAddNewTaskToReadyList+0x94>)
1a00161e:	681b      	ldr	r3, [r3, #0]
1a001620:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a001622:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001624:	429a      	cmp	r2, r3
1a001626:	d807      	bhi.n	1a001638 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
1a001628:	4b1a      	ldr	r3, [pc, #104]	; (1a001694 <prvAddNewTaskToReadyList+0x94>)
1a00162a:	601c      	str	r4, [r3, #0]
1a00162c:	e004      	b.n	1a001638 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
1a00162e:	4b19      	ldr	r3, [pc, #100]	; (1a001694 <prvAddNewTaskToReadyList+0x94>)
1a001630:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1a001632:	6813      	ldr	r3, [r2, #0]
1a001634:	2b01      	cmp	r3, #1
1a001636:	d027      	beq.n	1a001688 <prvAddNewTaskToReadyList+0x88>
		uxTaskNumber++;
1a001638:	4a18      	ldr	r2, [pc, #96]	; (1a00169c <prvAddNewTaskToReadyList+0x9c>)
1a00163a:	6813      	ldr	r3, [r2, #0]
1a00163c:	3301      	adds	r3, #1
1a00163e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
1a001640:	64a3      	str	r3, [r4, #72]	; 0x48
		prvAddTaskToReadyList( pxNewTCB );
1a001642:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001644:	2201      	movs	r2, #1
1a001646:	409a      	lsls	r2, r3
1a001648:	4915      	ldr	r1, [pc, #84]	; (1a0016a0 <prvAddNewTaskToReadyList+0xa0>)
1a00164a:	6808      	ldr	r0, [r1, #0]
1a00164c:	4302      	orrs	r2, r0
1a00164e:	600a      	str	r2, [r1, #0]
1a001650:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001654:	009a      	lsls	r2, r3, #2
1a001656:	1d21      	adds	r1, r4, #4
1a001658:	4812      	ldr	r0, [pc, #72]	; (1a0016a4 <prvAddNewTaskToReadyList+0xa4>)
1a00165a:	4410      	add	r0, r2
1a00165c:	f7ff febb 	bl	1a0013d6 <vListInsertEnd>
	taskEXIT_CRITICAL();
1a001660:	f001 f83a 	bl	1a0026d8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
1a001664:	4b0c      	ldr	r3, [pc, #48]	; (1a001698 <prvAddNewTaskToReadyList+0x98>)
1a001666:	681b      	ldr	r3, [r3, #0]
1a001668:	b16b      	cbz	r3, 1a001686 <prvAddNewTaskToReadyList+0x86>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1a00166a:	4b0a      	ldr	r3, [pc, #40]	; (1a001694 <prvAddNewTaskToReadyList+0x94>)
1a00166c:	681b      	ldr	r3, [r3, #0]
1a00166e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a001670:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001672:	429a      	cmp	r2, r3
1a001674:	d207      	bcs.n	1a001686 <prvAddNewTaskToReadyList+0x86>
			taskYIELD_IF_USING_PREEMPTION();
1a001676:	4b0c      	ldr	r3, [pc, #48]	; (1a0016a8 <prvAddNewTaskToReadyList+0xa8>)
1a001678:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00167c:	601a      	str	r2, [r3, #0]
1a00167e:	f3bf 8f4f 	dsb	sy
1a001682:	f3bf 8f6f 	isb	sy
}
1a001686:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
1a001688:	f7ff ff86 	bl	1a001598 <prvInitialiseTaskLists>
1a00168c:	e7d4      	b.n	1a001638 <prvAddNewTaskToReadyList+0x38>
1a00168e:	bf00      	nop
1a001690:	10002950 	.word	0x10002950
1a001694:	100028b8 	.word	0x100028b8
1a001698:	100029ac 	.word	0x100029ac
1a00169c:	10002960 	.word	0x10002960
1a0016a0:	10002964 	.word	0x10002964
1a0016a4:	100028c4 	.word	0x100028c4
1a0016a8:	e000ed04 	.word	0xe000ed04

1a0016ac <prvDeleteTCB>:
	{
1a0016ac:	b510      	push	{r4, lr}
1a0016ae:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
1a0016b0:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
1a0016b4:	b163      	cbz	r3, 1a0016d0 <prvDeleteTCB+0x24>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
1a0016b6:	2b01      	cmp	r3, #1
1a0016b8:	d011      	beq.n	1a0016de <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
1a0016ba:	2b02      	cmp	r3, #2
1a0016bc:	d00e      	beq.n	1a0016dc <prvDeleteTCB+0x30>
1a0016be:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0016c2:	f383 8811 	msr	BASEPRI, r3
1a0016c6:	f3bf 8f6f 	isb	sy
1a0016ca:	f3bf 8f4f 	dsb	sy
1a0016ce:	e7fe      	b.n	1a0016ce <prvDeleteTCB+0x22>
				vPortFree( pxTCB->pxStack );
1a0016d0:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a0016d2:	f7ff f9d1 	bl	1a000a78 <vPortFree>
				vPortFree( pxTCB );
1a0016d6:	4620      	mov	r0, r4
1a0016d8:	f7ff f9ce 	bl	1a000a78 <vPortFree>
	}
1a0016dc:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
1a0016de:	f7ff f9cb 	bl	1a000a78 <vPortFree>
1a0016e2:	e7fb      	b.n	1a0016dc <prvDeleteTCB+0x30>

1a0016e4 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a0016e4:	4b0f      	ldr	r3, [pc, #60]	; (1a001724 <prvCheckTasksWaitingTermination+0x40>)
1a0016e6:	681b      	ldr	r3, [r3, #0]
1a0016e8:	b1d3      	cbz	r3, 1a001720 <prvCheckTasksWaitingTermination+0x3c>
{
1a0016ea:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
1a0016ec:	f000 ffd2 	bl	1a002694 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
1a0016f0:	4b0d      	ldr	r3, [pc, #52]	; (1a001728 <prvCheckTasksWaitingTermination+0x44>)
1a0016f2:	68db      	ldr	r3, [r3, #12]
1a0016f4:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a0016f6:	1d20      	adds	r0, r4, #4
1a0016f8:	f7ff fe92 	bl	1a001420 <uxListRemove>
				--uxCurrentNumberOfTasks;
1a0016fc:	4a0b      	ldr	r2, [pc, #44]	; (1a00172c <prvCheckTasksWaitingTermination+0x48>)
1a0016fe:	6813      	ldr	r3, [r2, #0]
1a001700:	3b01      	subs	r3, #1
1a001702:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
1a001704:	4a07      	ldr	r2, [pc, #28]	; (1a001724 <prvCheckTasksWaitingTermination+0x40>)
1a001706:	6813      	ldr	r3, [r2, #0]
1a001708:	3b01      	subs	r3, #1
1a00170a:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
1a00170c:	f000 ffe4 	bl	1a0026d8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
1a001710:	4620      	mov	r0, r4
1a001712:	f7ff ffcb 	bl	1a0016ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a001716:	4b03      	ldr	r3, [pc, #12]	; (1a001724 <prvCheckTasksWaitingTermination+0x40>)
1a001718:	681b      	ldr	r3, [r3, #0]
1a00171a:	2b00      	cmp	r3, #0
1a00171c:	d1e6      	bne.n	1a0016ec <prvCheckTasksWaitingTermination+0x8>
}
1a00171e:	bd10      	pop	{r4, pc}
1a001720:	4770      	bx	lr
1a001722:	bf00      	nop
1a001724:	10002954 	.word	0x10002954
1a001728:	100029c4 	.word	0x100029c4
1a00172c:	10002950 	.word	0x10002950

1a001730 <prvIdleTask>:
{
1a001730:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
1a001732:	f7ff ffd7 	bl	1a0016e4 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
1a001736:	4b06      	ldr	r3, [pc, #24]	; (1a001750 <prvIdleTask+0x20>)
1a001738:	681b      	ldr	r3, [r3, #0]
1a00173a:	2b01      	cmp	r3, #1
1a00173c:	d9f9      	bls.n	1a001732 <prvIdleTask+0x2>
				taskYIELD();
1a00173e:	4b05      	ldr	r3, [pc, #20]	; (1a001754 <prvIdleTask+0x24>)
1a001740:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001744:	601a      	str	r2, [r3, #0]
1a001746:	f3bf 8f4f 	dsb	sy
1a00174a:	f3bf 8f6f 	isb	sy
1a00174e:	e7f0      	b.n	1a001732 <prvIdleTask+0x2>
1a001750:	100028c4 	.word	0x100028c4
1a001754:	e000ed04 	.word	0xe000ed04

1a001758 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
1a001758:	b570      	push	{r4, r5, r6, lr}
1a00175a:	4604      	mov	r4, r0
1a00175c:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
1a00175e:	4b1d      	ldr	r3, [pc, #116]	; (1a0017d4 <prvAddCurrentTaskToDelayedList+0x7c>)
1a001760:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a001762:	4b1d      	ldr	r3, [pc, #116]	; (1a0017d8 <prvAddCurrentTaskToDelayedList+0x80>)
1a001764:	6818      	ldr	r0, [r3, #0]
1a001766:	3004      	adds	r0, #4
1a001768:	f7ff fe5a 	bl	1a001420 <uxListRemove>
1a00176c:	b950      	cbnz	r0, 1a001784 <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
1a00176e:	4b1a      	ldr	r3, [pc, #104]	; (1a0017d8 <prvAddCurrentTaskToDelayedList+0x80>)
1a001770:	681b      	ldr	r3, [r3, #0]
1a001772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a001774:	2301      	movs	r3, #1
1a001776:	fa03 f202 	lsl.w	r2, r3, r2
1a00177a:	4918      	ldr	r1, [pc, #96]	; (1a0017dc <prvAddCurrentTaskToDelayedList+0x84>)
1a00177c:	680b      	ldr	r3, [r1, #0]
1a00177e:	ea23 0302 	bic.w	r3, r3, r2
1a001782:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a001784:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
1a001788:	d00d      	beq.n	1a0017a6 <prvAddCurrentTaskToDelayedList+0x4e>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
1a00178a:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
1a00178c:	4b12      	ldr	r3, [pc, #72]	; (1a0017d8 <prvAddCurrentTaskToDelayedList+0x80>)
1a00178e:	681b      	ldr	r3, [r3, #0]
1a001790:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
1a001792:	42a5      	cmp	r5, r4
1a001794:	d910      	bls.n	1a0017b8 <prvAddCurrentTaskToDelayedList+0x60>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a001796:	4b12      	ldr	r3, [pc, #72]	; (1a0017e0 <prvAddCurrentTaskToDelayedList+0x88>)
1a001798:	6818      	ldr	r0, [r3, #0]
1a00179a:	4b0f      	ldr	r3, [pc, #60]	; (1a0017d8 <prvAddCurrentTaskToDelayedList+0x80>)
1a00179c:	6819      	ldr	r1, [r3, #0]
1a00179e:	3104      	adds	r1, #4
1a0017a0:	f7ff fe24 	bl	1a0013ec <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
1a0017a4:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a0017a6:	2e00      	cmp	r6, #0
1a0017a8:	d0ef      	beq.n	1a00178a <prvAddCurrentTaskToDelayedList+0x32>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a0017aa:	4b0b      	ldr	r3, [pc, #44]	; (1a0017d8 <prvAddCurrentTaskToDelayedList+0x80>)
1a0017ac:	6819      	ldr	r1, [r3, #0]
1a0017ae:	3104      	adds	r1, #4
1a0017b0:	480c      	ldr	r0, [pc, #48]	; (1a0017e4 <prvAddCurrentTaskToDelayedList+0x8c>)
1a0017b2:	f7ff fe10 	bl	1a0013d6 <vListInsertEnd>
1a0017b6:	e7f5      	b.n	1a0017a4 <prvAddCurrentTaskToDelayedList+0x4c>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a0017b8:	4b0b      	ldr	r3, [pc, #44]	; (1a0017e8 <prvAddCurrentTaskToDelayedList+0x90>)
1a0017ba:	6818      	ldr	r0, [r3, #0]
1a0017bc:	4b06      	ldr	r3, [pc, #24]	; (1a0017d8 <prvAddCurrentTaskToDelayedList+0x80>)
1a0017be:	6819      	ldr	r1, [r3, #0]
1a0017c0:	3104      	adds	r1, #4
1a0017c2:	f7ff fe13 	bl	1a0013ec <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
1a0017c6:	4b09      	ldr	r3, [pc, #36]	; (1a0017ec <prvAddCurrentTaskToDelayedList+0x94>)
1a0017c8:	681b      	ldr	r3, [r3, #0]
1a0017ca:	42a3      	cmp	r3, r4
1a0017cc:	d9ea      	bls.n	1a0017a4 <prvAddCurrentTaskToDelayedList+0x4c>
					xNextTaskUnblockTime = xTimeToWake;
1a0017ce:	4b07      	ldr	r3, [pc, #28]	; (1a0017ec <prvAddCurrentTaskToDelayedList+0x94>)
1a0017d0:	601c      	str	r4, [r3, #0]
}
1a0017d2:	e7e7      	b.n	1a0017a4 <prvAddCurrentTaskToDelayedList+0x4c>
1a0017d4:	100029d8 	.word	0x100029d8
1a0017d8:	100028b8 	.word	0x100028b8
1a0017dc:	10002964 	.word	0x10002964
1a0017e0:	100028c0 	.word	0x100028c0
1a0017e4:	100029b0 	.word	0x100029b0
1a0017e8:	100028bc 	.word	0x100028bc
1a0017ec:	10002990 	.word	0x10002990

1a0017f0 <xTaskCreateStatic>:
	{
1a0017f0:	b570      	push	{r4, r5, r6, lr}
1a0017f2:	b086      	sub	sp, #24
1a0017f4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
1a0017f6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
1a0017f8:	b175      	cbz	r5, 1a001818 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
1a0017fa:	b1b4      	cbz	r4, 1a00182a <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
1a0017fc:	2660      	movs	r6, #96	; 0x60
1a0017fe:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
1a001800:	9e04      	ldr	r6, [sp, #16]
1a001802:	2e60      	cmp	r6, #96	; 0x60
1a001804:	d01a      	beq.n	1a00183c <xTaskCreateStatic+0x4c>
1a001806:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00180a:	f383 8811 	msr	BASEPRI, r3
1a00180e:	f3bf 8f6f 	isb	sy
1a001812:	f3bf 8f4f 	dsb	sy
1a001816:	e7fe      	b.n	1a001816 <xTaskCreateStatic+0x26>
1a001818:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00181c:	f383 8811 	msr	BASEPRI, r3
1a001820:	f3bf 8f6f 	isb	sy
1a001824:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
1a001828:	e7fe      	b.n	1a001828 <xTaskCreateStatic+0x38>
1a00182a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00182e:	f383 8811 	msr	BASEPRI, r3
1a001832:	f3bf 8f6f 	isb	sy
1a001836:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
1a00183a:	e7fe      	b.n	1a00183a <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
1a00183c:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
1a00183e:	2502      	movs	r5, #2
1a001840:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
1a001844:	2500      	movs	r5, #0
1a001846:	9503      	str	r5, [sp, #12]
1a001848:	9402      	str	r4, [sp, #8]
1a00184a:	ad05      	add	r5, sp, #20
1a00184c:	9501      	str	r5, [sp, #4]
1a00184e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
1a001850:	9500      	str	r5, [sp, #0]
1a001852:	f7ff fe59 	bl	1a001508 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a001856:	4620      	mov	r0, r4
1a001858:	f7ff fed2 	bl	1a001600 <prvAddNewTaskToReadyList>
	}
1a00185c:	9805      	ldr	r0, [sp, #20]
1a00185e:	b006      	add	sp, #24
1a001860:	bd70      	pop	{r4, r5, r6, pc}

1a001862 <xTaskCreate>:
	{
1a001862:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a001866:	b085      	sub	sp, #20
1a001868:	4607      	mov	r7, r0
1a00186a:	4688      	mov	r8, r1
1a00186c:	4615      	mov	r5, r2
1a00186e:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001870:	0090      	lsls	r0, r2, #2
1a001872:	f7ff f873 	bl	1a00095c <pvPortMalloc>
			if( pxStack != NULL )
1a001876:	b1f8      	cbz	r0, 1a0018b8 <xTaskCreate+0x56>
1a001878:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
1a00187a:	2060      	movs	r0, #96	; 0x60
1a00187c:	f7ff f86e 	bl	1a00095c <pvPortMalloc>
				if( pxNewTCB != NULL )
1a001880:	4604      	mov	r4, r0
1a001882:	b1a8      	cbz	r0, 1a0018b0 <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
1a001884:	6306      	str	r6, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
1a001886:	b1e4      	cbz	r4, 1a0018c2 <xTaskCreate+0x60>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
1a001888:	2300      	movs	r3, #0
1a00188a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
1a00188e:	9303      	str	r3, [sp, #12]
1a001890:	9402      	str	r4, [sp, #8]
1a001892:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a001894:	9301      	str	r3, [sp, #4]
1a001896:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a001898:	9300      	str	r3, [sp, #0]
1a00189a:	464b      	mov	r3, r9
1a00189c:	462a      	mov	r2, r5
1a00189e:	4641      	mov	r1, r8
1a0018a0:	4638      	mov	r0, r7
1a0018a2:	f7ff fe31 	bl	1a001508 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a0018a6:	4620      	mov	r0, r4
1a0018a8:	f7ff feaa 	bl	1a001600 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
1a0018ac:	2001      	movs	r0, #1
1a0018ae:	e005      	b.n	1a0018bc <xTaskCreate+0x5a>
					vPortFree( pxStack );
1a0018b0:	4630      	mov	r0, r6
1a0018b2:	f7ff f8e1 	bl	1a000a78 <vPortFree>
1a0018b6:	e7e6      	b.n	1a001886 <xTaskCreate+0x24>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
1a0018b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
1a0018bc:	b005      	add	sp, #20
1a0018be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
1a0018c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
1a0018c6:	e7f9      	b.n	1a0018bc <xTaskCreate+0x5a>

1a0018c8 <vTaskDelete>:
	{
1a0018c8:	b538      	push	{r3, r4, r5, lr}
1a0018ca:	4604      	mov	r4, r0
		taskENTER_CRITICAL();
1a0018cc:	f000 fee2 	bl	1a002694 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
1a0018d0:	2c00      	cmp	r4, #0
1a0018d2:	d034      	beq.n	1a00193e <vTaskDelete+0x76>
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a0018d4:	1d25      	adds	r5, r4, #4
1a0018d6:	4628      	mov	r0, r5
1a0018d8:	f7ff fda2 	bl	1a001420 <uxListRemove>
1a0018dc:	b970      	cbnz	r0, 1a0018fc <vTaskDelete+0x34>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1a0018de:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a0018e0:	eb02 0182 	add.w	r1, r2, r2, lsl #2
1a0018e4:	008b      	lsls	r3, r1, #2
1a0018e6:	4926      	ldr	r1, [pc, #152]	; (1a001980 <vTaskDelete+0xb8>)
1a0018e8:	58cb      	ldr	r3, [r1, r3]
1a0018ea:	b93b      	cbnz	r3, 1a0018fc <vTaskDelete+0x34>
1a0018ec:	2301      	movs	r3, #1
1a0018ee:	fa03 f202 	lsl.w	r2, r3, r2
1a0018f2:	4924      	ldr	r1, [pc, #144]	; (1a001984 <vTaskDelete+0xbc>)
1a0018f4:	680b      	ldr	r3, [r1, #0]
1a0018f6:	ea23 0302 	bic.w	r3, r3, r2
1a0018fa:	600b      	str	r3, [r1, #0]
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1a0018fc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
1a0018fe:	b11b      	cbz	r3, 1a001908 <vTaskDelete+0x40>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a001900:	f104 0018 	add.w	r0, r4, #24
1a001904:	f7ff fd8c 	bl	1a001420 <uxListRemove>
			uxTaskNumber++;
1a001908:	4a1f      	ldr	r2, [pc, #124]	; (1a001988 <vTaskDelete+0xc0>)
1a00190a:	6813      	ldr	r3, [r2, #0]
1a00190c:	3301      	adds	r3, #1
1a00190e:	6013      	str	r3, [r2, #0]
			if( pxTCB == pxCurrentTCB )
1a001910:	4b1e      	ldr	r3, [pc, #120]	; (1a00198c <vTaskDelete+0xc4>)
1a001912:	681b      	ldr	r3, [r3, #0]
1a001914:	42a3      	cmp	r3, r4
1a001916:	d015      	beq.n	1a001944 <vTaskDelete+0x7c>
				--uxCurrentNumberOfTasks;
1a001918:	4a1d      	ldr	r2, [pc, #116]	; (1a001990 <vTaskDelete+0xc8>)
1a00191a:	6813      	ldr	r3, [r2, #0]
1a00191c:	3b01      	subs	r3, #1
1a00191e:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
1a001920:	4620      	mov	r0, r4
1a001922:	f7ff fec3 	bl	1a0016ac <prvDeleteTCB>
				prvResetNextTaskUnblockTime();
1a001926:	f7ff fdd9 	bl	1a0014dc <prvResetNextTaskUnblockTime>
		taskEXIT_CRITICAL();
1a00192a:	f000 fed5 	bl	1a0026d8 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
1a00192e:	4b19      	ldr	r3, [pc, #100]	; (1a001994 <vTaskDelete+0xcc>)
1a001930:	681b      	ldr	r3, [r3, #0]
1a001932:	b11b      	cbz	r3, 1a00193c <vTaskDelete+0x74>
			if( pxTCB == pxCurrentTCB )
1a001934:	4b15      	ldr	r3, [pc, #84]	; (1a00198c <vTaskDelete+0xc4>)
1a001936:	681b      	ldr	r3, [r3, #0]
1a001938:	42a3      	cmp	r3, r4
1a00193a:	d00c      	beq.n	1a001956 <vTaskDelete+0x8e>
	}
1a00193c:	bd38      	pop	{r3, r4, r5, pc}
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
1a00193e:	4b13      	ldr	r3, [pc, #76]	; (1a00198c <vTaskDelete+0xc4>)
1a001940:	681c      	ldr	r4, [r3, #0]
1a001942:	e7c7      	b.n	1a0018d4 <vTaskDelete+0xc>
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
1a001944:	4629      	mov	r1, r5
1a001946:	4814      	ldr	r0, [pc, #80]	; (1a001998 <vTaskDelete+0xd0>)
1a001948:	f7ff fd45 	bl	1a0013d6 <vListInsertEnd>
				++uxDeletedTasksWaitingCleanUp;
1a00194c:	4a13      	ldr	r2, [pc, #76]	; (1a00199c <vTaskDelete+0xd4>)
1a00194e:	6813      	ldr	r3, [r2, #0]
1a001950:	3301      	adds	r3, #1
1a001952:	6013      	str	r3, [r2, #0]
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1a001954:	e7e9      	b.n	1a00192a <vTaskDelete+0x62>
				configASSERT( uxSchedulerSuspended == 0 );
1a001956:	4b12      	ldr	r3, [pc, #72]	; (1a0019a0 <vTaskDelete+0xd8>)
1a001958:	681b      	ldr	r3, [r3, #0]
1a00195a:	b143      	cbz	r3, 1a00196e <vTaskDelete+0xa6>
1a00195c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001960:	f383 8811 	msr	BASEPRI, r3
1a001964:	f3bf 8f6f 	isb	sy
1a001968:	f3bf 8f4f 	dsb	sy
1a00196c:	e7fe      	b.n	1a00196c <vTaskDelete+0xa4>
				portYIELD_WITHIN_API();
1a00196e:	4b0d      	ldr	r3, [pc, #52]	; (1a0019a4 <vTaskDelete+0xdc>)
1a001970:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001974:	601a      	str	r2, [r3, #0]
1a001976:	f3bf 8f4f 	dsb	sy
1a00197a:	f3bf 8f6f 	isb	sy
	}
1a00197e:	e7dd      	b.n	1a00193c <vTaskDelete+0x74>
1a001980:	100028c4 	.word	0x100028c4
1a001984:	10002964 	.word	0x10002964
1a001988:	10002960 	.word	0x10002960
1a00198c:	100028b8 	.word	0x100028b8
1a001990:	10002950 	.word	0x10002950
1a001994:	100029ac 	.word	0x100029ac
1a001998:	100029c4 	.word	0x100029c4
1a00199c:	10002954 	.word	0x10002954
1a0019a0:	1000295c 	.word	0x1000295c
1a0019a4:	e000ed04 	.word	0xe000ed04

1a0019a8 <vTaskStartScheduler>:
{
1a0019a8:	b510      	push	{r4, lr}
1a0019aa:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1a0019ac:	2400      	movs	r4, #0
1a0019ae:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
1a0019b0:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
1a0019b2:	aa07      	add	r2, sp, #28
1a0019b4:	a906      	add	r1, sp, #24
1a0019b6:	a805      	add	r0, sp, #20
1a0019b8:	f7ff fd46 	bl	1a001448 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1a0019bc:	9b05      	ldr	r3, [sp, #20]
1a0019be:	9302      	str	r3, [sp, #8]
1a0019c0:	9b06      	ldr	r3, [sp, #24]
1a0019c2:	9301      	str	r3, [sp, #4]
1a0019c4:	9400      	str	r4, [sp, #0]
1a0019c6:	4623      	mov	r3, r4
1a0019c8:	9a07      	ldr	r2, [sp, #28]
1a0019ca:	4917      	ldr	r1, [pc, #92]	; (1a001a28 <vTaskStartScheduler+0x80>)
1a0019cc:	4817      	ldr	r0, [pc, #92]	; (1a001a2c <vTaskStartScheduler+0x84>)
1a0019ce:	f7ff ff0f 	bl	1a0017f0 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
1a0019d2:	b140      	cbz	r0, 1a0019e6 <vTaskStartScheduler+0x3e>
			xReturn = xTimerCreateTimerTask();
1a0019d4:	f000 fc46 	bl	1a002264 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
1a0019d8:	2801      	cmp	r0, #1
1a0019da:	d006      	beq.n	1a0019ea <vTaskStartScheduler+0x42>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1a0019dc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a0019e0:	d018      	beq.n	1a001a14 <vTaskStartScheduler+0x6c>
}
1a0019e2:	b008      	add	sp, #32
1a0019e4:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
1a0019e6:	2000      	movs	r0, #0
1a0019e8:	e7f6      	b.n	1a0019d8 <vTaskStartScheduler+0x30>
1a0019ea:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0019ee:	f383 8811 	msr	BASEPRI, r3
1a0019f2:	f3bf 8f6f 	isb	sy
1a0019f6:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
1a0019fa:	4b0d      	ldr	r3, [pc, #52]	; (1a001a30 <vTaskStartScheduler+0x88>)
1a0019fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001a00:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
1a001a02:	4b0c      	ldr	r3, [pc, #48]	; (1a001a34 <vTaskStartScheduler+0x8c>)
1a001a04:	2201      	movs	r2, #1
1a001a06:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
1a001a08:	4b0b      	ldr	r3, [pc, #44]	; (1a001a38 <vTaskStartScheduler+0x90>)
1a001a0a:	2200      	movs	r2, #0
1a001a0c:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
1a001a0e:	f000 fee3 	bl	1a0027d8 <xPortStartScheduler>
1a001a12:	e7e6      	b.n	1a0019e2 <vTaskStartScheduler+0x3a>
1a001a14:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001a18:	f383 8811 	msr	BASEPRI, r3
1a001a1c:	f3bf 8f6f 	isb	sy
1a001a20:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1a001a24:	e7fe      	b.n	1a001a24 <vTaskStartScheduler+0x7c>
1a001a26:	bf00      	nop
1a001a28:	1a005528 	.word	0x1a005528
1a001a2c:	1a001731 	.word	0x1a001731
1a001a30:	10002990 	.word	0x10002990
1a001a34:	100029ac 	.word	0x100029ac
1a001a38:	100029d8 	.word	0x100029d8

1a001a3c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
1a001a3c:	4a02      	ldr	r2, [pc, #8]	; (1a001a48 <vTaskSuspendAll+0xc>)
1a001a3e:	6813      	ldr	r3, [r2, #0]
1a001a40:	3301      	adds	r3, #1
1a001a42:	6013      	str	r3, [r2, #0]
}
1a001a44:	4770      	bx	lr
1a001a46:	bf00      	nop
1a001a48:	1000295c 	.word	0x1000295c

1a001a4c <xTaskGetTickCount>:
		xTicks = xTickCount;
1a001a4c:	4b01      	ldr	r3, [pc, #4]	; (1a001a54 <xTaskGetTickCount+0x8>)
1a001a4e:	6818      	ldr	r0, [r3, #0]
}
1a001a50:	4770      	bx	lr
1a001a52:	bf00      	nop
1a001a54:	100029d8 	.word	0x100029d8

1a001a58 <xTaskIncrementTick>:
{
1a001a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001a5a:	4b3a      	ldr	r3, [pc, #232]	; (1a001b44 <xTaskIncrementTick+0xec>)
1a001a5c:	681b      	ldr	r3, [r3, #0]
1a001a5e:	2b00      	cmp	r3, #0
1a001a60:	d164      	bne.n	1a001b2c <xTaskIncrementTick+0xd4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
1a001a62:	4b39      	ldr	r3, [pc, #228]	; (1a001b48 <xTaskIncrementTick+0xf0>)
1a001a64:	681d      	ldr	r5, [r3, #0]
1a001a66:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
1a001a68:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
1a001a6a:	b9c5      	cbnz	r5, 1a001a9e <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
1a001a6c:	4b37      	ldr	r3, [pc, #220]	; (1a001b4c <xTaskIncrementTick+0xf4>)
1a001a6e:	681b      	ldr	r3, [r3, #0]
1a001a70:	681b      	ldr	r3, [r3, #0]
1a001a72:	b143      	cbz	r3, 1a001a86 <xTaskIncrementTick+0x2e>
1a001a74:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001a78:	f383 8811 	msr	BASEPRI, r3
1a001a7c:	f3bf 8f6f 	isb	sy
1a001a80:	f3bf 8f4f 	dsb	sy
1a001a84:	e7fe      	b.n	1a001a84 <xTaskIncrementTick+0x2c>
1a001a86:	4a31      	ldr	r2, [pc, #196]	; (1a001b4c <xTaskIncrementTick+0xf4>)
1a001a88:	6811      	ldr	r1, [r2, #0]
1a001a8a:	4b31      	ldr	r3, [pc, #196]	; (1a001b50 <xTaskIncrementTick+0xf8>)
1a001a8c:	6818      	ldr	r0, [r3, #0]
1a001a8e:	6010      	str	r0, [r2, #0]
1a001a90:	6019      	str	r1, [r3, #0]
1a001a92:	4a30      	ldr	r2, [pc, #192]	; (1a001b54 <xTaskIncrementTick+0xfc>)
1a001a94:	6813      	ldr	r3, [r2, #0]
1a001a96:	3301      	adds	r3, #1
1a001a98:	6013      	str	r3, [r2, #0]
1a001a9a:	f7ff fd1f 	bl	1a0014dc <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
1a001a9e:	4b2e      	ldr	r3, [pc, #184]	; (1a001b58 <xTaskIncrementTick+0x100>)
1a001aa0:	681b      	ldr	r3, [r3, #0]
1a001aa2:	42ab      	cmp	r3, r5
1a001aa4:	d938      	bls.n	1a001b18 <xTaskIncrementTick+0xc0>
BaseType_t xSwitchRequired = pdFALSE;
1a001aa6:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
1a001aa8:	4b2c      	ldr	r3, [pc, #176]	; (1a001b5c <xTaskIncrementTick+0x104>)
1a001aaa:	681b      	ldr	r3, [r3, #0]
1a001aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001aae:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001ab2:	009a      	lsls	r2, r3, #2
1a001ab4:	4b2a      	ldr	r3, [pc, #168]	; (1a001b60 <xTaskIncrementTick+0x108>)
1a001ab6:	589b      	ldr	r3, [r3, r2]
1a001ab8:	2b01      	cmp	r3, #1
1a001aba:	d93c      	bls.n	1a001b36 <xTaskIncrementTick+0xde>
				xSwitchRequired = pdTRUE;
1a001abc:	2401      	movs	r4, #1
1a001abe:	e03a      	b.n	1a001b36 <xTaskIncrementTick+0xde>
							xSwitchRequired = pdTRUE;
1a001ac0:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a001ac2:	4b22      	ldr	r3, [pc, #136]	; (1a001b4c <xTaskIncrementTick+0xf4>)
1a001ac4:	681b      	ldr	r3, [r3, #0]
1a001ac6:	681b      	ldr	r3, [r3, #0]
1a001ac8:	b343      	cbz	r3, 1a001b1c <xTaskIncrementTick+0xc4>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a001aca:	4b20      	ldr	r3, [pc, #128]	; (1a001b4c <xTaskIncrementTick+0xf4>)
1a001acc:	681b      	ldr	r3, [r3, #0]
1a001ace:	68db      	ldr	r3, [r3, #12]
1a001ad0:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
1a001ad2:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
1a001ad4:	429d      	cmp	r5, r3
1a001ad6:	d326      	bcc.n	1a001b26 <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a001ad8:	1d37      	adds	r7, r6, #4
1a001ada:	4638      	mov	r0, r7
1a001adc:	f7ff fca0 	bl	1a001420 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1a001ae0:	6ab3      	ldr	r3, [r6, #40]	; 0x28
1a001ae2:	b11b      	cbz	r3, 1a001aec <xTaskIncrementTick+0x94>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a001ae4:	f106 0018 	add.w	r0, r6, #24
1a001ae8:	f7ff fc9a 	bl	1a001420 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a001aec:	6af3      	ldr	r3, [r6, #44]	; 0x2c
1a001aee:	2201      	movs	r2, #1
1a001af0:	409a      	lsls	r2, r3
1a001af2:	491c      	ldr	r1, [pc, #112]	; (1a001b64 <xTaskIncrementTick+0x10c>)
1a001af4:	6808      	ldr	r0, [r1, #0]
1a001af6:	4302      	orrs	r2, r0
1a001af8:	600a      	str	r2, [r1, #0]
1a001afa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001afe:	009a      	lsls	r2, r3, #2
1a001b00:	4639      	mov	r1, r7
1a001b02:	4817      	ldr	r0, [pc, #92]	; (1a001b60 <xTaskIncrementTick+0x108>)
1a001b04:	4410      	add	r0, r2
1a001b06:	f7ff fc66 	bl	1a0013d6 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a001b0a:	6af2      	ldr	r2, [r6, #44]	; 0x2c
1a001b0c:	4b13      	ldr	r3, [pc, #76]	; (1a001b5c <xTaskIncrementTick+0x104>)
1a001b0e:	681b      	ldr	r3, [r3, #0]
1a001b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001b12:	429a      	cmp	r2, r3
1a001b14:	d2d4      	bcs.n	1a001ac0 <xTaskIncrementTick+0x68>
1a001b16:	e7d4      	b.n	1a001ac2 <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
1a001b18:	2400      	movs	r4, #0
1a001b1a:	e7d2      	b.n	1a001ac2 <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001b1c:	4b0e      	ldr	r3, [pc, #56]	; (1a001b58 <xTaskIncrementTick+0x100>)
1a001b1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001b22:	601a      	str	r2, [r3, #0]
					break;
1a001b24:	e7c0      	b.n	1a001aa8 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
1a001b26:	4a0c      	ldr	r2, [pc, #48]	; (1a001b58 <xTaskIncrementTick+0x100>)
1a001b28:	6013      	str	r3, [r2, #0]
						break;
1a001b2a:	e7bd      	b.n	1a001aa8 <xTaskIncrementTick+0x50>
		++uxPendedTicks;
1a001b2c:	4a0e      	ldr	r2, [pc, #56]	; (1a001b68 <xTaskIncrementTick+0x110>)
1a001b2e:	6813      	ldr	r3, [r2, #0]
1a001b30:	3301      	adds	r3, #1
1a001b32:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
1a001b34:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
1a001b36:	4b0d      	ldr	r3, [pc, #52]	; (1a001b6c <xTaskIncrementTick+0x114>)
1a001b38:	681b      	ldr	r3, [r3, #0]
1a001b3a:	b103      	cbz	r3, 1a001b3e <xTaskIncrementTick+0xe6>
			xSwitchRequired = pdTRUE;
1a001b3c:	2401      	movs	r4, #1
}
1a001b3e:	4620      	mov	r0, r4
1a001b40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a001b42:	bf00      	nop
1a001b44:	1000295c 	.word	0x1000295c
1a001b48:	100029d8 	.word	0x100029d8
1a001b4c:	100028bc 	.word	0x100028bc
1a001b50:	100028c0 	.word	0x100028c0
1a001b54:	10002994 	.word	0x10002994
1a001b58:	10002990 	.word	0x10002990
1a001b5c:	100028b8 	.word	0x100028b8
1a001b60:	100028c4 	.word	0x100028c4
1a001b64:	10002964 	.word	0x10002964
1a001b68:	10002958 	.word	0x10002958
1a001b6c:	100029dc 	.word	0x100029dc

1a001b70 <xTaskResumeAll>:
{
1a001b70:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
1a001b72:	4b35      	ldr	r3, [pc, #212]	; (1a001c48 <xTaskResumeAll+0xd8>)
1a001b74:	681b      	ldr	r3, [r3, #0]
1a001b76:	b943      	cbnz	r3, 1a001b8a <xTaskResumeAll+0x1a>
1a001b78:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001b7c:	f383 8811 	msr	BASEPRI, r3
1a001b80:	f3bf 8f6f 	isb	sy
1a001b84:	f3bf 8f4f 	dsb	sy
1a001b88:	e7fe      	b.n	1a001b88 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
1a001b8a:	f000 fd83 	bl	1a002694 <vPortEnterCritical>
		--uxSchedulerSuspended;
1a001b8e:	4b2e      	ldr	r3, [pc, #184]	; (1a001c48 <xTaskResumeAll+0xd8>)
1a001b90:	681a      	ldr	r2, [r3, #0]
1a001b92:	3a01      	subs	r2, #1
1a001b94:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001b96:	681b      	ldr	r3, [r3, #0]
1a001b98:	2b00      	cmp	r3, #0
1a001b9a:	d14d      	bne.n	1a001c38 <xTaskResumeAll+0xc8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
1a001b9c:	4b2b      	ldr	r3, [pc, #172]	; (1a001c4c <xTaskResumeAll+0xdc>)
1a001b9e:	681b      	ldr	r3, [r3, #0]
1a001ba0:	b90b      	cbnz	r3, 1a001ba6 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
1a001ba2:	2400      	movs	r4, #0
1a001ba4:	e049      	b.n	1a001c3a <xTaskResumeAll+0xca>
TCB_t *pxTCB = NULL;
1a001ba6:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
1a001ba8:	4b29      	ldr	r3, [pc, #164]	; (1a001c50 <xTaskResumeAll+0xe0>)
1a001baa:	681b      	ldr	r3, [r3, #0]
1a001bac:	b31b      	cbz	r3, 1a001bf6 <xTaskResumeAll+0x86>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
1a001bae:	4b28      	ldr	r3, [pc, #160]	; (1a001c50 <xTaskResumeAll+0xe0>)
1a001bb0:	68db      	ldr	r3, [r3, #12]
1a001bb2:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a001bb4:	f104 0018 	add.w	r0, r4, #24
1a001bb8:	f7ff fc32 	bl	1a001420 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a001bbc:	1d25      	adds	r5, r4, #4
1a001bbe:	4628      	mov	r0, r5
1a001bc0:	f7ff fc2e 	bl	1a001420 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a001bc4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001bc6:	2201      	movs	r2, #1
1a001bc8:	409a      	lsls	r2, r3
1a001bca:	4922      	ldr	r1, [pc, #136]	; (1a001c54 <xTaskResumeAll+0xe4>)
1a001bcc:	6808      	ldr	r0, [r1, #0]
1a001bce:	4302      	orrs	r2, r0
1a001bd0:	600a      	str	r2, [r1, #0]
1a001bd2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001bd6:	009a      	lsls	r2, r3, #2
1a001bd8:	4629      	mov	r1, r5
1a001bda:	481f      	ldr	r0, [pc, #124]	; (1a001c58 <xTaskResumeAll+0xe8>)
1a001bdc:	4410      	add	r0, r2
1a001bde:	f7ff fbfa 	bl	1a0013d6 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a001be2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a001be4:	4b1d      	ldr	r3, [pc, #116]	; (1a001c5c <xTaskResumeAll+0xec>)
1a001be6:	681b      	ldr	r3, [r3, #0]
1a001be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001bea:	429a      	cmp	r2, r3
1a001bec:	d3dc      	bcc.n	1a001ba8 <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
1a001bee:	4b1c      	ldr	r3, [pc, #112]	; (1a001c60 <xTaskResumeAll+0xf0>)
1a001bf0:	2201      	movs	r2, #1
1a001bf2:	601a      	str	r2, [r3, #0]
1a001bf4:	e7d8      	b.n	1a001ba8 <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
1a001bf6:	b10c      	cbz	r4, 1a001bfc <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
1a001bf8:	f7ff fc70 	bl	1a0014dc <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
1a001bfc:	4b19      	ldr	r3, [pc, #100]	; (1a001c64 <xTaskResumeAll+0xf4>)
1a001bfe:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
1a001c00:	b974      	cbnz	r4, 1a001c20 <xTaskResumeAll+0xb0>
				if( xYieldPending != pdFALSE )
1a001c02:	4b17      	ldr	r3, [pc, #92]	; (1a001c60 <xTaskResumeAll+0xf0>)
1a001c04:	681b      	ldr	r3, [r3, #0]
1a001c06:	b1e3      	cbz	r3, 1a001c42 <xTaskResumeAll+0xd2>
					taskYIELD_IF_USING_PREEMPTION();
1a001c08:	4b17      	ldr	r3, [pc, #92]	; (1a001c68 <xTaskResumeAll+0xf8>)
1a001c0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001c0e:	601a      	str	r2, [r3, #0]
1a001c10:	f3bf 8f4f 	dsb	sy
1a001c14:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
1a001c18:	2401      	movs	r4, #1
1a001c1a:	e00e      	b.n	1a001c3a <xTaskResumeAll+0xca>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
1a001c1c:	3c01      	subs	r4, #1
1a001c1e:	d007      	beq.n	1a001c30 <xTaskResumeAll+0xc0>
							if( xTaskIncrementTick() != pdFALSE )
1a001c20:	f7ff ff1a 	bl	1a001a58 <xTaskIncrementTick>
1a001c24:	2800      	cmp	r0, #0
1a001c26:	d0f9      	beq.n	1a001c1c <xTaskResumeAll+0xac>
								xYieldPending = pdTRUE;
1a001c28:	4b0d      	ldr	r3, [pc, #52]	; (1a001c60 <xTaskResumeAll+0xf0>)
1a001c2a:	2201      	movs	r2, #1
1a001c2c:	601a      	str	r2, [r3, #0]
1a001c2e:	e7f5      	b.n	1a001c1c <xTaskResumeAll+0xac>
						uxPendedTicks = 0;
1a001c30:	4b0c      	ldr	r3, [pc, #48]	; (1a001c64 <xTaskResumeAll+0xf4>)
1a001c32:	2200      	movs	r2, #0
1a001c34:	601a      	str	r2, [r3, #0]
1a001c36:	e7e4      	b.n	1a001c02 <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
1a001c38:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a001c3a:	f000 fd4d 	bl	1a0026d8 <vPortExitCritical>
}
1a001c3e:	4620      	mov	r0, r4
1a001c40:	bd38      	pop	{r3, r4, r5, pc}
BaseType_t xAlreadyYielded = pdFALSE;
1a001c42:	2400      	movs	r4, #0
1a001c44:	e7f9      	b.n	1a001c3a <xTaskResumeAll+0xca>
1a001c46:	bf00      	nop
1a001c48:	1000295c 	.word	0x1000295c
1a001c4c:	10002950 	.word	0x10002950
1a001c50:	10002998 	.word	0x10002998
1a001c54:	10002964 	.word	0x10002964
1a001c58:	100028c4 	.word	0x100028c4
1a001c5c:	100028b8 	.word	0x100028b8
1a001c60:	100029dc 	.word	0x100029dc
1a001c64:	10002958 	.word	0x10002958
1a001c68:	e000ed04 	.word	0xe000ed04

1a001c6c <vTaskDelay>:
	{
1a001c6c:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
1a001c6e:	b1a8      	cbz	r0, 1a001c9c <vTaskDelay+0x30>
1a001c70:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
1a001c72:	4b0f      	ldr	r3, [pc, #60]	; (1a001cb0 <vTaskDelay+0x44>)
1a001c74:	681b      	ldr	r3, [r3, #0]
1a001c76:	b143      	cbz	r3, 1a001c8a <vTaskDelay+0x1e>
1a001c78:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001c7c:	f383 8811 	msr	BASEPRI, r3
1a001c80:	f3bf 8f6f 	isb	sy
1a001c84:	f3bf 8f4f 	dsb	sy
1a001c88:	e7fe      	b.n	1a001c88 <vTaskDelay+0x1c>
			vTaskSuspendAll();
1a001c8a:	f7ff fed7 	bl	1a001a3c <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1a001c8e:	2100      	movs	r1, #0
1a001c90:	4620      	mov	r0, r4
1a001c92:	f7ff fd61 	bl	1a001758 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
1a001c96:	f7ff ff6b 	bl	1a001b70 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
1a001c9a:	b938      	cbnz	r0, 1a001cac <vTaskDelay+0x40>
			portYIELD_WITHIN_API();
1a001c9c:	4b05      	ldr	r3, [pc, #20]	; (1a001cb4 <vTaskDelay+0x48>)
1a001c9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001ca2:	601a      	str	r2, [r3, #0]
1a001ca4:	f3bf 8f4f 	dsb	sy
1a001ca8:	f3bf 8f6f 	isb	sy
	}
1a001cac:	bd10      	pop	{r4, pc}
1a001cae:	bf00      	nop
1a001cb0:	1000295c 	.word	0x1000295c
1a001cb4:	e000ed04 	.word	0xe000ed04

1a001cb8 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
1a001cb8:	4b2d      	ldr	r3, [pc, #180]	; (1a001d70 <vTaskSwitchContext+0xb8>)
1a001cba:	681b      	ldr	r3, [r3, #0]
1a001cbc:	b11b      	cbz	r3, 1a001cc6 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
1a001cbe:	4b2d      	ldr	r3, [pc, #180]	; (1a001d74 <vTaskSwitchContext+0xbc>)
1a001cc0:	2201      	movs	r2, #1
1a001cc2:	601a      	str	r2, [r3, #0]
1a001cc4:	4770      	bx	lr
{
1a001cc6:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
1a001cc8:	4b2a      	ldr	r3, [pc, #168]	; (1a001d74 <vTaskSwitchContext+0xbc>)
1a001cca:	2200      	movs	r2, #0
1a001ccc:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
1a001cce:	4b2a      	ldr	r3, [pc, #168]	; (1a001d78 <vTaskSwitchContext+0xc0>)
1a001cd0:	681b      	ldr	r3, [r3, #0]
1a001cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a001cd4:	681a      	ldr	r2, [r3, #0]
1a001cd6:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a001cda:	d103      	bne.n	1a001ce4 <vTaskSwitchContext+0x2c>
1a001cdc:	685a      	ldr	r2, [r3, #4]
1a001cde:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a001ce2:	d01b      	beq.n	1a001d1c <vTaskSwitchContext+0x64>
1a001ce4:	4b24      	ldr	r3, [pc, #144]	; (1a001d78 <vTaskSwitchContext+0xc0>)
1a001ce6:	6818      	ldr	r0, [r3, #0]
1a001ce8:	6819      	ldr	r1, [r3, #0]
1a001cea:	3134      	adds	r1, #52	; 0x34
1a001cec:	f7ff fbe8 	bl	1a0014c0 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a001cf0:	4b22      	ldr	r3, [pc, #136]	; (1a001d7c <vTaskSwitchContext+0xc4>)
1a001cf2:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
1a001cf4:	fab3 f383 	clz	r3, r3
1a001cf8:	b2db      	uxtb	r3, r3
1a001cfa:	f1c3 031f 	rsb	r3, r3, #31
1a001cfe:	eb03 0183 	add.w	r1, r3, r3, lsl #2
1a001d02:	008a      	lsls	r2, r1, #2
1a001d04:	491e      	ldr	r1, [pc, #120]	; (1a001d80 <vTaskSwitchContext+0xc8>)
1a001d06:	588a      	ldr	r2, [r1, r2]
1a001d08:	b98a      	cbnz	r2, 1a001d2e <vTaskSwitchContext+0x76>
	__asm volatile
1a001d0a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001d0e:	f383 8811 	msr	BASEPRI, r3
1a001d12:	f3bf 8f6f 	isb	sy
1a001d16:	f3bf 8f4f 	dsb	sy
1a001d1a:	e7fe      	b.n	1a001d1a <vTaskSwitchContext+0x62>
		taskCHECK_FOR_STACK_OVERFLOW();
1a001d1c:	689a      	ldr	r2, [r3, #8]
1a001d1e:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a001d22:	d1df      	bne.n	1a001ce4 <vTaskSwitchContext+0x2c>
1a001d24:	68db      	ldr	r3, [r3, #12]
1a001d26:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
1a001d2a:	d1db      	bne.n	1a001ce4 <vTaskSwitchContext+0x2c>
1a001d2c:	e7e0      	b.n	1a001cf0 <vTaskSwitchContext+0x38>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a001d2e:	4814      	ldr	r0, [pc, #80]	; (1a001d80 <vTaskSwitchContext+0xc8>)
1a001d30:	009a      	lsls	r2, r3, #2
1a001d32:	18d4      	adds	r4, r2, r3
1a001d34:	00a1      	lsls	r1, r4, #2
1a001d36:	4401      	add	r1, r0
1a001d38:	684c      	ldr	r4, [r1, #4]
1a001d3a:	6864      	ldr	r4, [r4, #4]
1a001d3c:	604c      	str	r4, [r1, #4]
1a001d3e:	441a      	add	r2, r3
1a001d40:	0091      	lsls	r1, r2, #2
1a001d42:	3108      	adds	r1, #8
1a001d44:	4408      	add	r0, r1
1a001d46:	4284      	cmp	r4, r0
1a001d48:	d009      	beq.n	1a001d5e <vTaskSwitchContext+0xa6>
1a001d4a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001d4e:	009a      	lsls	r2, r3, #2
1a001d50:	4b0b      	ldr	r3, [pc, #44]	; (1a001d80 <vTaskSwitchContext+0xc8>)
1a001d52:	4413      	add	r3, r2
1a001d54:	685b      	ldr	r3, [r3, #4]
1a001d56:	68da      	ldr	r2, [r3, #12]
1a001d58:	4b07      	ldr	r3, [pc, #28]	; (1a001d78 <vTaskSwitchContext+0xc0>)
1a001d5a:	601a      	str	r2, [r3, #0]
}
1a001d5c:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a001d5e:	6860      	ldr	r0, [r4, #4]
1a001d60:	eb03 0283 	add.w	r2, r3, r3, lsl #2
1a001d64:	0091      	lsls	r1, r2, #2
1a001d66:	4a06      	ldr	r2, [pc, #24]	; (1a001d80 <vTaskSwitchContext+0xc8>)
1a001d68:	440a      	add	r2, r1
1a001d6a:	6050      	str	r0, [r2, #4]
1a001d6c:	e7ed      	b.n	1a001d4a <vTaskSwitchContext+0x92>
1a001d6e:	bf00      	nop
1a001d70:	1000295c 	.word	0x1000295c
1a001d74:	100029dc 	.word	0x100029dc
1a001d78:	100028b8 	.word	0x100028b8
1a001d7c:	10002964 	.word	0x10002964
1a001d80:	100028c4 	.word	0x100028c4

1a001d84 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
1a001d84:	b158      	cbz	r0, 1a001d9e <vTaskPlaceOnEventList+0x1a>
{
1a001d86:	b510      	push	{r4, lr}
1a001d88:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a001d8a:	4b09      	ldr	r3, [pc, #36]	; (1a001db0 <vTaskPlaceOnEventList+0x2c>)
1a001d8c:	6819      	ldr	r1, [r3, #0]
1a001d8e:	3118      	adds	r1, #24
1a001d90:	f7ff fb2c 	bl	1a0013ec <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
1a001d94:	2101      	movs	r1, #1
1a001d96:	4620      	mov	r0, r4
1a001d98:	f7ff fcde 	bl	1a001758 <prvAddCurrentTaskToDelayedList>
}
1a001d9c:	bd10      	pop	{r4, pc}
1a001d9e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001da2:	f383 8811 	msr	BASEPRI, r3
1a001da6:	f3bf 8f6f 	isb	sy
1a001daa:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
1a001dae:	e7fe      	b.n	1a001dae <vTaskPlaceOnEventList+0x2a>
1a001db0:	100028b8 	.word	0x100028b8

1a001db4 <vTaskPlaceOnEventListRestricted>:
	{
1a001db4:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
1a001db6:	b170      	cbz	r0, 1a001dd6 <vTaskPlaceOnEventListRestricted+0x22>
1a001db8:	460c      	mov	r4, r1
1a001dba:	4615      	mov	r5, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a001dbc:	4a0a      	ldr	r2, [pc, #40]	; (1a001de8 <vTaskPlaceOnEventListRestricted+0x34>)
1a001dbe:	6811      	ldr	r1, [r2, #0]
1a001dc0:	3118      	adds	r1, #24
1a001dc2:	f7ff fb08 	bl	1a0013d6 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
1a001dc6:	b10d      	cbz	r5, 1a001dcc <vTaskPlaceOnEventListRestricted+0x18>
			xTicksToWait = portMAX_DELAY;
1a001dc8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
1a001dcc:	4629      	mov	r1, r5
1a001dce:	4620      	mov	r0, r4
1a001dd0:	f7ff fcc2 	bl	1a001758 <prvAddCurrentTaskToDelayedList>
	}
1a001dd4:	bd38      	pop	{r3, r4, r5, pc}
1a001dd6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001dda:	f383 8811 	msr	BASEPRI, r3
1a001dde:	f3bf 8f6f 	isb	sy
1a001de2:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
1a001de6:	e7fe      	b.n	1a001de6 <vTaskPlaceOnEventListRestricted+0x32>
1a001de8:	100028b8 	.word	0x100028b8

1a001dec <xTaskRemoveFromEventList>:
{
1a001dec:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
1a001dee:	68c3      	ldr	r3, [r0, #12]
1a001df0:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
1a001df2:	b324      	cbz	r4, 1a001e3e <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
1a001df4:	f104 0518 	add.w	r5, r4, #24
1a001df8:	4628      	mov	r0, r5
1a001dfa:	f7ff fb11 	bl	1a001420 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001dfe:	4b18      	ldr	r3, [pc, #96]	; (1a001e60 <xTaskRemoveFromEventList+0x74>)
1a001e00:	681b      	ldr	r3, [r3, #0]
1a001e02:	bb2b      	cbnz	r3, 1a001e50 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
1a001e04:	1d25      	adds	r5, r4, #4
1a001e06:	4628      	mov	r0, r5
1a001e08:	f7ff fb0a 	bl	1a001420 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
1a001e0c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001e0e:	2201      	movs	r2, #1
1a001e10:	409a      	lsls	r2, r3
1a001e12:	4914      	ldr	r1, [pc, #80]	; (1a001e64 <xTaskRemoveFromEventList+0x78>)
1a001e14:	6808      	ldr	r0, [r1, #0]
1a001e16:	4302      	orrs	r2, r0
1a001e18:	600a      	str	r2, [r1, #0]
1a001e1a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001e1e:	009a      	lsls	r2, r3, #2
1a001e20:	4629      	mov	r1, r5
1a001e22:	4811      	ldr	r0, [pc, #68]	; (1a001e68 <xTaskRemoveFromEventList+0x7c>)
1a001e24:	4410      	add	r0, r2
1a001e26:	f7ff fad6 	bl	1a0013d6 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
1a001e2a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a001e2c:	4b0f      	ldr	r3, [pc, #60]	; (1a001e6c <xTaskRemoveFromEventList+0x80>)
1a001e2e:	681b      	ldr	r3, [r3, #0]
1a001e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001e32:	429a      	cmp	r2, r3
1a001e34:	d911      	bls.n	1a001e5a <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
1a001e36:	2001      	movs	r0, #1
1a001e38:	4b0d      	ldr	r3, [pc, #52]	; (1a001e70 <xTaskRemoveFromEventList+0x84>)
1a001e3a:	6018      	str	r0, [r3, #0]
1a001e3c:	e00e      	b.n	1a001e5c <xTaskRemoveFromEventList+0x70>
1a001e3e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001e42:	f383 8811 	msr	BASEPRI, r3
1a001e46:	f3bf 8f6f 	isb	sy
1a001e4a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
1a001e4e:	e7fe      	b.n	1a001e4e <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
1a001e50:	4629      	mov	r1, r5
1a001e52:	4808      	ldr	r0, [pc, #32]	; (1a001e74 <xTaskRemoveFromEventList+0x88>)
1a001e54:	f7ff fabf 	bl	1a0013d6 <vListInsertEnd>
1a001e58:	e7e7      	b.n	1a001e2a <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
1a001e5a:	2000      	movs	r0, #0
}
1a001e5c:	bd38      	pop	{r3, r4, r5, pc}
1a001e5e:	bf00      	nop
1a001e60:	1000295c 	.word	0x1000295c
1a001e64:	10002964 	.word	0x10002964
1a001e68:	100028c4 	.word	0x100028c4
1a001e6c:	100028b8 	.word	0x100028b8
1a001e70:	100029dc 	.word	0x100029dc
1a001e74:	10002998 	.word	0x10002998

1a001e78 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
1a001e78:	4b03      	ldr	r3, [pc, #12]	; (1a001e88 <vTaskInternalSetTimeOutState+0x10>)
1a001e7a:	681b      	ldr	r3, [r3, #0]
1a001e7c:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
1a001e7e:	4b03      	ldr	r3, [pc, #12]	; (1a001e8c <vTaskInternalSetTimeOutState+0x14>)
1a001e80:	681b      	ldr	r3, [r3, #0]
1a001e82:	6043      	str	r3, [r0, #4]
}
1a001e84:	4770      	bx	lr
1a001e86:	bf00      	nop
1a001e88:	10002994 	.word	0x10002994
1a001e8c:	100029d8 	.word	0x100029d8

1a001e90 <xTaskCheckForTimeOut>:
{
1a001e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
1a001e92:	b1c8      	cbz	r0, 1a001ec8 <xTaskCheckForTimeOut+0x38>
1a001e94:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
1a001e96:	b301      	cbz	r1, 1a001eda <xTaskCheckForTimeOut+0x4a>
1a001e98:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
1a001e9a:	f000 fbfb 	bl	1a002694 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
1a001e9e:	4b1b      	ldr	r3, [pc, #108]	; (1a001f0c <xTaskCheckForTimeOut+0x7c>)
1a001ea0:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
1a001ea2:	686b      	ldr	r3, [r5, #4]
1a001ea4:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
1a001ea6:	6822      	ldr	r2, [r4, #0]
1a001ea8:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
1a001eac:	d026      	beq.n	1a001efc <xTaskCheckForTimeOut+0x6c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
1a001eae:	682f      	ldr	r7, [r5, #0]
1a001eb0:	4e17      	ldr	r6, [pc, #92]	; (1a001f10 <xTaskCheckForTimeOut+0x80>)
1a001eb2:	6836      	ldr	r6, [r6, #0]
1a001eb4:	42b7      	cmp	r7, r6
1a001eb6:	d001      	beq.n	1a001ebc <xTaskCheckForTimeOut+0x2c>
1a001eb8:	428b      	cmp	r3, r1
1a001eba:	d924      	bls.n	1a001f06 <xTaskCheckForTimeOut+0x76>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
1a001ebc:	4282      	cmp	r2, r0
1a001ebe:	d815      	bhi.n	1a001eec <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
1a001ec0:	2300      	movs	r3, #0
1a001ec2:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
1a001ec4:	2401      	movs	r4, #1
1a001ec6:	e01a      	b.n	1a001efe <xTaskCheckForTimeOut+0x6e>
1a001ec8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001ecc:	f383 8811 	msr	BASEPRI, r3
1a001ed0:	f3bf 8f6f 	isb	sy
1a001ed4:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
1a001ed8:	e7fe      	b.n	1a001ed8 <xTaskCheckForTimeOut+0x48>
1a001eda:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001ede:	f383 8811 	msr	BASEPRI, r3
1a001ee2:	f3bf 8f6f 	isb	sy
1a001ee6:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
1a001eea:	e7fe      	b.n	1a001eea <xTaskCheckForTimeOut+0x5a>
			*pxTicksToWait -= xElapsedTime;
1a001eec:	1a5b      	subs	r3, r3, r1
1a001eee:	4413      	add	r3, r2
1a001ef0:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
1a001ef2:	4628      	mov	r0, r5
1a001ef4:	f7ff ffc0 	bl	1a001e78 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
1a001ef8:	2400      	movs	r4, #0
1a001efa:	e000      	b.n	1a001efe <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
1a001efc:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a001efe:	f000 fbeb 	bl	1a0026d8 <vPortExitCritical>
}
1a001f02:	4620      	mov	r0, r4
1a001f04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdTRUE;
1a001f06:	2401      	movs	r4, #1
1a001f08:	e7f9      	b.n	1a001efe <xTaskCheckForTimeOut+0x6e>
1a001f0a:	bf00      	nop
1a001f0c:	100029d8 	.word	0x100029d8
1a001f10:	10002994 	.word	0x10002994

1a001f14 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
1a001f14:	4b01      	ldr	r3, [pc, #4]	; (1a001f1c <vTaskMissedYield+0x8>)
1a001f16:	2201      	movs	r2, #1
1a001f18:	601a      	str	r2, [r3, #0]
}
1a001f1a:	4770      	bx	lr
1a001f1c:	100029dc 	.word	0x100029dc

1a001f20 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
1a001f20:	4b05      	ldr	r3, [pc, #20]	; (1a001f38 <xTaskGetSchedulerState+0x18>)
1a001f22:	681b      	ldr	r3, [r3, #0]
1a001f24:	b133      	cbz	r3, 1a001f34 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001f26:	4b05      	ldr	r3, [pc, #20]	; (1a001f3c <xTaskGetSchedulerState+0x1c>)
1a001f28:	681b      	ldr	r3, [r3, #0]
1a001f2a:	b10b      	cbz	r3, 1a001f30 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
1a001f2c:	2000      	movs	r0, #0
	}
1a001f2e:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
1a001f30:	2002      	movs	r0, #2
1a001f32:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
1a001f34:	2001      	movs	r0, #1
1a001f36:	4770      	bx	lr
1a001f38:	100029ac 	.word	0x100029ac
1a001f3c:	1000295c 	.word	0x1000295c

1a001f40 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
1a001f40:	2800      	cmp	r0, #0
1a001f42:	d050      	beq.n	1a001fe6 <xTaskPriorityInherit+0xa6>
	{
1a001f44:	b538      	push	{r3, r4, r5, lr}
1a001f46:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
1a001f48:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
1a001f4a:	4929      	ldr	r1, [pc, #164]	; (1a001ff0 <xTaskPriorityInherit+0xb0>)
1a001f4c:	6809      	ldr	r1, [r1, #0]
1a001f4e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
1a001f50:	428a      	cmp	r2, r1
1a001f52:	d240      	bcs.n	1a001fd6 <xTaskPriorityInherit+0x96>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
1a001f54:	6981      	ldr	r1, [r0, #24]
1a001f56:	2900      	cmp	r1, #0
1a001f58:	db05      	blt.n	1a001f66 <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001f5a:	4925      	ldr	r1, [pc, #148]	; (1a001ff0 <xTaskPriorityInherit+0xb0>)
1a001f5c:	6809      	ldr	r1, [r1, #0]
1a001f5e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
1a001f60:	f1c1 0107 	rsb	r1, r1, #7
1a001f64:	6181      	str	r1, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
1a001f66:	6960      	ldr	r0, [r4, #20]
1a001f68:	eb02 0282 	add.w	r2, r2, r2, lsl #2
1a001f6c:	0091      	lsls	r1, r2, #2
1a001f6e:	4a21      	ldr	r2, [pc, #132]	; (1a001ff4 <xTaskPriorityInherit+0xb4>)
1a001f70:	440a      	add	r2, r1
1a001f72:	4290      	cmp	r0, r2
1a001f74:	d005      	beq.n	1a001f82 <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
1a001f76:	4a1e      	ldr	r2, [pc, #120]	; (1a001ff0 <xTaskPriorityInherit+0xb0>)
1a001f78:	6812      	ldr	r2, [r2, #0]
1a001f7a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
1a001f7c:	62e2      	str	r2, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
1a001f7e:	2001      	movs	r0, #1
	}
1a001f80:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a001f82:	1d25      	adds	r5, r4, #4
1a001f84:	4628      	mov	r0, r5
1a001f86:	f7ff fa4b 	bl	1a001420 <uxListRemove>
1a001f8a:	b1a0      	cbz	r0, 1a001fb6 <xTaskPriorityInherit+0x76>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
1a001f8c:	4b18      	ldr	r3, [pc, #96]	; (1a001ff0 <xTaskPriorityInherit+0xb0>)
1a001f8e:	681b      	ldr	r3, [r3, #0]
1a001f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001f92:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
1a001f94:	2401      	movs	r4, #1
1a001f96:	fa04 f203 	lsl.w	r2, r4, r3
1a001f9a:	4917      	ldr	r1, [pc, #92]	; (1a001ff8 <xTaskPriorityInherit+0xb8>)
1a001f9c:	6808      	ldr	r0, [r1, #0]
1a001f9e:	4302      	orrs	r2, r0
1a001fa0:	600a      	str	r2, [r1, #0]
1a001fa2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001fa6:	009a      	lsls	r2, r3, #2
1a001fa8:	4629      	mov	r1, r5
1a001faa:	4812      	ldr	r0, [pc, #72]	; (1a001ff4 <xTaskPriorityInherit+0xb4>)
1a001fac:	4410      	add	r0, r2
1a001fae:	f7ff fa12 	bl	1a0013d6 <vListInsertEnd>
				xReturn = pdTRUE;
1a001fb2:	4620      	mov	r0, r4
1a001fb4:	e7e4      	b.n	1a001f80 <xTaskPriorityInherit+0x40>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
1a001fb6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001fb8:	eb03 0183 	add.w	r1, r3, r3, lsl #2
1a001fbc:	008a      	lsls	r2, r1, #2
1a001fbe:	490d      	ldr	r1, [pc, #52]	; (1a001ff4 <xTaskPriorityInherit+0xb4>)
1a001fc0:	588a      	ldr	r2, [r1, r2]
1a001fc2:	2a00      	cmp	r2, #0
1a001fc4:	d1e2      	bne.n	1a001f8c <xTaskPriorityInherit+0x4c>
1a001fc6:	2201      	movs	r2, #1
1a001fc8:	409a      	lsls	r2, r3
1a001fca:	490b      	ldr	r1, [pc, #44]	; (1a001ff8 <xTaskPriorityInherit+0xb8>)
1a001fcc:	680b      	ldr	r3, [r1, #0]
1a001fce:	ea23 0302 	bic.w	r3, r3, r2
1a001fd2:	600b      	str	r3, [r1, #0]
1a001fd4:	e7da      	b.n	1a001f8c <xTaskPriorityInherit+0x4c>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
1a001fd6:	6d02      	ldr	r2, [r0, #80]	; 0x50
1a001fd8:	4b05      	ldr	r3, [pc, #20]	; (1a001ff0 <xTaskPriorityInherit+0xb0>)
1a001fda:	681b      	ldr	r3, [r3, #0]
1a001fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001fde:	429a      	cmp	r2, r3
1a001fe0:	d303      	bcc.n	1a001fea <xTaskPriorityInherit+0xaa>
	BaseType_t xReturn = pdFALSE;
1a001fe2:	2000      	movs	r0, #0
1a001fe4:	e7cc      	b.n	1a001f80 <xTaskPriorityInherit+0x40>
1a001fe6:	2000      	movs	r0, #0
	}
1a001fe8:	4770      	bx	lr
					xReturn = pdTRUE;
1a001fea:	2001      	movs	r0, #1
		return xReturn;
1a001fec:	e7c8      	b.n	1a001f80 <xTaskPriorityInherit+0x40>
1a001fee:	bf00      	nop
1a001ff0:	100028b8 	.word	0x100028b8
1a001ff4:	100028c4 	.word	0x100028c4
1a001ff8:	10002964 	.word	0x10002964

1a001ffc <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
1a001ffc:	2800      	cmp	r0, #0
1a001ffe:	d04c      	beq.n	1a00209a <xTaskPriorityDisinherit+0x9e>
	{
1a002000:	b538      	push	{r3, r4, r5, lr}
1a002002:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
1a002004:	4a27      	ldr	r2, [pc, #156]	; (1a0020a4 <xTaskPriorityDisinherit+0xa8>)
1a002006:	6812      	ldr	r2, [r2, #0]
1a002008:	4282      	cmp	r2, r0
1a00200a:	d008      	beq.n	1a00201e <xTaskPriorityDisinherit+0x22>
1a00200c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002010:	f383 8811 	msr	BASEPRI, r3
1a002014:	f3bf 8f6f 	isb	sy
1a002018:	f3bf 8f4f 	dsb	sy
1a00201c:	e7fe      	b.n	1a00201c <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
1a00201e:	6d42      	ldr	r2, [r0, #84]	; 0x54
1a002020:	b942      	cbnz	r2, 1a002034 <xTaskPriorityDisinherit+0x38>
1a002022:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002026:	f383 8811 	msr	BASEPRI, r3
1a00202a:	f3bf 8f6f 	isb	sy
1a00202e:	f3bf 8f4f 	dsb	sy
1a002032:	e7fe      	b.n	1a002032 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
1a002034:	3a01      	subs	r2, #1
1a002036:	6542      	str	r2, [r0, #84]	; 0x54
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
1a002038:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
1a00203a:	6d21      	ldr	r1, [r4, #80]	; 0x50
1a00203c:	4288      	cmp	r0, r1
1a00203e:	d02e      	beq.n	1a00209e <xTaskPriorityDisinherit+0xa2>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
1a002040:	b10a      	cbz	r2, 1a002046 <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
1a002042:	2000      	movs	r0, #0
	}
1a002044:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a002046:	1d25      	adds	r5, r4, #4
1a002048:	4628      	mov	r0, r5
1a00204a:	f7ff f9e9 	bl	1a001420 <uxListRemove>
1a00204e:	b970      	cbnz	r0, 1a00206e <xTaskPriorityDisinherit+0x72>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1a002050:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a002052:	eb02 0182 	add.w	r1, r2, r2, lsl #2
1a002056:	008b      	lsls	r3, r1, #2
1a002058:	4913      	ldr	r1, [pc, #76]	; (1a0020a8 <xTaskPriorityDisinherit+0xac>)
1a00205a:	58cb      	ldr	r3, [r1, r3]
1a00205c:	b93b      	cbnz	r3, 1a00206e <xTaskPriorityDisinherit+0x72>
1a00205e:	2301      	movs	r3, #1
1a002060:	fa03 f202 	lsl.w	r2, r3, r2
1a002064:	4911      	ldr	r1, [pc, #68]	; (1a0020ac <xTaskPriorityDisinherit+0xb0>)
1a002066:	680b      	ldr	r3, [r1, #0]
1a002068:	ea23 0302 	bic.w	r3, r3, r2
1a00206c:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
1a00206e:	6d23      	ldr	r3, [r4, #80]	; 0x50
1a002070:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a002072:	f1c3 0207 	rsb	r2, r3, #7
1a002076:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
1a002078:	2401      	movs	r4, #1
1a00207a:	fa04 f203 	lsl.w	r2, r4, r3
1a00207e:	490b      	ldr	r1, [pc, #44]	; (1a0020ac <xTaskPriorityDisinherit+0xb0>)
1a002080:	6808      	ldr	r0, [r1, #0]
1a002082:	4302      	orrs	r2, r0
1a002084:	600a      	str	r2, [r1, #0]
1a002086:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a00208a:	009a      	lsls	r2, r3, #2
1a00208c:	4629      	mov	r1, r5
1a00208e:	4806      	ldr	r0, [pc, #24]	; (1a0020a8 <xTaskPriorityDisinherit+0xac>)
1a002090:	4410      	add	r0, r2
1a002092:	f7ff f9a0 	bl	1a0013d6 <vListInsertEnd>
					xReturn = pdTRUE;
1a002096:	4620      	mov	r0, r4
1a002098:	e7d4      	b.n	1a002044 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
1a00209a:	2000      	movs	r0, #0
	}
1a00209c:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
1a00209e:	2000      	movs	r0, #0
1a0020a0:	e7d0      	b.n	1a002044 <xTaskPriorityDisinherit+0x48>
1a0020a2:	bf00      	nop
1a0020a4:	100028b8 	.word	0x100028b8
1a0020a8:	100028c4 	.word	0x100028c4
1a0020ac:	10002964 	.word	0x10002964

1a0020b0 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
1a0020b0:	2800      	cmp	r0, #0
1a0020b2:	d056      	beq.n	1a002162 <vTaskPriorityDisinheritAfterTimeout+0xb2>
	{
1a0020b4:	b538      	push	{r3, r4, r5, lr}
1a0020b6:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
1a0020b8:	6d40      	ldr	r0, [r0, #84]	; 0x54
1a0020ba:	b940      	cbnz	r0, 1a0020ce <vTaskPriorityDisinheritAfterTimeout+0x1e>
1a0020bc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0020c0:	f383 8811 	msr	BASEPRI, r3
1a0020c4:	f3bf 8f6f 	isb	sy
1a0020c8:	f3bf 8f4f 	dsb	sy
1a0020cc:	e7fe      	b.n	1a0020cc <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
1a0020ce:	6d22      	ldr	r2, [r4, #80]	; 0x50
1a0020d0:	428a      	cmp	r2, r1
1a0020d2:	d200      	bcs.n	1a0020d6 <vTaskPriorityDisinheritAfterTimeout+0x26>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
1a0020d4:	460a      	mov	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
1a0020d6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
1a0020d8:	4291      	cmp	r1, r2
1a0020da:	d001      	beq.n	1a0020e0 <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
1a0020dc:	2801      	cmp	r0, #1
1a0020de:	d000      	beq.n	1a0020e2 <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
1a0020e0:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
1a0020e2:	4820      	ldr	r0, [pc, #128]	; (1a002164 <vTaskPriorityDisinheritAfterTimeout+0xb4>)
1a0020e4:	6800      	ldr	r0, [r0, #0]
1a0020e6:	42a0      	cmp	r0, r4
1a0020e8:	d032      	beq.n	1a002150 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					pxTCB->uxPriority = uxPriorityToUse;
1a0020ea:	62e2      	str	r2, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
1a0020ec:	69a0      	ldr	r0, [r4, #24]
1a0020ee:	2800      	cmp	r0, #0
1a0020f0:	db02      	blt.n	1a0020f8 <vTaskPriorityDisinheritAfterTimeout+0x48>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0020f2:	f1c2 0207 	rsb	r2, r2, #7
1a0020f6:	61a2      	str	r2, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
1a0020f8:	6963      	ldr	r3, [r4, #20]
1a0020fa:	eb01 0181 	add.w	r1, r1, r1, lsl #2
1a0020fe:	0088      	lsls	r0, r1, #2
1a002100:	4a19      	ldr	r2, [pc, #100]	; (1a002168 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
1a002102:	4402      	add	r2, r0
1a002104:	4293      	cmp	r3, r2
1a002106:	d1eb      	bne.n	1a0020e0 <vTaskPriorityDisinheritAfterTimeout+0x30>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a002108:	1d25      	adds	r5, r4, #4
1a00210a:	4628      	mov	r0, r5
1a00210c:	f7ff f988 	bl	1a001420 <uxListRemove>
1a002110:	b970      	cbnz	r0, 1a002130 <vTaskPriorityDisinheritAfterTimeout+0x80>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1a002112:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a002114:	eb02 0182 	add.w	r1, r2, r2, lsl #2
1a002118:	008b      	lsls	r3, r1, #2
1a00211a:	4913      	ldr	r1, [pc, #76]	; (1a002168 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
1a00211c:	58cb      	ldr	r3, [r1, r3]
1a00211e:	b93b      	cbnz	r3, 1a002130 <vTaskPriorityDisinheritAfterTimeout+0x80>
1a002120:	2301      	movs	r3, #1
1a002122:	fa03 f202 	lsl.w	r2, r3, r2
1a002126:	4911      	ldr	r1, [pc, #68]	; (1a00216c <vTaskPriorityDisinheritAfterTimeout+0xbc>)
1a002128:	680b      	ldr	r3, [r1, #0]
1a00212a:	ea23 0302 	bic.w	r3, r3, r2
1a00212e:	600b      	str	r3, [r1, #0]
						prvAddTaskToReadyList( pxTCB );
1a002130:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a002132:	2201      	movs	r2, #1
1a002134:	409a      	lsls	r2, r3
1a002136:	490d      	ldr	r1, [pc, #52]	; (1a00216c <vTaskPriorityDisinheritAfterTimeout+0xbc>)
1a002138:	6808      	ldr	r0, [r1, #0]
1a00213a:	4302      	orrs	r2, r0
1a00213c:	600a      	str	r2, [r1, #0]
1a00213e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a002142:	009a      	lsls	r2, r3, #2
1a002144:	4629      	mov	r1, r5
1a002146:	4808      	ldr	r0, [pc, #32]	; (1a002168 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
1a002148:	4410      	add	r0, r2
1a00214a:	f7ff f944 	bl	1a0013d6 <vListInsertEnd>
	}
1a00214e:	e7c7      	b.n	1a0020e0 <vTaskPriorityDisinheritAfterTimeout+0x30>
1a002150:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002154:	f383 8811 	msr	BASEPRI, r3
1a002158:	f3bf 8f6f 	isb	sy
1a00215c:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
1a002160:	e7fe      	b.n	1a002160 <vTaskPriorityDisinheritAfterTimeout+0xb0>
1a002162:	4770      	bx	lr
1a002164:	100028b8 	.word	0x100028b8
1a002168:	100028c4 	.word	0x100028c4
1a00216c:	10002964 	.word	0x10002964

1a002170 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
1a002170:	4b05      	ldr	r3, [pc, #20]	; (1a002188 <pvTaskIncrementMutexHeldCount+0x18>)
1a002172:	681b      	ldr	r3, [r3, #0]
1a002174:	b123      	cbz	r3, 1a002180 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
1a002176:	4b04      	ldr	r3, [pc, #16]	; (1a002188 <pvTaskIncrementMutexHeldCount+0x18>)
1a002178:	681a      	ldr	r2, [r3, #0]
1a00217a:	6d53      	ldr	r3, [r2, #84]	; 0x54
1a00217c:	3301      	adds	r3, #1
1a00217e:	6553      	str	r3, [r2, #84]	; 0x54
		return pxCurrentTCB;
1a002180:	4b01      	ldr	r3, [pc, #4]	; (1a002188 <pvTaskIncrementMutexHeldCount+0x18>)
1a002182:	6818      	ldr	r0, [r3, #0]
	}
1a002184:	4770      	bx	lr
1a002186:	bf00      	nop
1a002188:	100028b8 	.word	0x100028b8

1a00218c <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
1a00218c:	4b06      	ldr	r3, [pc, #24]	; (1a0021a8 <prvGetNextExpireTime+0x1c>)
1a00218e:	681a      	ldr	r2, [r3, #0]
1a002190:	6813      	ldr	r3, [r2, #0]
1a002192:	fab3 f383 	clz	r3, r3
1a002196:	095b      	lsrs	r3, r3, #5
1a002198:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
1a00219a:	b913      	cbnz	r3, 1a0021a2 <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a00219c:	68d3      	ldr	r3, [r2, #12]
1a00219e:	6818      	ldr	r0, [r3, #0]
1a0021a0:	4770      	bx	lr
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
1a0021a2:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
1a0021a4:	4770      	bx	lr
1a0021a6:	bf00      	nop
1a0021a8:	100029e0 	.word	0x100029e0

1a0021ac <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
1a0021ac:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
1a0021ae:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a0021b0:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
1a0021b2:	4291      	cmp	r1, r2
1a0021b4:	d80c      	bhi.n	1a0021d0 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0021b6:	1ad2      	subs	r2, r2, r3
1a0021b8:	6983      	ldr	r3, [r0, #24]
1a0021ba:	429a      	cmp	r2, r3
1a0021bc:	d301      	bcc.n	1a0021c2 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
1a0021be:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
1a0021c0:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
1a0021c2:	1d01      	adds	r1, r0, #4
1a0021c4:	4b09      	ldr	r3, [pc, #36]	; (1a0021ec <prvInsertTimerInActiveList+0x40>)
1a0021c6:	6818      	ldr	r0, [r3, #0]
1a0021c8:	f7ff f910 	bl	1a0013ec <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a0021cc:	2000      	movs	r0, #0
1a0021ce:	e7f7      	b.n	1a0021c0 <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
1a0021d0:	429a      	cmp	r2, r3
1a0021d2:	d201      	bcs.n	1a0021d8 <prvInsertTimerInActiveList+0x2c>
1a0021d4:	4299      	cmp	r1, r3
1a0021d6:	d206      	bcs.n	1a0021e6 <prvInsertTimerInActiveList+0x3a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a0021d8:	1d01      	adds	r1, r0, #4
1a0021da:	4b05      	ldr	r3, [pc, #20]	; (1a0021f0 <prvInsertTimerInActiveList+0x44>)
1a0021dc:	6818      	ldr	r0, [r3, #0]
1a0021de:	f7ff f905 	bl	1a0013ec <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a0021e2:	2000      	movs	r0, #0
1a0021e4:	e7ec      	b.n	1a0021c0 <prvInsertTimerInActiveList+0x14>
			xProcessTimerNow = pdTRUE;
1a0021e6:	2001      	movs	r0, #1
	return xProcessTimerNow;
1a0021e8:	e7ea      	b.n	1a0021c0 <prvInsertTimerInActiveList+0x14>
1a0021ea:	bf00      	nop
1a0021ec:	100029e4 	.word	0x100029e4
1a0021f0:	100029e0 	.word	0x100029e0

1a0021f4 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
1a0021f4:	b530      	push	{r4, r5, lr}
1a0021f6:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
1a0021f8:	f000 fa4c 	bl	1a002694 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
1a0021fc:	4b11      	ldr	r3, [pc, #68]	; (1a002244 <prvCheckForValidListAndQueue+0x50>)
1a0021fe:	681b      	ldr	r3, [r3, #0]
1a002200:	b11b      	cbz	r3, 1a00220a <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
1a002202:	f000 fa69 	bl	1a0026d8 <vPortExitCritical>
}
1a002206:	b003      	add	sp, #12
1a002208:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
1a00220a:	4d0f      	ldr	r5, [pc, #60]	; (1a002248 <prvCheckForValidListAndQueue+0x54>)
1a00220c:	4628      	mov	r0, r5
1a00220e:	f7ff f8d4 	bl	1a0013ba <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
1a002212:	4c0e      	ldr	r4, [pc, #56]	; (1a00224c <prvCheckForValidListAndQueue+0x58>)
1a002214:	4620      	mov	r0, r4
1a002216:	f7ff f8d0 	bl	1a0013ba <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
1a00221a:	4b0d      	ldr	r3, [pc, #52]	; (1a002250 <prvCheckForValidListAndQueue+0x5c>)
1a00221c:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
1a00221e:	4b0d      	ldr	r3, [pc, #52]	; (1a002254 <prvCheckForValidListAndQueue+0x60>)
1a002220:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
1a002222:	2300      	movs	r3, #0
1a002224:	9300      	str	r3, [sp, #0]
1a002226:	4b0c      	ldr	r3, [pc, #48]	; (1a002258 <prvCheckForValidListAndQueue+0x64>)
1a002228:	4a0c      	ldr	r2, [pc, #48]	; (1a00225c <prvCheckForValidListAndQueue+0x68>)
1a00222a:	2110      	movs	r1, #16
1a00222c:	200a      	movs	r0, #10
1a00222e:	f7fe fd58 	bl	1a000ce2 <xQueueGenericCreateStatic>
1a002232:	4b04      	ldr	r3, [pc, #16]	; (1a002244 <prvCheckForValidListAndQueue+0x50>)
1a002234:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
1a002236:	2800      	cmp	r0, #0
1a002238:	d0e3      	beq.n	1a002202 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
1a00223a:	4909      	ldr	r1, [pc, #36]	; (1a002260 <prvCheckForValidListAndQueue+0x6c>)
1a00223c:	f7ff f880 	bl	1a001340 <vQueueAddToRegistry>
1a002240:	e7df      	b.n	1a002202 <prvCheckForValidListAndQueue+0xe>
1a002242:	bf00      	nop
1a002244:	10002b04 	.word	0x10002b04
1a002248:	10002a88 	.word	0x10002a88
1a00224c:	10002a9c 	.word	0x10002a9c
1a002250:	100029e0 	.word	0x100029e0
1a002254:	100029e4 	.word	0x100029e4
1a002258:	10002ab4 	.word	0x10002ab4
1a00225c:	100029e8 	.word	0x100029e8
1a002260:	1a005530 	.word	0x1a005530

1a002264 <xTimerCreateTimerTask>:
{
1a002264:	b510      	push	{r4, lr}
1a002266:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
1a002268:	f7ff ffc4 	bl	1a0021f4 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
1a00226c:	4b12      	ldr	r3, [pc, #72]	; (1a0022b8 <xTimerCreateTimerTask+0x54>)
1a00226e:	681b      	ldr	r3, [r3, #0]
1a002270:	b1cb      	cbz	r3, 1a0022a6 <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
1a002272:	2400      	movs	r4, #0
1a002274:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
1a002276:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
1a002278:	aa07      	add	r2, sp, #28
1a00227a:	a906      	add	r1, sp, #24
1a00227c:	a805      	add	r0, sp, #20
1a00227e:	f7ff f8ef 	bl	1a001460 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
1a002282:	9b05      	ldr	r3, [sp, #20]
1a002284:	9302      	str	r3, [sp, #8]
1a002286:	9b06      	ldr	r3, [sp, #24]
1a002288:	9301      	str	r3, [sp, #4]
1a00228a:	2304      	movs	r3, #4
1a00228c:	9300      	str	r3, [sp, #0]
1a00228e:	4623      	mov	r3, r4
1a002290:	9a07      	ldr	r2, [sp, #28]
1a002292:	490a      	ldr	r1, [pc, #40]	; (1a0022bc <xTimerCreateTimerTask+0x58>)
1a002294:	480a      	ldr	r0, [pc, #40]	; (1a0022c0 <xTimerCreateTimerTask+0x5c>)
1a002296:	f7ff faab 	bl	1a0017f0 <xTaskCreateStatic>
1a00229a:	4b0a      	ldr	r3, [pc, #40]	; (1a0022c4 <xTimerCreateTimerTask+0x60>)
1a00229c:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
1a00229e:	b110      	cbz	r0, 1a0022a6 <xTimerCreateTimerTask+0x42>
}
1a0022a0:	2001      	movs	r0, #1
1a0022a2:	b008      	add	sp, #32
1a0022a4:	bd10      	pop	{r4, pc}
1a0022a6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0022aa:	f383 8811 	msr	BASEPRI, r3
1a0022ae:	f3bf 8f6f 	isb	sy
1a0022b2:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
1a0022b6:	e7fe      	b.n	1a0022b6 <xTimerCreateTimerTask+0x52>
1a0022b8:	10002b04 	.word	0x10002b04
1a0022bc:	1a005538 	.word	0x1a005538
1a0022c0:	1a0025a9 	.word	0x1a0025a9
1a0022c4:	10002b08 	.word	0x10002b08

1a0022c8 <xTimerGenericCommand>:
	configASSERT( xTimer );
1a0022c8:	b1c0      	cbz	r0, 1a0022fc <xTimerGenericCommand+0x34>
{
1a0022ca:	b530      	push	{r4, r5, lr}
1a0022cc:	b085      	sub	sp, #20
1a0022ce:	4615      	mov	r5, r2
1a0022d0:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
1a0022d2:	4a17      	ldr	r2, [pc, #92]	; (1a002330 <xTimerGenericCommand+0x68>)
1a0022d4:	6810      	ldr	r0, [r2, #0]
1a0022d6:	b340      	cbz	r0, 1a00232a <xTimerGenericCommand+0x62>
1a0022d8:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
1a0022da:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
1a0022dc:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
1a0022de:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
1a0022e0:	2905      	cmp	r1, #5
1a0022e2:	dc1c      	bgt.n	1a00231e <xTimerGenericCommand+0x56>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
1a0022e4:	f7ff fe1c 	bl	1a001f20 <xTaskGetSchedulerState>
1a0022e8:	2802      	cmp	r0, #2
1a0022ea:	d010      	beq.n	1a00230e <xTimerGenericCommand+0x46>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
1a0022ec:	2300      	movs	r3, #0
1a0022ee:	461a      	mov	r2, r3
1a0022f0:	4669      	mov	r1, sp
1a0022f2:	480f      	ldr	r0, [pc, #60]	; (1a002330 <xTimerGenericCommand+0x68>)
1a0022f4:	6800      	ldr	r0, [r0, #0]
1a0022f6:	f7fe fd65 	bl	1a000dc4 <xQueueGenericSend>
1a0022fa:	e014      	b.n	1a002326 <xTimerGenericCommand+0x5e>
1a0022fc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002300:	f383 8811 	msr	BASEPRI, r3
1a002304:	f3bf 8f6f 	isb	sy
1a002308:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
1a00230c:	e7fe      	b.n	1a00230c <xTimerGenericCommand+0x44>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
1a00230e:	2300      	movs	r3, #0
1a002310:	9a08      	ldr	r2, [sp, #32]
1a002312:	4669      	mov	r1, sp
1a002314:	4806      	ldr	r0, [pc, #24]	; (1a002330 <xTimerGenericCommand+0x68>)
1a002316:	6800      	ldr	r0, [r0, #0]
1a002318:	f7fe fd54 	bl	1a000dc4 <xQueueGenericSend>
1a00231c:	e003      	b.n	1a002326 <xTimerGenericCommand+0x5e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
1a00231e:	2300      	movs	r3, #0
1a002320:	4669      	mov	r1, sp
1a002322:	f7fe fe26 	bl	1a000f72 <xQueueGenericSendFromISR>
}
1a002326:	b005      	add	sp, #20
1a002328:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
1a00232a:	2000      	movs	r0, #0
	return xReturn;
1a00232c:	e7fb      	b.n	1a002326 <xTimerGenericCommand+0x5e>
1a00232e:	bf00      	nop
1a002330:	10002b04 	.word	0x10002b04

1a002334 <prvSwitchTimerLists>:
{
1a002334:	b570      	push	{r4, r5, r6, lr}
1a002336:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
1a002338:	4b1a      	ldr	r3, [pc, #104]	; (1a0023a4 <prvSwitchTimerLists+0x70>)
1a00233a:	681b      	ldr	r3, [r3, #0]
1a00233c:	681a      	ldr	r2, [r3, #0]
1a00233e:	b352      	cbz	r2, 1a002396 <prvSwitchTimerLists+0x62>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a002340:	68db      	ldr	r3, [r3, #12]
1a002342:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a002344:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a002346:	1d25      	adds	r5, r4, #4
1a002348:	4628      	mov	r0, r5
1a00234a:	f7ff f869 	bl	1a001420 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a00234e:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a002350:	4620      	mov	r0, r4
1a002352:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a002354:	69e3      	ldr	r3, [r4, #28]
1a002356:	2b01      	cmp	r3, #1
1a002358:	d1ee      	bne.n	1a002338 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
1a00235a:	69a3      	ldr	r3, [r4, #24]
1a00235c:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
1a00235e:	429e      	cmp	r6, r3
1a002360:	d207      	bcs.n	1a002372 <prvSwitchTimerLists+0x3e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
1a002362:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a002364:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a002366:	4629      	mov	r1, r5
1a002368:	4b0e      	ldr	r3, [pc, #56]	; (1a0023a4 <prvSwitchTimerLists+0x70>)
1a00236a:	6818      	ldr	r0, [r3, #0]
1a00236c:	f7ff f83e 	bl	1a0013ec <vListInsert>
1a002370:	e7e2      	b.n	1a002338 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a002372:	2100      	movs	r1, #0
1a002374:	9100      	str	r1, [sp, #0]
1a002376:	460b      	mov	r3, r1
1a002378:	4632      	mov	r2, r6
1a00237a:	4620      	mov	r0, r4
1a00237c:	f7ff ffa4 	bl	1a0022c8 <xTimerGenericCommand>
				configASSERT( xResult );
1a002380:	2800      	cmp	r0, #0
1a002382:	d1d9      	bne.n	1a002338 <prvSwitchTimerLists+0x4>
1a002384:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002388:	f383 8811 	msr	BASEPRI, r3
1a00238c:	f3bf 8f6f 	isb	sy
1a002390:	f3bf 8f4f 	dsb	sy
1a002394:	e7fe      	b.n	1a002394 <prvSwitchTimerLists+0x60>
	pxCurrentTimerList = pxOverflowTimerList;
1a002396:	4a04      	ldr	r2, [pc, #16]	; (1a0023a8 <prvSwitchTimerLists+0x74>)
1a002398:	6810      	ldr	r0, [r2, #0]
1a00239a:	4902      	ldr	r1, [pc, #8]	; (1a0023a4 <prvSwitchTimerLists+0x70>)
1a00239c:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
1a00239e:	6013      	str	r3, [r2, #0]
}
1a0023a0:	b002      	add	sp, #8
1a0023a2:	bd70      	pop	{r4, r5, r6, pc}
1a0023a4:	100029e0 	.word	0x100029e0
1a0023a8:	100029e4 	.word	0x100029e4

1a0023ac <prvSampleTimeNow>:
{
1a0023ac:	b538      	push	{r3, r4, r5, lr}
1a0023ae:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
1a0023b0:	f7ff fb4c 	bl	1a001a4c <xTaskGetTickCount>
1a0023b4:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
1a0023b6:	4b07      	ldr	r3, [pc, #28]	; (1a0023d4 <prvSampleTimeNow+0x28>)
1a0023b8:	681b      	ldr	r3, [r3, #0]
1a0023ba:	4283      	cmp	r3, r0
1a0023bc:	d805      	bhi.n	1a0023ca <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
1a0023be:	2300      	movs	r3, #0
1a0023c0:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
1a0023c2:	4b04      	ldr	r3, [pc, #16]	; (1a0023d4 <prvSampleTimeNow+0x28>)
1a0023c4:	601c      	str	r4, [r3, #0]
}
1a0023c6:	4620      	mov	r0, r4
1a0023c8:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
1a0023ca:	f7ff ffb3 	bl	1a002334 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
1a0023ce:	2301      	movs	r3, #1
1a0023d0:	602b      	str	r3, [r5, #0]
1a0023d2:	e7f6      	b.n	1a0023c2 <prvSampleTimeNow+0x16>
1a0023d4:	10002ab0 	.word	0x10002ab0

1a0023d8 <prvProcessExpiredTimer>:
{
1a0023d8:	b570      	push	{r4, r5, r6, lr}
1a0023da:	b082      	sub	sp, #8
1a0023dc:	4605      	mov	r5, r0
1a0023de:	460e      	mov	r6, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a0023e0:	4b14      	ldr	r3, [pc, #80]	; (1a002434 <prvProcessExpiredTimer+0x5c>)
1a0023e2:	681b      	ldr	r3, [r3, #0]
1a0023e4:	68db      	ldr	r3, [r3, #12]
1a0023e6:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a0023e8:	1d20      	adds	r0, r4, #4
1a0023ea:	f7ff f819 	bl	1a001420 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a0023ee:	69e3      	ldr	r3, [r4, #28]
1a0023f0:	2b01      	cmp	r3, #1
1a0023f2:	d004      	beq.n	1a0023fe <prvProcessExpiredTimer+0x26>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a0023f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a0023f6:	4620      	mov	r0, r4
1a0023f8:	4798      	blx	r3
}
1a0023fa:	b002      	add	sp, #8
1a0023fc:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
1a0023fe:	69a1      	ldr	r1, [r4, #24]
1a002400:	462b      	mov	r3, r5
1a002402:	4632      	mov	r2, r6
1a002404:	4429      	add	r1, r5
1a002406:	4620      	mov	r0, r4
1a002408:	f7ff fed0 	bl	1a0021ac <prvInsertTimerInActiveList>
1a00240c:	2800      	cmp	r0, #0
1a00240e:	d0f1      	beq.n	1a0023f4 <prvProcessExpiredTimer+0x1c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a002410:	2100      	movs	r1, #0
1a002412:	9100      	str	r1, [sp, #0]
1a002414:	460b      	mov	r3, r1
1a002416:	462a      	mov	r2, r5
1a002418:	4620      	mov	r0, r4
1a00241a:	f7ff ff55 	bl	1a0022c8 <xTimerGenericCommand>
			configASSERT( xResult );
1a00241e:	2800      	cmp	r0, #0
1a002420:	d1e8      	bne.n	1a0023f4 <prvProcessExpiredTimer+0x1c>
1a002422:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002426:	f383 8811 	msr	BASEPRI, r3
1a00242a:	f3bf 8f6f 	isb	sy
1a00242e:	f3bf 8f4f 	dsb	sy
1a002432:	e7fe      	b.n	1a002432 <prvProcessExpiredTimer+0x5a>
1a002434:	100029e0 	.word	0x100029e0

1a002438 <prvProcessTimerOrBlockTask>:
{
1a002438:	b570      	push	{r4, r5, r6, lr}
1a00243a:	b082      	sub	sp, #8
1a00243c:	4606      	mov	r6, r0
1a00243e:	460c      	mov	r4, r1
	vTaskSuspendAll();
1a002440:	f7ff fafc 	bl	1a001a3c <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a002444:	a801      	add	r0, sp, #4
1a002446:	f7ff ffb1 	bl	1a0023ac <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
1a00244a:	9b01      	ldr	r3, [sp, #4]
1a00244c:	bb1b      	cbnz	r3, 1a002496 <prvProcessTimerOrBlockTask+0x5e>
1a00244e:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
1a002450:	b90c      	cbnz	r4, 1a002456 <prvProcessTimerOrBlockTask+0x1e>
1a002452:	42b0      	cmp	r0, r6
1a002454:	d218      	bcs.n	1a002488 <prvProcessTimerOrBlockTask+0x50>
				if( xListWasEmpty != pdFALSE )
1a002456:	b12c      	cbz	r4, 1a002464 <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
1a002458:	4b11      	ldr	r3, [pc, #68]	; (1a0024a0 <prvProcessTimerOrBlockTask+0x68>)
1a00245a:	681b      	ldr	r3, [r3, #0]
1a00245c:	681c      	ldr	r4, [r3, #0]
1a00245e:	fab4 f484 	clz	r4, r4
1a002462:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
1a002464:	4622      	mov	r2, r4
1a002466:	1b71      	subs	r1, r6, r5
1a002468:	4b0e      	ldr	r3, [pc, #56]	; (1a0024a4 <prvProcessTimerOrBlockTask+0x6c>)
1a00246a:	6818      	ldr	r0, [r3, #0]
1a00246c:	f7fe ff7c 	bl	1a001368 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
1a002470:	f7ff fb7e 	bl	1a001b70 <xTaskResumeAll>
1a002474:	b988      	cbnz	r0, 1a00249a <prvProcessTimerOrBlockTask+0x62>
					portYIELD_WITHIN_API();
1a002476:	4b0c      	ldr	r3, [pc, #48]	; (1a0024a8 <prvProcessTimerOrBlockTask+0x70>)
1a002478:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00247c:	601a      	str	r2, [r3, #0]
1a00247e:	f3bf 8f4f 	dsb	sy
1a002482:	f3bf 8f6f 	isb	sy
1a002486:	e008      	b.n	1a00249a <prvProcessTimerOrBlockTask+0x62>
				( void ) xTaskResumeAll();
1a002488:	f7ff fb72 	bl	1a001b70 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
1a00248c:	4629      	mov	r1, r5
1a00248e:	4630      	mov	r0, r6
1a002490:	f7ff ffa2 	bl	1a0023d8 <prvProcessExpiredTimer>
1a002494:	e001      	b.n	1a00249a <prvProcessTimerOrBlockTask+0x62>
			( void ) xTaskResumeAll();
1a002496:	f7ff fb6b 	bl	1a001b70 <xTaskResumeAll>
}
1a00249a:	b002      	add	sp, #8
1a00249c:	bd70      	pop	{r4, r5, r6, pc}
1a00249e:	bf00      	nop
1a0024a0:	100029e4 	.word	0x100029e4
1a0024a4:	10002b04 	.word	0x10002b04
1a0024a8:	e000ed04 	.word	0xe000ed04

1a0024ac <prvProcessReceivedCommands>:
{
1a0024ac:	b530      	push	{r4, r5, lr}
1a0024ae:	b089      	sub	sp, #36	; 0x24
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a0024b0:	e006      	b.n	1a0024c0 <prvProcessReceivedCommands+0x14>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
1a0024b2:	9907      	ldr	r1, [sp, #28]
1a0024b4:	9806      	ldr	r0, [sp, #24]
1a0024b6:	9b05      	ldr	r3, [sp, #20]
1a0024b8:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
1a0024ba:	9b04      	ldr	r3, [sp, #16]
1a0024bc:	2b00      	cmp	r3, #0
1a0024be:	da0b      	bge.n	1a0024d8 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a0024c0:	2200      	movs	r2, #0
1a0024c2:	a904      	add	r1, sp, #16
1a0024c4:	4b37      	ldr	r3, [pc, #220]	; (1a0025a4 <prvProcessReceivedCommands+0xf8>)
1a0024c6:	6818      	ldr	r0, [r3, #0]
1a0024c8:	f7fe fdba 	bl	1a001040 <xQueueReceive>
1a0024cc:	2800      	cmp	r0, #0
1a0024ce:	d066      	beq.n	1a00259e <prvProcessReceivedCommands+0xf2>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
1a0024d0:	9b04      	ldr	r3, [sp, #16]
1a0024d2:	2b00      	cmp	r3, #0
1a0024d4:	daf1      	bge.n	1a0024ba <prvProcessReceivedCommands+0xe>
1a0024d6:	e7ec      	b.n	1a0024b2 <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
1a0024d8:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
1a0024da:	6963      	ldr	r3, [r4, #20]
1a0024dc:	b113      	cbz	r3, 1a0024e4 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a0024de:	1d20      	adds	r0, r4, #4
1a0024e0:	f7fe ff9e 	bl	1a001420 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a0024e4:	a803      	add	r0, sp, #12
1a0024e6:	f7ff ff61 	bl	1a0023ac <prvSampleTimeNow>
			switch( xMessage.xMessageID )
1a0024ea:	9b04      	ldr	r3, [sp, #16]
1a0024ec:	2b09      	cmp	r3, #9
1a0024ee:	d8e7      	bhi.n	1a0024c0 <prvProcessReceivedCommands+0x14>
1a0024f0:	a201      	add	r2, pc, #4	; (adr r2, 1a0024f8 <prvProcessReceivedCommands+0x4c>)
1a0024f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a0024f6:	bf00      	nop
1a0024f8:	1a002521 	.word	0x1a002521
1a0024fc:	1a002521 	.word	0x1a002521
1a002500:	1a002521 	.word	0x1a002521
1a002504:	1a0024c1 	.word	0x1a0024c1
1a002508:	1a002569 	.word	0x1a002569
1a00250c:	1a00258f 	.word	0x1a00258f
1a002510:	1a002521 	.word	0x1a002521
1a002514:	1a002521 	.word	0x1a002521
1a002518:	1a0024c1 	.word	0x1a0024c1
1a00251c:	1a002569 	.word	0x1a002569
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
1a002520:	9905      	ldr	r1, [sp, #20]
1a002522:	69a5      	ldr	r5, [r4, #24]
1a002524:	460b      	mov	r3, r1
1a002526:	4602      	mov	r2, r0
1a002528:	4429      	add	r1, r5
1a00252a:	4620      	mov	r0, r4
1a00252c:	f7ff fe3e 	bl	1a0021ac <prvInsertTimerInActiveList>
1a002530:	2800      	cmp	r0, #0
1a002532:	d0c5      	beq.n	1a0024c0 <prvProcessReceivedCommands+0x14>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a002534:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a002536:	4620      	mov	r0, r4
1a002538:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a00253a:	69e3      	ldr	r3, [r4, #28]
1a00253c:	2b01      	cmp	r3, #1
1a00253e:	d1bf      	bne.n	1a0024c0 <prvProcessReceivedCommands+0x14>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
1a002540:	69a2      	ldr	r2, [r4, #24]
1a002542:	2100      	movs	r1, #0
1a002544:	9100      	str	r1, [sp, #0]
1a002546:	460b      	mov	r3, r1
1a002548:	9805      	ldr	r0, [sp, #20]
1a00254a:	4402      	add	r2, r0
1a00254c:	4620      	mov	r0, r4
1a00254e:	f7ff febb 	bl	1a0022c8 <xTimerGenericCommand>
							configASSERT( xResult );
1a002552:	2800      	cmp	r0, #0
1a002554:	d1b4      	bne.n	1a0024c0 <prvProcessReceivedCommands+0x14>
1a002556:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00255a:	f383 8811 	msr	BASEPRI, r3
1a00255e:	f3bf 8f6f 	isb	sy
1a002562:	f3bf 8f4f 	dsb	sy
1a002566:	e7fe      	b.n	1a002566 <prvProcessReceivedCommands+0xba>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
1a002568:	9905      	ldr	r1, [sp, #20]
1a00256a:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
1a00256c:	b131      	cbz	r1, 1a00257c <prvProcessReceivedCommands+0xd0>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
1a00256e:	4603      	mov	r3, r0
1a002570:	4602      	mov	r2, r0
1a002572:	4401      	add	r1, r0
1a002574:	4620      	mov	r0, r4
1a002576:	f7ff fe19 	bl	1a0021ac <prvInsertTimerInActiveList>
					break;
1a00257a:	e7a1      	b.n	1a0024c0 <prvProcessReceivedCommands+0x14>
1a00257c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002580:	f383 8811 	msr	BASEPRI, r3
1a002584:	f3bf 8f6f 	isb	sy
1a002588:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
1a00258c:	e7fe      	b.n	1a00258c <prvProcessReceivedCommands+0xe0>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
1a00258e:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
1a002592:	2b00      	cmp	r3, #0
1a002594:	d194      	bne.n	1a0024c0 <prvProcessReceivedCommands+0x14>
							vPortFree( pxTimer );
1a002596:	4620      	mov	r0, r4
1a002598:	f7fe fa6e 	bl	1a000a78 <vPortFree>
1a00259c:	e790      	b.n	1a0024c0 <prvProcessReceivedCommands+0x14>
}
1a00259e:	b009      	add	sp, #36	; 0x24
1a0025a0:	bd30      	pop	{r4, r5, pc}
1a0025a2:	bf00      	nop
1a0025a4:	10002b04 	.word	0x10002b04

1a0025a8 <prvTimerTask>:
{
1a0025a8:	b500      	push	{lr}
1a0025aa:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
1a0025ac:	a801      	add	r0, sp, #4
1a0025ae:	f7ff fded 	bl	1a00218c <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
1a0025b2:	9901      	ldr	r1, [sp, #4]
1a0025b4:	f7ff ff40 	bl	1a002438 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
1a0025b8:	f7ff ff78 	bl	1a0024ac <prvProcessReceivedCommands>
1a0025bc:	e7f6      	b.n	1a0025ac <prvTimerTask+0x4>
1a0025be:	Address 0x000000001a0025be is out of bounds.


1a0025c0 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
1a0025c0:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
1a0025c2:	2300      	movs	r3, #0
1a0025c4:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
1a0025c6:	4b0d      	ldr	r3, [pc, #52]	; (1a0025fc <prvTaskExitError+0x3c>)
1a0025c8:	681b      	ldr	r3, [r3, #0]
1a0025ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0025ce:	d008      	beq.n	1a0025e2 <prvTaskExitError+0x22>
1a0025d0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0025d4:	f383 8811 	msr	BASEPRI, r3
1a0025d8:	f3bf 8f6f 	isb	sy
1a0025dc:	f3bf 8f4f 	dsb	sy
1a0025e0:	e7fe      	b.n	1a0025e0 <prvTaskExitError+0x20>
1a0025e2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0025e6:	f383 8811 	msr	BASEPRI, r3
1a0025ea:	f3bf 8f6f 	isb	sy
1a0025ee:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
1a0025f2:	9b01      	ldr	r3, [sp, #4]
1a0025f4:	2b00      	cmp	r3, #0
1a0025f6:	d0fc      	beq.n	1a0025f2 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
1a0025f8:	b002      	add	sp, #8
1a0025fa:	4770      	bx	lr
1a0025fc:	10000008 	.word	0x10000008

1a002600 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
1a002600:	4808      	ldr	r0, [pc, #32]	; (1a002624 <prvPortStartFirstTask+0x24>)
1a002602:	6800      	ldr	r0, [r0, #0]
1a002604:	6800      	ldr	r0, [r0, #0]
1a002606:	f380 8808 	msr	MSP, r0
1a00260a:	f04f 0000 	mov.w	r0, #0
1a00260e:	f380 8814 	msr	CONTROL, r0
1a002612:	b662      	cpsie	i
1a002614:	b661      	cpsie	f
1a002616:	f3bf 8f4f 	dsb	sy
1a00261a:	f3bf 8f6f 	isb	sy
1a00261e:	df00      	svc	0
1a002620:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
1a002622:	0000      	.short	0x0000
1a002624:	e000ed08 	.word	0xe000ed08

1a002628 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
1a002628:	f8df 000c 	ldr.w	r0, [pc, #12]	; 1a002638 <vPortEnableVFP+0x10>
1a00262c:	6801      	ldr	r1, [r0, #0]
1a00262e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a002632:	6001      	str	r1, [r0, #0]
1a002634:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
1a002636:	0000      	.short	0x0000
1a002638:	e000ed88 	.word	0xe000ed88

1a00263c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
1a00263c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
1a002640:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
1a002644:	f021 0101 	bic.w	r1, r1, #1
1a002648:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
1a00264c:	4b05      	ldr	r3, [pc, #20]	; (1a002664 <pxPortInitialiseStack+0x28>)
1a00264e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
1a002652:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
1a002656:	f06f 0302 	mvn.w	r3, #2
1a00265a:	f840 3c24 	str.w	r3, [r0, #-36]
}
1a00265e:	3844      	subs	r0, #68	; 0x44
1a002660:	4770      	bx	lr
1a002662:	bf00      	nop
1a002664:	1a0025c1 	.word	0x1a0025c1
1a002668:	ffffffff 	.word	0xffffffff
1a00266c:	ffffffff 	.word	0xffffffff

1a002670 <SVC_Handler>:
	__asm volatile (
1a002670:	4b07      	ldr	r3, [pc, #28]	; (1a002690 <pxCurrentTCBConst2>)
1a002672:	6819      	ldr	r1, [r3, #0]
1a002674:	6808      	ldr	r0, [r1, #0]
1a002676:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00267a:	f380 8809 	msr	PSP, r0
1a00267e:	f3bf 8f6f 	isb	sy
1a002682:	f04f 0000 	mov.w	r0, #0
1a002686:	f380 8811 	msr	BASEPRI, r0
1a00268a:	4770      	bx	lr
1a00268c:	f3af 8000 	nop.w

1a002690 <pxCurrentTCBConst2>:
1a002690:	100028b8 	.word	0x100028b8

1a002694 <vPortEnterCritical>:
1a002694:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002698:	f383 8811 	msr	BASEPRI, r3
1a00269c:	f3bf 8f6f 	isb	sy
1a0026a0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
1a0026a4:	4a0a      	ldr	r2, [pc, #40]	; (1a0026d0 <vPortEnterCritical+0x3c>)
1a0026a6:	6813      	ldr	r3, [r2, #0]
1a0026a8:	3301      	adds	r3, #1
1a0026aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
1a0026ac:	2b01      	cmp	r3, #1
1a0026ae:	d000      	beq.n	1a0026b2 <vPortEnterCritical+0x1e>
}
1a0026b0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
1a0026b2:	4b08      	ldr	r3, [pc, #32]	; (1a0026d4 <vPortEnterCritical+0x40>)
1a0026b4:	681b      	ldr	r3, [r3, #0]
1a0026b6:	f013 0fff 	tst.w	r3, #255	; 0xff
1a0026ba:	d0f9      	beq.n	1a0026b0 <vPortEnterCritical+0x1c>
1a0026bc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0026c0:	f383 8811 	msr	BASEPRI, r3
1a0026c4:	f3bf 8f6f 	isb	sy
1a0026c8:	f3bf 8f4f 	dsb	sy
1a0026cc:	e7fe      	b.n	1a0026cc <vPortEnterCritical+0x38>
1a0026ce:	bf00      	nop
1a0026d0:	10000008 	.word	0x10000008
1a0026d4:	e000ed04 	.word	0xe000ed04

1a0026d8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
1a0026d8:	4b09      	ldr	r3, [pc, #36]	; (1a002700 <vPortExitCritical+0x28>)
1a0026da:	681b      	ldr	r3, [r3, #0]
1a0026dc:	b943      	cbnz	r3, 1a0026f0 <vPortExitCritical+0x18>
1a0026de:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0026e2:	f383 8811 	msr	BASEPRI, r3
1a0026e6:	f3bf 8f6f 	isb	sy
1a0026ea:	f3bf 8f4f 	dsb	sy
1a0026ee:	e7fe      	b.n	1a0026ee <vPortExitCritical+0x16>
	uxCriticalNesting--;
1a0026f0:	3b01      	subs	r3, #1
1a0026f2:	4a03      	ldr	r2, [pc, #12]	; (1a002700 <vPortExitCritical+0x28>)
1a0026f4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
1a0026f6:	b90b      	cbnz	r3, 1a0026fc <vPortExitCritical+0x24>
	__asm volatile
1a0026f8:	f383 8811 	msr	BASEPRI, r3
}
1a0026fc:	4770      	bx	lr
1a0026fe:	bf00      	nop
1a002700:	10000008 	.word	0x10000008
1a002704:	ffffffff 	.word	0xffffffff
1a002708:	ffffffff 	.word	0xffffffff
1a00270c:	ffffffff 	.word	0xffffffff

1a002710 <PendSV_Handler>:
	__asm volatile
1a002710:	f3ef 8009 	mrs	r0, PSP
1a002714:	f3bf 8f6f 	isb	sy
1a002718:	4b15      	ldr	r3, [pc, #84]	; (1a002770 <pxCurrentTCBConst>)
1a00271a:	681a      	ldr	r2, [r3, #0]
1a00271c:	f01e 0f10 	tst.w	lr, #16
1a002720:	bf08      	it	eq
1a002722:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
1a002726:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00272a:	6010      	str	r0, [r2, #0]
1a00272c:	e92d 0009 	stmdb	sp!, {r0, r3}
1a002730:	f04f 00a0 	mov.w	r0, #160	; 0xa0
1a002734:	f380 8811 	msr	BASEPRI, r0
1a002738:	f3bf 8f4f 	dsb	sy
1a00273c:	f3bf 8f6f 	isb	sy
1a002740:	f7ff faba 	bl	1a001cb8 <vTaskSwitchContext>
1a002744:	f04f 0000 	mov.w	r0, #0
1a002748:	f380 8811 	msr	BASEPRI, r0
1a00274c:	bc09      	pop	{r0, r3}
1a00274e:	6819      	ldr	r1, [r3, #0]
1a002750:	6808      	ldr	r0, [r1, #0]
1a002752:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002756:	f01e 0f10 	tst.w	lr, #16
1a00275a:	bf08      	it	eq
1a00275c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
1a002760:	f380 8809 	msr	PSP, r0
1a002764:	f3bf 8f6f 	isb	sy
1a002768:	4770      	bx	lr
1a00276a:	bf00      	nop
1a00276c:	f3af 8000 	nop.w

1a002770 <pxCurrentTCBConst>:
1a002770:	100028b8 	.word	0x100028b8

1a002774 <SysTick_Handler>:
{
1a002774:	b508      	push	{r3, lr}
	__asm volatile
1a002776:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00277a:	f383 8811 	msr	BASEPRI, r3
1a00277e:	f3bf 8f6f 	isb	sy
1a002782:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
1a002786:	f7ff f967 	bl	1a001a58 <xTaskIncrementTick>
1a00278a:	b118      	cbz	r0, 1a002794 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
1a00278c:	4b03      	ldr	r3, [pc, #12]	; (1a00279c <SysTick_Handler+0x28>)
1a00278e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a002792:	601a      	str	r2, [r3, #0]
	__asm volatile
1a002794:	2300      	movs	r3, #0
1a002796:	f383 8811 	msr	BASEPRI, r3
}
1a00279a:	bd08      	pop	{r3, pc}
1a00279c:	e000ed04 	.word	0xe000ed04

1a0027a0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
1a0027a0:	4a08      	ldr	r2, [pc, #32]	; (1a0027c4 <vPortSetupTimerInterrupt+0x24>)
1a0027a2:	2300      	movs	r3, #0
1a0027a4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
1a0027a6:	4908      	ldr	r1, [pc, #32]	; (1a0027c8 <vPortSetupTimerInterrupt+0x28>)
1a0027a8:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
1a0027aa:	4b08      	ldr	r3, [pc, #32]	; (1a0027cc <vPortSetupTimerInterrupt+0x2c>)
1a0027ac:	681b      	ldr	r3, [r3, #0]
1a0027ae:	4908      	ldr	r1, [pc, #32]	; (1a0027d0 <vPortSetupTimerInterrupt+0x30>)
1a0027b0:	fba1 1303 	umull	r1, r3, r1, r3
1a0027b4:	099b      	lsrs	r3, r3, #6
1a0027b6:	3b01      	subs	r3, #1
1a0027b8:	4906      	ldr	r1, [pc, #24]	; (1a0027d4 <vPortSetupTimerInterrupt+0x34>)
1a0027ba:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
1a0027bc:	2307      	movs	r3, #7
1a0027be:	6013      	str	r3, [r2, #0]
}
1a0027c0:	4770      	bx	lr
1a0027c2:	bf00      	nop
1a0027c4:	e000e010 	.word	0xe000e010
1a0027c8:	e000e018 	.word	0xe000e018
1a0027cc:	10002ba4 	.word	0x10002ba4
1a0027d0:	10624dd3 	.word	0x10624dd3
1a0027d4:	e000e014 	.word	0xe000e014

1a0027d8 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
1a0027d8:	4b3a      	ldr	r3, [pc, #232]	; (1a0028c4 <xPortStartScheduler+0xec>)
1a0027da:	681a      	ldr	r2, [r3, #0]
1a0027dc:	4b3a      	ldr	r3, [pc, #232]	; (1a0028c8 <xPortStartScheduler+0xf0>)
1a0027de:	429a      	cmp	r2, r3
1a0027e0:	d029      	beq.n	1a002836 <xPortStartScheduler+0x5e>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
1a0027e2:	4b38      	ldr	r3, [pc, #224]	; (1a0028c4 <xPortStartScheduler+0xec>)
1a0027e4:	681a      	ldr	r2, [r3, #0]
1a0027e6:	4b39      	ldr	r3, [pc, #228]	; (1a0028cc <xPortStartScheduler+0xf4>)
1a0027e8:	429a      	cmp	r2, r3
1a0027ea:	d02d      	beq.n	1a002848 <xPortStartScheduler+0x70>
{
1a0027ec:	b510      	push	{r4, lr}
1a0027ee:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
1a0027f0:	4b37      	ldr	r3, [pc, #220]	; (1a0028d0 <xPortStartScheduler+0xf8>)
1a0027f2:	781a      	ldrb	r2, [r3, #0]
1a0027f4:	b2d2      	uxtb	r2, r2
1a0027f6:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
1a0027f8:	22ff      	movs	r2, #255	; 0xff
1a0027fa:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
1a0027fc:	781b      	ldrb	r3, [r3, #0]
1a0027fe:	b2db      	uxtb	r3, r3
1a002800:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
1a002804:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a002808:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
1a00280c:	4a31      	ldr	r2, [pc, #196]	; (1a0028d4 <xPortStartScheduler+0xfc>)
1a00280e:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
1a002810:	4b31      	ldr	r3, [pc, #196]	; (1a0028d8 <xPortStartScheduler+0x100>)
1a002812:	2207      	movs	r2, #7
1a002814:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a002816:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a00281a:	f013 0f80 	tst.w	r3, #128	; 0x80
1a00281e:	d01c      	beq.n	1a00285a <xPortStartScheduler+0x82>
			ulMaxPRIGROUPValue--;
1a002820:	4a2d      	ldr	r2, [pc, #180]	; (1a0028d8 <xPortStartScheduler+0x100>)
1a002822:	6813      	ldr	r3, [r2, #0]
1a002824:	3b01      	subs	r3, #1
1a002826:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
1a002828:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a00282c:	005b      	lsls	r3, r3, #1
1a00282e:	b2db      	uxtb	r3, r3
1a002830:	f88d 3003 	strb.w	r3, [sp, #3]
1a002834:	e7ef      	b.n	1a002816 <xPortStartScheduler+0x3e>
	__asm volatile
1a002836:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00283a:	f383 8811 	msr	BASEPRI, r3
1a00283e:	f3bf 8f6f 	isb	sy
1a002842:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
1a002846:	e7fe      	b.n	1a002846 <xPortStartScheduler+0x6e>
1a002848:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00284c:	f383 8811 	msr	BASEPRI, r3
1a002850:	f3bf 8f6f 	isb	sy
1a002854:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
1a002858:	e7fe      	b.n	1a002858 <xPortStartScheduler+0x80>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
1a00285a:	4b1f      	ldr	r3, [pc, #124]	; (1a0028d8 <xPortStartScheduler+0x100>)
1a00285c:	681b      	ldr	r3, [r3, #0]
1a00285e:	2b04      	cmp	r3, #4
1a002860:	d008      	beq.n	1a002874 <xPortStartScheduler+0x9c>
1a002862:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002866:	f383 8811 	msr	BASEPRI, r3
1a00286a:	f3bf 8f6f 	isb	sy
1a00286e:	f3bf 8f4f 	dsb	sy
1a002872:	e7fe      	b.n	1a002872 <xPortStartScheduler+0x9a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
1a002874:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
1a002876:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a00287a:	4a17      	ldr	r2, [pc, #92]	; (1a0028d8 <xPortStartScheduler+0x100>)
1a00287c:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
1a00287e:	9b01      	ldr	r3, [sp, #4]
1a002880:	b2db      	uxtb	r3, r3
1a002882:	4a13      	ldr	r2, [pc, #76]	; (1a0028d0 <xPortStartScheduler+0xf8>)
1a002884:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
1a002886:	4b15      	ldr	r3, [pc, #84]	; (1a0028dc <xPortStartScheduler+0x104>)
1a002888:	681a      	ldr	r2, [r3, #0]
1a00288a:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
1a00288e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
1a002890:	681a      	ldr	r2, [r3, #0]
1a002892:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
1a002896:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
1a002898:	f7ff ff82 	bl	1a0027a0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
1a00289c:	2400      	movs	r4, #0
1a00289e:	4b10      	ldr	r3, [pc, #64]	; (1a0028e0 <xPortStartScheduler+0x108>)
1a0028a0:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
1a0028a2:	f7ff fec1 	bl	1a002628 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
1a0028a6:	4a0f      	ldr	r2, [pc, #60]	; (1a0028e4 <xPortStartScheduler+0x10c>)
1a0028a8:	6813      	ldr	r3, [r2, #0]
1a0028aa:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
1a0028ae:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
1a0028b0:	f7ff fea6 	bl	1a002600 <prvPortStartFirstTask>
	vTaskSwitchContext();
1a0028b4:	f7ff fa00 	bl	1a001cb8 <vTaskSwitchContext>
	prvTaskExitError();
1a0028b8:	f7ff fe82 	bl	1a0025c0 <prvTaskExitError>
}
1a0028bc:	4620      	mov	r0, r4
1a0028be:	b002      	add	sp, #8
1a0028c0:	bd10      	pop	{r4, pc}
1a0028c2:	bf00      	nop
1a0028c4:	e000ed00 	.word	0xe000ed00
1a0028c8:	410fc271 	.word	0x410fc271
1a0028cc:	410fc270 	.word	0x410fc270
1a0028d0:	e000e400 	.word	0xe000e400
1a0028d4:	10002b0c 	.word	0x10002b0c
1a0028d8:	10002b10 	.word	0x10002b10
1a0028dc:	e000ed20 	.word	0xe000ed20
1a0028e0:	10000008 	.word	0x10000008
1a0028e4:	e000ef34 	.word	0xe000ef34

1a0028e8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
1a0028e8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
1a0028ec:	2b0f      	cmp	r3, #15
1a0028ee:	d90f      	bls.n	1a002910 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
1a0028f0:	4a10      	ldr	r2, [pc, #64]	; (1a002934 <vPortValidateInterruptPriority+0x4c>)
1a0028f2:	5c9b      	ldrb	r3, [r3, r2]
1a0028f4:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
1a0028f6:	4a10      	ldr	r2, [pc, #64]	; (1a002938 <vPortValidateInterruptPriority+0x50>)
1a0028f8:	7812      	ldrb	r2, [r2, #0]
1a0028fa:	429a      	cmp	r2, r3
1a0028fc:	d908      	bls.n	1a002910 <vPortValidateInterruptPriority+0x28>
1a0028fe:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002902:	f383 8811 	msr	BASEPRI, r3
1a002906:	f3bf 8f6f 	isb	sy
1a00290a:	f3bf 8f4f 	dsb	sy
1a00290e:	e7fe      	b.n	1a00290e <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
1a002910:	4b0a      	ldr	r3, [pc, #40]	; (1a00293c <vPortValidateInterruptPriority+0x54>)
1a002912:	681b      	ldr	r3, [r3, #0]
1a002914:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a002918:	4a09      	ldr	r2, [pc, #36]	; (1a002940 <vPortValidateInterruptPriority+0x58>)
1a00291a:	6812      	ldr	r2, [r2, #0]
1a00291c:	4293      	cmp	r3, r2
1a00291e:	d908      	bls.n	1a002932 <vPortValidateInterruptPriority+0x4a>
1a002920:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002924:	f383 8811 	msr	BASEPRI, r3
1a002928:	f3bf 8f6f 	isb	sy
1a00292c:	f3bf 8f4f 	dsb	sy
1a002930:	e7fe      	b.n	1a002930 <vPortValidateInterruptPriority+0x48>
	}
1a002932:	4770      	bx	lr
1a002934:	e000e3f0 	.word	0xe000e3f0
1a002938:	10002b0c 	.word	0x10002b0c
1a00293c:	e000ed0c 	.word	0xe000ed0c
1a002940:	10002b10 	.word	0x10002b10

1a002944 <DAC_IRQHandler>:
}
/*-----------------------------------------------------------*/

// ISR Handler
void vSoftwareInterruptHandler( void )
{
1a002944:	b508      	push	{r3, lr}
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a002946:	4b05      	ldr	r3, [pc, #20]	; (1a00295c <DAC_IRQHandler+0x18>)
1a002948:	2201      	movs	r2, #1
1a00294a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   NVIC_ClearPendingIRQ( mainSW_INTERRUPT_ID );

   // Execute Tick Hook function if pointer is not NULL
   if( freeRtosInterruptCallback != NULL ) {
1a00294e:	4b04      	ldr	r3, [pc, #16]	; (1a002960 <DAC_IRQHandler+0x1c>)
1a002950:	681b      	ldr	r3, [r3, #0]
1a002952:	b113      	cbz	r3, 1a00295a <DAC_IRQHandler+0x16>
      (* freeRtosInterruptCallback )();
1a002954:	4b02      	ldr	r3, [pc, #8]	; (1a002960 <DAC_IRQHandler+0x1c>)
1a002956:	681b      	ldr	r3, [r3, #0]
1a002958:	4798      	blx	r3
   }
}
1a00295a:	bd08      	pop	{r3, pc}
1a00295c:	e000e100 	.word	0xe000e100
1a002960:	10002b14 	.word	0x10002b14

1a002964 <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a002964:	2200      	movs	r2, #0
1a002966:	2a05      	cmp	r2, #5
1a002968:	d819      	bhi.n	1a00299e <Board_LED_Init+0x3a>
{
1a00296a:	b470      	push	{r4, r5, r6}
      const struct gpio_t *io = &GpioLeds[i];
      Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a00296c:	490c      	ldr	r1, [pc, #48]	; (1a0029a0 <Board_LED_Init+0x3c>)
1a00296e:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a002972:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a002976:	784c      	ldrb	r4, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a002978:	4b0a      	ldr	r3, [pc, #40]	; (1a0029a4 <Board_LED_Init+0x40>)
1a00297a:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a00297e:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a002982:	2001      	movs	r0, #1
1a002984:	40a0      	lsls	r0, r4
1a002986:	4301      	orrs	r1, r0
1a002988:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a00298c:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a002990:	2100      	movs	r1, #0
1a002992:	5519      	strb	r1, [r3, r4]
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a002994:	3201      	adds	r2, #1
1a002996:	2a05      	cmp	r2, #5
1a002998:	d9e8      	bls.n	1a00296c <Board_LED_Init+0x8>
      Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
   }
}
1a00299a:	bc70      	pop	{r4, r5, r6}
1a00299c:	4770      	bx	lr
1a00299e:	4770      	bx	lr
1a0029a0:	1a00554c 	.word	0x1a00554c
1a0029a4:	400f4000 	.word	0x400f4000

1a0029a8 <Board_TEC_Init>:


static void Board_TEC_Init()
{
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a0029a8:	2300      	movs	r3, #0
1a0029aa:	2b03      	cmp	r3, #3
1a0029ac:	d816      	bhi.n	1a0029dc <Board_TEC_Init+0x34>
{
1a0029ae:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioButtons[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a0029b0:	490b      	ldr	r1, [pc, #44]	; (1a0029e0 <Board_TEC_Init+0x38>)
1a0029b2:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a0029b6:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a0029ba:	784d      	ldrb	r5, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] &= ~(1UL << pin);
1a0029bc:	4c09      	ldr	r4, [pc, #36]	; (1a0029e4 <Board_TEC_Init+0x3c>)
1a0029be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a0029c2:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a0029c6:	2001      	movs	r0, #1
1a0029c8:	40a8      	lsls	r0, r5
1a0029ca:	ea21 0100 	bic.w	r1, r1, r0
1a0029ce:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a0029d2:	3301      	adds	r3, #1
1a0029d4:	2b03      	cmp	r3, #3
1a0029d6:	d9eb      	bls.n	1a0029b0 <Board_TEC_Init+0x8>
   }
}
1a0029d8:	bc30      	pop	{r4, r5}
1a0029da:	4770      	bx	lr
1a0029dc:	4770      	bx	lr
1a0029de:	bf00      	nop
1a0029e0:	1a005544 	.word	0x1a005544
1a0029e4:	400f4000 	.word	0x400f4000

1a0029e8 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a0029e8:	2300      	movs	r3, #0
1a0029ea:	2b08      	cmp	r3, #8
1a0029ec:	d816      	bhi.n	1a002a1c <Board_GPIO_Init+0x34>
{
1a0029ee:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioPorts[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a0029f0:	490b      	ldr	r1, [pc, #44]	; (1a002a20 <Board_GPIO_Init+0x38>)
1a0029f2:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a0029f6:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a0029fa:	784d      	ldrb	r5, [r1, #1]
1a0029fc:	4c09      	ldr	r4, [pc, #36]	; (1a002a24 <Board_GPIO_Init+0x3c>)
1a0029fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a002a02:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a002a06:	2001      	movs	r0, #1
1a002a08:	40a8      	lsls	r0, r5
1a002a0a:	ea21 0100 	bic.w	r1, r1, r0
1a002a0e:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a002a12:	3301      	adds	r3, #1
1a002a14:	2b08      	cmp	r3, #8
1a002a16:	d9eb      	bls.n	1a0029f0 <Board_GPIO_Init+0x8>
   }
}
1a002a18:	bc30      	pop	{r4, r5}
1a002a1a:	4770      	bx	lr
1a002a1c:	4770      	bx	lr
1a002a1e:	bf00      	nop
1a002a20:	1a005558 	.word	0x1a005558
1a002a24:	400f4000 	.word	0x400f4000

1a002a28 <Board_ADC_Init>:
   Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a002a28:	b510      	push	{r4, lr}
1a002a2a:	b082      	sub	sp, #8
   ADC_CLOCK_SETUP_T cs;

   Chip_ADC_Init(LPC_ADC0, &cs);
1a002a2c:	4c08      	ldr	r4, [pc, #32]	; (1a002a50 <Board_ADC_Init+0x28>)
1a002a2e:	4669      	mov	r1, sp
1a002a30:	4620      	mov	r0, r4
1a002a32:	f000 fa43 	bl	1a002ebc <Chip_ADC_Init>
   Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a002a36:	4a07      	ldr	r2, [pc, #28]	; (1a002a54 <Board_ADC_Init+0x2c>)
1a002a38:	4669      	mov	r1, sp
1a002a3a:	4620      	mov	r0, r4
1a002a3c:	f000 faa9 	bl	1a002f92 <Chip_ADC_SetSampleRate>
   Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a002a40:	2200      	movs	r2, #0
1a002a42:	4669      	mov	r1, sp
1a002a44:	4620      	mov	r0, r4
1a002a46:	f000 fabd 	bl	1a002fc4 <Chip_ADC_SetResolution>
}
1a002a4a:	b002      	add	sp, #8
1a002a4c:	bd10      	pop	{r4, pc}
1a002a4e:	bf00      	nop
1a002a50:	400e3000 	.word	0x400e3000
1a002a54:	00061a80 	.word	0x00061a80

1a002a58 <Board_SPI_Init>:
{
1a002a58:	b510      	push	{r4, lr}
   Chip_SSP_Init(LPC_SSP1);
1a002a5a:	4c0b      	ldr	r4, [pc, #44]	; (1a002a88 <Board_SPI_Init+0x30>)
1a002a5c:	4620      	mov	r0, r4
1a002a5e:	f000 ff03 	bl	1a003868 <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a002a62:	6863      	ldr	r3, [r4, #4]
1a002a64:	f023 0304 	bic.w	r3, r3, #4
1a002a68:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a002a6a:	6823      	ldr	r3, [r4, #0]
1a002a6c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a002a70:	f043 0307 	orr.w	r3, r3, #7
1a002a74:	6023      	str	r3, [r4, #0]
   Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a002a76:	4905      	ldr	r1, [pc, #20]	; (1a002a8c <Board_SPI_Init+0x34>)
1a002a78:	4620      	mov	r0, r4
1a002a7a:	f000 fed6 	bl	1a00382a <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a002a7e:	6863      	ldr	r3, [r4, #4]
1a002a80:	f043 0302 	orr.w	r3, r3, #2
1a002a84:	6063      	str	r3, [r4, #4]
}
1a002a86:	bd10      	pop	{r4, pc}
1a002a88:	400c5000 	.word	0x400c5000
1a002a8c:	000186a0 	.word	0x000186a0

1a002a90 <Board_I2C_Init>:
{
1a002a90:	b508      	push	{r3, lr}
   Chip_I2C_Init(I2C0);
1a002a92:	2000      	movs	r0, #0
1a002a94:	f000 f8e0 	bl	1a002c58 <Chip_I2C_Init>
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a002a98:	4b04      	ldr	r3, [pc, #16]	; (1a002aac <Board_I2C_Init+0x1c>)
1a002a9a:	f640 0208 	movw	r2, #2056	; 0x808
1a002a9e:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
   Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a002aa2:	4903      	ldr	r1, [pc, #12]	; (1a002ab0 <Board_I2C_Init+0x20>)
1a002aa4:	2000      	movs	r0, #0
1a002aa6:	f000 f8e9 	bl	1a002c7c <Chip_I2C_SetClockRate>
}
1a002aaa:	bd08      	pop	{r3, pc}
1a002aac:	40086000 	.word	0x40086000
1a002ab0:	000f4240 	.word	0x000f4240

1a002ab4 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a002ab4:	b510      	push	{r4, lr}
   Chip_UART_Init(DEBUG_UART);
1a002ab6:	4c07      	ldr	r4, [pc, #28]	; (1a002ad4 <Board_Debug_Init+0x20>)
1a002ab8:	4620      	mov	r0, r4
1a002aba:	f000 f911 	bl	1a002ce0 <Chip_UART_Init>
   Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a002abe:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a002ac2:	4620      	mov	r0, r4
1a002ac4:	f000 f956 	bl	1a002d74 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a002ac8:	2303      	movs	r3, #3
1a002aca:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a002acc:	2301      	movs	r3, #1
1a002ace:	65e3      	str	r3, [r4, #92]	; 0x5c
   Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
   Chip_UART_TXEnable(DEBUG_UART);
}
1a002ad0:	bd10      	pop	{r4, pc}
1a002ad2:	bf00      	nop
1a002ad4:	400c1000 	.word	0x400c1000

1a002ad8 <Board_UARTPutChar>:
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a002ad8:	4b03      	ldr	r3, [pc, #12]	; (1a002ae8 <Board_UARTPutChar+0x10>)
1a002ada:	695b      	ldr	r3, [r3, #20]


void Board_UARTPutChar(char ch)
{
   while ( !(Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_THRE));
1a002adc:	f013 0f20 	tst.w	r3, #32
1a002ae0:	d0fa      	beq.n	1a002ad8 <Board_UARTPutChar>
	pUART->THR = (uint32_t) data;
1a002ae2:	4b01      	ldr	r3, [pc, #4]	; (1a002ae8 <Board_UARTPutChar+0x10>)
1a002ae4:	6018      	str	r0, [r3, #0]
   Chip_UART_SendByte(DEBUG_UART, (uint8_t) ch);
}
1a002ae6:	4770      	bx	lr
1a002ae8:	400c1000 	.word	0x400c1000

1a002aec <Board_UARTGetChar>:
	return pUART->LSR;
1a002aec:	4b05      	ldr	r3, [pc, #20]	; (1a002b04 <Board_UARTGetChar+0x18>)
1a002aee:	695b      	ldr	r3, [r3, #20]


int Board_UARTGetChar(void)
{
   if (Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_RDR) {
1a002af0:	f013 0f01 	tst.w	r3, #1
1a002af4:	d003      	beq.n	1a002afe <Board_UARTGetChar+0x12>
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a002af6:	4b03      	ldr	r3, [pc, #12]	; (1a002b04 <Board_UARTGetChar+0x18>)
1a002af8:	6818      	ldr	r0, [r3, #0]
      return (int) Chip_UART_ReadByte(DEBUG_UART);
1a002afa:	b2c0      	uxtb	r0, r0
1a002afc:	4770      	bx	lr
   }
   return EOF;
1a002afe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a002b02:	4770      	bx	lr
1a002b04:	400c1000 	.word	0x400c1000

1a002b08 <Board_Init>:
   Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a002b08:	b508      	push	{r3, lr}
   DEBUGINIT();
1a002b0a:	f7ff ffd3 	bl	1a002ab4 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a002b0e:	4809      	ldr	r0, [pc, #36]	; (1a002b34 <Board_Init+0x2c>)
1a002b10:	f000 fd76 	bl	1a003600 <Chip_GPIO_Init>

   Board_GPIO_Init();
1a002b14:	f7ff ff68 	bl	1a0029e8 <Board_GPIO_Init>
   Board_ADC_Init();
1a002b18:	f7ff ff86 	bl	1a002a28 <Board_ADC_Init>
   Board_SPI_Init();
1a002b1c:	f7ff ff9c 	bl	1a002a58 <Board_SPI_Init>
   Board_I2C_Init();
1a002b20:	f7ff ffb6 	bl	1a002a90 <Board_I2C_Init>

   Board_LED_Init();
1a002b24:	f7ff ff1e 	bl	1a002964 <Board_LED_Init>
   Board_TEC_Init();
1a002b28:	f7ff ff3e 	bl	1a0029a8 <Board_TEC_Init>
#ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
#endif

   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate(); // @Eric
1a002b2c:	f000 fd56 	bl	1a0035dc <SystemCoreClockUpdate>
}
1a002b30:	bd08      	pop	{r3, pc}
1a002b32:	bf00      	nop
1a002b34:	400f4000 	.word	0x400f4000

1a002b38 <__stdio_putchar>:
   curADCChannel = 0xFF;
   return data;
}

void __stdio_putchar(int c)
{
1a002b38:	b508      	push	{r3, lr}
   Board_UARTPutChar(c);
1a002b3a:	b2c0      	uxtb	r0, r0
1a002b3c:	f7ff ffcc 	bl	1a002ad8 <Board_UARTPutChar>
}
1a002b40:	bd08      	pop	{r3, pc}

1a002b42 <__stdio_getchar>:

int __stdio_getchar()
{
1a002b42:	b508      	push	{r3, lr}
   return Board_UARTGetChar();;
1a002b44:	f7ff ffd2 	bl	1a002aec <Board_UARTGetChar>
}
1a002b48:	bd08      	pop	{r3, pc}

1a002b4a <__stdio_init>:

void __stdio_init()
{
1a002b4a:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a002b4c:	f7ff ffb2 	bl	1a002ab4 <Board_Debug_Init>
1a002b50:	bd08      	pop	{r3, pc}
1a002b52:	Address 0x000000001a002b52 is out of bounds.


1a002b54 <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a002b54:	2300      	movs	r3, #0
1a002b56:	2b1c      	cmp	r3, #28
1a002b58:	d812      	bhi.n	1a002b80 <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a002b5a:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a002b5c:	4a09      	ldr	r2, [pc, #36]	; (1a002b84 <Board_SetupMuxing+0x30>)
1a002b5e:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a002b62:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a002b66:	784a      	ldrb	r2, [r1, #1]
1a002b68:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a002b6a:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a002b6e:	4906      	ldr	r1, [pc, #24]	; (1a002b88 <Board_SetupMuxing+0x34>)
1a002b70:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a002b74:	3301      	adds	r3, #1
1a002b76:	2b1c      	cmp	r3, #28
1a002b78:	d9f0      	bls.n	1a002b5c <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a002b7a:	f85d 4b04 	ldr.w	r4, [sp], #4
1a002b7e:	4770      	bx	lr
1a002b80:	4770      	bx	lr
1a002b82:	bf00      	nop
1a002b84:	1a005574 	.word	0x1a005574
1a002b88:	40086000 	.word	0x40086000

1a002b8c <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a002b8c:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a002b8e:	4a17      	ldr	r2, [pc, #92]	; (1a002bec <Board_SetupClocking+0x60>)
1a002b90:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a002b94:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a002b98:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a002b9c:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a002ba0:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a002ba4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a002ba8:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a002bac:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a002bb0:	2201      	movs	r2, #1
1a002bb2:	490f      	ldr	r1, [pc, #60]	; (1a002bf0 <Board_SetupClocking+0x64>)
1a002bb4:	2006      	movs	r0, #6
1a002bb6:	f000 fd25 	bl	1a003604 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a002bba:	2400      	movs	r4, #0
1a002bbc:	b14c      	cbz	r4, 1a002bd2 <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a002bbe:	4b0b      	ldr	r3, [pc, #44]	; (1a002bec <Board_SetupClocking+0x60>)
1a002bc0:	685a      	ldr	r2, [r3, #4]
1a002bc2:	f022 020c 	bic.w	r2, r2, #12
1a002bc6:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a002bc8:	685a      	ldr	r2, [r3, #4]
1a002bca:	f042 0203 	orr.w	r2, r2, #3
1a002bce:	605a      	str	r2, [r3, #4]
}
1a002bd0:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a002bd2:	4808      	ldr	r0, [pc, #32]	; (1a002bf4 <Board_SetupClocking+0x68>)
1a002bd4:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a002bd8:	2301      	movs	r3, #1
1a002bda:	788a      	ldrb	r2, [r1, #2]
1a002bdc:	7849      	ldrb	r1, [r1, #1]
1a002bde:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a002be2:	f000 fc3d 	bl	1a003460 <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a002be6:	3401      	adds	r4, #1
1a002be8:	e7e8      	b.n	1a002bbc <Board_SetupClocking+0x30>
1a002bea:	bf00      	nop
1a002bec:	40043000 	.word	0x40043000
1a002bf0:	0c28cb00 	.word	0x0c28cb00
1a002bf4:	1a005570 	.word	0x1a005570

1a002bf8 <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a002bf8:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a002bfa:	f7ff ffab 	bl	1a002b54 <Board_SetupMuxing>
    Board_SetupClocking();
1a002bfe:	f7ff ffc5 	bl	1a002b8c <Board_SetupClocking>
}
1a002c02:	bd08      	pop	{r3, pc}

1a002c04 <Chip_DAC_DeInit>:
	Chip_DAC_SetBias(pDAC, DAC_MAX_UPDATE_RATE_1MHz);
}

/* Shutdown DAC peripheral */
void Chip_DAC_DeInit(LPC_DAC_T *pDAC)
{
1a002c04:	b508      	push	{r3, lr}
	Chip_Clock_Disable(CLK_APB3_DAC);
1a002c06:	2002      	movs	r0, #2
1a002c08:	f000 fca8 	bl	1a00355c <Chip_Clock_Disable>
}
1a002c0c:	bd08      	pop	{r3, pc}

1a002c0e <Chip_DAC_UpdateValue>:
/* Update value to DAC buffer*/
void Chip_DAC_UpdateValue(LPC_DAC_T *pDAC, uint32_t dac_value)
{
	uint32_t tmp;

	tmp = pDAC->CR & DAC_BIAS_EN;
1a002c0e:	6803      	ldr	r3, [r0, #0]
1a002c10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
	tmp |= DAC_VALUE(dac_value);
1a002c14:	0189      	lsls	r1, r1, #6
1a002c16:	b289      	uxth	r1, r1
1a002c18:	4319      	orrs	r1, r3
	/* Update value */
	pDAC->CR = tmp;
1a002c1a:	6001      	str	r1, [r0, #0]
}
1a002c1c:	4770      	bx	lr

1a002c1e <Chip_DAC_SetBias>:

/* Set Maximum update rate for DAC */
void Chip_DAC_SetBias(LPC_DAC_T *pDAC, uint32_t bias)
{
	pDAC->CR &= ~DAC_BIAS_EN;
1a002c1e:	6803      	ldr	r3, [r0, #0]
1a002c20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
1a002c24:	6003      	str	r3, [r0, #0]

	if (bias  == DAC_MAX_UPDATE_RATE_400kHz) {
1a002c26:	2901      	cmp	r1, #1
1a002c28:	d000      	beq.n	1a002c2c <Chip_DAC_SetBias+0xe>
		pDAC->CR |= DAC_BIAS_EN;
	}
}
1a002c2a:	4770      	bx	lr
		pDAC->CR |= DAC_BIAS_EN;
1a002c2c:	6803      	ldr	r3, [r0, #0]
1a002c2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
1a002c32:	6003      	str	r3, [r0, #0]
}
1a002c34:	e7f9      	b.n	1a002c2a <Chip_DAC_SetBias+0xc>
1a002c36:	Address 0x000000001a002c36 is out of bounds.


1a002c38 <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a002c38:	2901      	cmp	r1, #1
1a002c3a:	d109      	bne.n	1a002c50 <Chip_I2C_EventHandler+0x18>
		return;
	}

	stat = &iic->mXfer->status;
1a002c3c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a002c40:	0082      	lsls	r2, r0, #2
1a002c42:	4b04      	ldr	r3, [pc, #16]	; (1a002c54 <Chip_I2C_EventHandler+0x1c>)
1a002c44:	4413      	add	r3, r2
1a002c46:	691a      	ldr	r2, [r3, #16]
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
1a002c48:	7d13      	ldrb	r3, [r2, #20]
1a002c4a:	b2db      	uxtb	r3, r3
1a002c4c:	2b04      	cmp	r3, #4
1a002c4e:	d0fb      	beq.n	1a002c48 <Chip_I2C_EventHandler+0x10>
}
1a002c50:	4770      	bx	lr
1a002c52:	bf00      	nop
1a002c54:	1000000c 	.word	0x1000000c

1a002c58 <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a002c58:	b570      	push	{r4, r5, r6, lr}
1a002c5a:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a002c5c:	4e06      	ldr	r6, [pc, #24]	; (1a002c78 <Chip_I2C_Init+0x20>)
1a002c5e:	00c4      	lsls	r4, r0, #3
1a002c60:	1a22      	subs	r2, r4, r0
1a002c62:	0093      	lsls	r3, r2, #2
1a002c64:	4433      	add	r3, r6
1a002c66:	8898      	ldrh	r0, [r3, #4]
1a002c68:	f000 fc5e 	bl	1a003528 <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a002c6c:	1b64      	subs	r4, r4, r5
1a002c6e:	00a3      	lsls	r3, r4, #2
1a002c70:	58f3      	ldr	r3, [r6, r3]
1a002c72:	226c      	movs	r2, #108	; 0x6c
1a002c74:	619a      	str	r2, [r3, #24]
}
1a002c76:	bd70      	pop	{r4, r5, r6, pc}
1a002c78:	1000000c 	.word	0x1000000c

1a002c7c <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a002c7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a002c80:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a002c82:	4e0b      	ldr	r6, [pc, #44]	; (1a002cb0 <Chip_I2C_SetClockRate+0x34>)
1a002c84:	00c5      	lsls	r5, r0, #3
1a002c86:	1a2b      	subs	r3, r5, r0
1a002c88:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a002c8c:	eb06 0308 	add.w	r3, r6, r8
1a002c90:	8898      	ldrh	r0, [r3, #4]
1a002c92:	f000 fc7d 	bl	1a003590 <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a002c96:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a002c9a:	f856 3008 	ldr.w	r3, [r6, r8]
1a002c9e:	0842      	lsrs	r2, r0, #1
1a002ca0:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a002ca2:	f856 3008 	ldr.w	r3, [r6, r8]
1a002ca6:	691a      	ldr	r2, [r3, #16]
1a002ca8:	1a80      	subs	r0, r0, r2
1a002caa:	6158      	str	r0, [r3, #20]
}
1a002cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a002cb0:	1000000c 	.word	0x1000000c

1a002cb4 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a002cb4:	4b09      	ldr	r3, [pc, #36]	; (1a002cdc <Chip_UART_GetIndex+0x28>)
1a002cb6:	4298      	cmp	r0, r3
1a002cb8:	d009      	beq.n	1a002cce <Chip_UART_GetIndex+0x1a>
1a002cba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a002cbe:	4298      	cmp	r0, r3
1a002cc0:	d007      	beq.n	1a002cd2 <Chip_UART_GetIndex+0x1e>
1a002cc2:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a002cc6:	4298      	cmp	r0, r3
1a002cc8:	d005      	beq.n	1a002cd6 <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a002cca:	2000      	movs	r0, #0
1a002ccc:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a002cce:	2002      	movs	r0, #2
1a002cd0:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a002cd2:	2003      	movs	r0, #3
1a002cd4:	4770      	bx	lr
			return 1;
1a002cd6:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a002cd8:	4770      	bx	lr
1a002cda:	bf00      	nop
1a002cdc:	400c1000 	.word	0x400c1000

1a002ce0 <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a002ce0:	b530      	push	{r4, r5, lr}
1a002ce2:	b083      	sub	sp, #12
1a002ce4:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a002ce6:	f7ff ffe5 	bl	1a002cb4 <Chip_UART_GetIndex>
1a002cea:	2301      	movs	r3, #1
1a002cec:	461a      	mov	r2, r3
1a002cee:	4619      	mov	r1, r3
1a002cf0:	4d0e      	ldr	r5, [pc, #56]	; (1a002d2c <Chip_UART_Init+0x4c>)
1a002cf2:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a002cf6:	f000 fbf9 	bl	1a0034ec <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a002cfa:	2307      	movs	r3, #7
1a002cfc:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a002cfe:	2300      	movs	r3, #0
1a002d00:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a002d02:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a002d04:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a002d06:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a002d08:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a002d0a:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a002d0c:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a002d0e:	4b08      	ldr	r3, [pc, #32]	; (1a002d30 <Chip_UART_Init+0x50>)
1a002d10:	429c      	cmp	r4, r3
1a002d12:	d006      	beq.n	1a002d22 <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a002d14:	2303      	movs	r3, #3
1a002d16:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a002d18:	2310      	movs	r3, #16
1a002d1a:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a002d1c:	9b01      	ldr	r3, [sp, #4]
}
1a002d1e:	b003      	add	sp, #12
1a002d20:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a002d22:	2300      	movs	r3, #0
1a002d24:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a002d26:	69a3      	ldr	r3, [r4, #24]
1a002d28:	9301      	str	r3, [sp, #4]
1a002d2a:	e7f3      	b.n	1a002d14 <Chip_UART_Init+0x34>
1a002d2c:	1a0055f0 	.word	0x1a0055f0
1a002d30:	40082000 	.word	0x40082000

1a002d34 <Chip_UART_SetBaud>:
	return readBytes;
}

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
1a002d34:	b538      	push	{r3, r4, r5, lr}
1a002d36:	4605      	mov	r5, r0
1a002d38:	460c      	mov	r4, r1
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a002d3a:	f7ff ffbb 	bl	1a002cb4 <Chip_UART_GetIndex>
1a002d3e:	4b0c      	ldr	r3, [pc, #48]	; (1a002d70 <Chip_UART_SetBaud+0x3c>)
1a002d40:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a002d44:	f000 fc24 	bl	1a003590 <Chip_Clock_GetRate>
	div = clkin / (baudrate * 16);
1a002d48:	0123      	lsls	r3, r4, #4
1a002d4a:	fbb0 f3f3 	udiv	r3, r0, r3

	/* High and low halves of the divider */
	divh = div / 256;
	divl = div - (divh * 256);
1a002d4e:	b2d9      	uxtb	r1, r3
	pUART->LCR |= UART_LCR_DLAB_EN;
1a002d50:	68ea      	ldr	r2, [r5, #12]
1a002d52:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a002d56:	60ea      	str	r2, [r5, #12]
	pUART->DLL = (uint32_t) dll;
1a002d58:	6029      	str	r1, [r5, #0]
	pUART->DLM = (uint32_t) dlm;
1a002d5a:	f3c3 2207 	ubfx	r2, r3, #8, #8
1a002d5e:	606a      	str	r2, [r5, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a002d60:	68ea      	ldr	r2, [r5, #12]
1a002d62:	f022 0280 	bic.w	r2, r2, #128	; 0x80
1a002d66:	60ea      	str	r2, [r5, #12]
	Chip_UART_SetDivisorLatches(pUART, divl, divh);
	Chip_UART_DisableDivisorAccess(pUART);

	/* Fractional FDR alreadt setup for 1 in UART init */

	return (clkin / div) >> 4;
1a002d68:	fbb0 f0f3 	udiv	r0, r0, r3
}
1a002d6c:	0900      	lsrs	r0, r0, #4
1a002d6e:	bd38      	pop	{r3, r4, r5, pc}
1a002d70:	1a0055e8 	.word	0x1a0055e8

1a002d74 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a002d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002d78:	b083      	sub	sp, #12
1a002d7a:	9001      	str	r0, [sp, #4]
1a002d7c:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a002d7e:	f7ff ff99 	bl	1a002cb4 <Chip_UART_GetIndex>
1a002d82:	4b32      	ldr	r3, [pc, #200]	; (1a002e4c <Chip_UART_SetBaudFDR+0xd8>)
1a002d84:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a002d88:	f000 fc02 	bl	1a003590 <Chip_Clock_GetRate>
1a002d8c:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a002d8e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a002d92:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a002d94:	f04f 0b00 	mov.w	fp, #0
1a002d98:	46a2      	mov	sl, r4
1a002d9a:	46d9      	mov	r9, fp
	for (m = 1; odiff && m < 16; m++) {
1a002d9c:	e02a      	b.n	1a002df4 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a002d9e:	4242      	negs	r2, r0
				div ++;
1a002da0:	1c4b      	adds	r3, r1, #1
1a002da2:	e017      	b.n	1a002dd4 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a002da4:	b30a      	cbz	r2, 1a002dea <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a002da6:	4617      	mov	r7, r2
			sd = d;
1a002da8:	46ab      	mov	fp, r5
			sm = m;
1a002daa:	46a2      	mov	sl, r4
			sdiv = div;
1a002dac:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a002dae:	3501      	adds	r5, #1
1a002db0:	42ac      	cmp	r4, r5
1a002db2:	d91e      	bls.n	1a002df2 <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a002db4:	0933      	lsrs	r3, r6, #4
1a002db6:	0730      	lsls	r0, r6, #28
1a002db8:	fba4 0100 	umull	r0, r1, r4, r0
1a002dbc:	fb04 1103 	mla	r1, r4, r3, r1
1a002dc0:	1962      	adds	r2, r4, r5
1a002dc2:	fb08 f202 	mul.w	r2, r8, r2
1a002dc6:	2300      	movs	r3, #0
1a002dc8:	f001 f904 	bl	1a003fd4 <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a002dcc:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a002dce:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a002dd0:	2800      	cmp	r0, #0
1a002dd2:	dbe4      	blt.n	1a002d9e <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a002dd4:	4297      	cmp	r7, r2
1a002dd6:	d3ea      	bcc.n	1a002dae <Chip_UART_SetBaudFDR+0x3a>
1a002dd8:	2b00      	cmp	r3, #0
1a002dda:	d0e8      	beq.n	1a002dae <Chip_UART_SetBaudFDR+0x3a>
1a002ddc:	0c19      	lsrs	r1, r3, #16
1a002dde:	d1e6      	bne.n	1a002dae <Chip_UART_SetBaudFDR+0x3a>
1a002de0:	2b02      	cmp	r3, #2
1a002de2:	d8df      	bhi.n	1a002da4 <Chip_UART_SetBaudFDR+0x30>
1a002de4:	2d00      	cmp	r5, #0
1a002de6:	d0dd      	beq.n	1a002da4 <Chip_UART_SetBaudFDR+0x30>
1a002de8:	e7e1      	b.n	1a002dae <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a002dea:	4617      	mov	r7, r2
			sd = d;
1a002dec:	46ab      	mov	fp, r5
			sm = m;
1a002dee:	46a2      	mov	sl, r4
			sdiv = div;
1a002df0:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a002df2:	3401      	adds	r4, #1
1a002df4:	b11f      	cbz	r7, 1a002dfe <Chip_UART_SetBaudFDR+0x8a>
1a002df6:	2c0f      	cmp	r4, #15
1a002df8:	d801      	bhi.n	1a002dfe <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a002dfa:	2500      	movs	r5, #0
1a002dfc:	e7d8      	b.n	1a002db0 <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a002dfe:	f1b9 0f00 	cmp.w	r9, #0
1a002e02:	d01e      	beq.n	1a002e42 <Chip_UART_SetBaudFDR+0xce>
	pUART->LCR |= UART_LCR_DLAB_EN;
1a002e04:	9a01      	ldr	r2, [sp, #4]
1a002e06:	4611      	mov	r1, r2
1a002e08:	68d3      	ldr	r3, [r2, #12]
1a002e0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a002e0e:	60d3      	str	r3, [r2, #12]
	pUART->DLL = (uint32_t) dll;
1a002e10:	fa5f f389 	uxtb.w	r3, r9
1a002e14:	6013      	str	r3, [r2, #0]
	pUART->DLM = (uint32_t) dlm;
1a002e16:	f3c9 2307 	ubfx	r3, r9, #8, #8
1a002e1a:	6053      	str	r3, [r2, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a002e1c:	68d3      	ldr	r3, [r2, #12]
1a002e1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a002e22:	60d3      	str	r3, [r2, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a002e24:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a002e28:	b2db      	uxtb	r3, r3
1a002e2a:	f00b 020f 	and.w	r2, fp, #15
1a002e2e:	4313      	orrs	r3, r2
1a002e30:	628b      	str	r3, [r1, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a002e32:	0933      	lsrs	r3, r6, #4
1a002e34:	fb0a f303 	mul.w	r3, sl, r3
1a002e38:	44da      	add	sl, fp
1a002e3a:	fb09 f90a 	mul.w	r9, r9, sl
1a002e3e:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a002e42:	4648      	mov	r0, r9
1a002e44:	b003      	add	sp, #12
1a002e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a002e4a:	bf00      	nop
1a002e4c:	1a0055e8 	.word	0x1a0055e8

1a002e50 <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a002e50:	4b03      	ldr	r3, [pc, #12]	; (1a002e60 <Chip_ADC_GetClockIndex+0x10>)
1a002e52:	4298      	cmp	r0, r3
1a002e54:	d001      	beq.n	1a002e5a <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a002e56:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a002e58:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a002e5a:	2004      	movs	r0, #4
1a002e5c:	4770      	bx	lr
1a002e5e:	bf00      	nop
1a002e60:	400e4000 	.word	0x400e4000

1a002e64 <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a002e64:	b570      	push	{r4, r5, r6, lr}
1a002e66:	460d      	mov	r5, r1
1a002e68:	4614      	mov	r4, r2
1a002e6a:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a002e6c:	f7ff fff0 	bl	1a002e50 <Chip_ADC_GetClockIndex>
1a002e70:	f000 fb8e 	bl	1a003590 <Chip_Clock_GetRate>
	if (burstMode) {
1a002e74:	b155      	cbz	r5, 1a002e8c <getClkDiv+0x28>
		fullAdcRate = adcRate * clks;
1a002e76:	fb04 f406 	mul.w	r4, r4, r6
	else {
		fullAdcRate = adcRate * getFullConvClk();
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a002e7a:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a002e7e:	0064      	lsls	r4, r4, #1
1a002e80:	fbb0 f0f4 	udiv	r0, r0, r4
1a002e84:	b2c0      	uxtb	r0, r0
1a002e86:	3801      	subs	r0, #1
	return div;
}
1a002e88:	b2c0      	uxtb	r0, r0
1a002e8a:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * getFullConvClk();
1a002e8c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a002e90:	eb04 0443 	add.w	r4, r4, r3, lsl #1
1a002e94:	e7f1      	b.n	1a002e7a <getClkDiv+0x16>

1a002e96 <setStartMode>:

/* Set start mode for ADC */
void setStartMode(LPC_ADC_T *pADC, uint8_t start_mode)
{
	uint32_t temp;
	temp = pADC->CR & (~ADC_CR_START_MASK);
1a002e96:	6803      	ldr	r3, [r0, #0]
1a002e98:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
	pADC->CR = temp | (ADC_CR_START_MODE_SEL((uint32_t) start_mode));
1a002e9c:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
1a002ea0:	6001      	str	r1, [r0, #0]
}
1a002ea2:	4770      	bx	lr

1a002ea4 <readAdcVal>:

/* Get the ADC value */
Status readAdcVal(LPC_ADC_T *pADC, uint8_t channel, uint16_t *data)
{
	uint32_t temp;
	temp = pADC->DR[channel];
1a002ea4:	3104      	adds	r1, #4
1a002ea6:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
	if (!ADC_DR_DONE(temp)) {
1a002eaa:	2b00      	cmp	r3, #0
1a002eac:	da04      	bge.n	1a002eb8 <readAdcVal+0x14>
		return ERROR;
	}
	/*	if(ADC_DR_OVERRUN(temp) && (pADC->CR & ADC_CR_BURST)) */
	/*	return ERROR; */
	*data = (uint16_t) ADC_DR_RESULT(temp);
1a002eae:	f3c3 1389 	ubfx	r3, r3, #6, #10
1a002eb2:	8013      	strh	r3, [r2, #0]
	return SUCCESS;
1a002eb4:	2001      	movs	r0, #1
1a002eb6:	4770      	bx	lr
		return ERROR;
1a002eb8:	2000      	movs	r0, #0
}
1a002eba:	4770      	bx	lr

1a002ebc <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a002ebc:	b538      	push	{r3, r4, r5, lr}
1a002ebe:	4605      	mov	r5, r0
1a002ec0:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a002ec2:	f7ff ffc5 	bl	1a002e50 <Chip_ADC_GetClockIndex>
1a002ec6:	2301      	movs	r3, #1
1a002ec8:	461a      	mov	r2, r3
1a002eca:	4619      	mov	r1, r3
1a002ecc:	f000 fb0e 	bl	1a0034ec <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a002ed0:	2100      	movs	r1, #0
1a002ed2:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a002ed4:	4a08      	ldr	r2, [pc, #32]	; (1a002ef8 <Chip_ADC_Init+0x3c>)
1a002ed6:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a002ed8:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a002eda:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a002edc:	230b      	movs	r3, #11
1a002ede:	4628      	mov	r0, r5
1a002ee0:	f7ff ffc0 	bl	1a002e64 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a002ee4:	0200      	lsls	r0, r0, #8
1a002ee6:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a002eea:	7920      	ldrb	r0, [r4, #4]
1a002eec:	0440      	lsls	r0, r0, #17
1a002eee:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a002ef2:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a002ef4:	6028      	str	r0, [r5, #0]
}
1a002ef6:	bd38      	pop	{r3, r4, r5, pc}
1a002ef8:	00061a80 	.word	0x00061a80

1a002efc <Chip_ADC_DeInit>:

/* Shutdown ADC */
void Chip_ADC_DeInit(LPC_ADC_T *pADC)
{
1a002efc:	b508      	push	{r3, lr}
	pADC->INTEN = 0x00000100;
1a002efe:	f44f 7280 	mov.w	r2, #256	; 0x100
1a002f02:	60c2      	str	r2, [r0, #12]
	pADC->CR = 0;
1a002f04:	2200      	movs	r2, #0
1a002f06:	6002      	str	r2, [r0, #0]
	Chip_Clock_Disable(Chip_ADC_GetClockIndex(pADC));
1a002f08:	f7ff ffa2 	bl	1a002e50 <Chip_ADC_GetClockIndex>
1a002f0c:	f000 fb26 	bl	1a00355c <Chip_Clock_Disable>
}
1a002f10:	bd08      	pop	{r3, pc}

1a002f12 <Chip_ADC_ReadValue>:

/* Get the ADC value */
Status Chip_ADC_ReadValue(LPC_ADC_T *pADC, uint8_t channel, uint16_t *data)
{
1a002f12:	b508      	push	{r3, lr}
	return readAdcVal(pADC, channel, data);
1a002f14:	f7ff ffc6 	bl	1a002ea4 <readAdcVal>
}
1a002f18:	bd08      	pop	{r3, pc}

1a002f1a <Chip_ADC_ReadStatus>:

/* Get ADC Channel status from ADC data register */
FlagStatus Chip_ADC_ReadStatus(LPC_ADC_T *pADC, uint8_t channel, uint32_t StatusType)
{
	switch (StatusType) {
1a002f1a:	2a01      	cmp	r2, #1
1a002f1c:	d00a      	beq.n	1a002f34 <Chip_ADC_ReadStatus+0x1a>
1a002f1e:	b11a      	cbz	r2, 1a002f28 <Chip_ADC_ReadStatus+0xe>
1a002f20:	2a02      	cmp	r2, #2
1a002f22:	d00f      	beq.n	1a002f44 <Chip_ADC_ReadStatus+0x2a>
		return pADC->STAT >> 16 ? SET : RESET;

	default:
		break;
	}
	return RESET;
1a002f24:	2000      	movs	r0, #0
1a002f26:	4770      	bx	lr
		return (pADC->STAT & (1UL << channel)) ? SET : RESET;
1a002f28:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a002f2a:	40c8      	lsrs	r0, r1
1a002f2c:	f000 0001 	and.w	r0, r0, #1
1a002f30:	b2c0      	uxtb	r0, r0
1a002f32:	4770      	bx	lr
		channel += 8;
1a002f34:	3108      	adds	r1, #8
1a002f36:	b2c9      	uxtb	r1, r1
		return (pADC->STAT & (1UL << channel)) ? SET : RESET;
1a002f38:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a002f3a:	40c8      	lsrs	r0, r1
1a002f3c:	f000 0001 	and.w	r0, r0, #1
1a002f40:	b2c0      	uxtb	r0, r0
1a002f42:	4770      	bx	lr
		return pADC->STAT >> 16 ? SET : RESET;
1a002f44:	6b03      	ldr	r3, [r0, #48]	; 0x30
1a002f46:	0c1b      	lsrs	r3, r3, #16
1a002f48:	bf14      	ite	ne
1a002f4a:	2001      	movne	r0, #1
1a002f4c:	2000      	moveq	r0, #0
}
1a002f4e:	4770      	bx	lr

1a002f50 <Chip_ADC_Int_SetChannelCmd>:

/* Enable/Disable interrupt for ADC channel */
void Chip_ADC_Int_SetChannelCmd(LPC_ADC_T *pADC, uint8_t channel, FunctionalState NewState)
{
	if (NewState == ENABLE) {
1a002f50:	2a01      	cmp	r2, #1
1a002f52:	d006      	beq.n	1a002f62 <Chip_ADC_Int_SetChannelCmd+0x12>
		pADC->INTEN |= (1UL << channel);
	}
	else {
		pADC->INTEN &= (~(1UL << channel));
1a002f54:	68c3      	ldr	r3, [r0, #12]
1a002f56:	2201      	movs	r2, #1
1a002f58:	408a      	lsls	r2, r1
1a002f5a:	ea23 0302 	bic.w	r3, r3, r2
1a002f5e:	60c3      	str	r3, [r0, #12]
1a002f60:	4770      	bx	lr
{
1a002f62:	b410      	push	{r4}
		pADC->INTEN |= (1UL << channel);
1a002f64:	68c4      	ldr	r4, [r0, #12]
1a002f66:	408a      	lsls	r2, r1
1a002f68:	4314      	orrs	r4, r2
1a002f6a:	60c4      	str	r4, [r0, #12]
	}
}
1a002f6c:	f85d 4b04 	ldr.w	r4, [sp], #4
1a002f70:	4770      	bx	lr

1a002f72 <Chip_ADC_SetStartMode>:

/* Select the mode starting the AD conversion */
void Chip_ADC_SetStartMode(LPC_ADC_T *pADC, ADC_START_MODE_T mode, ADC_EDGE_CFG_T EdgeOption)
{
1a002f72:	b508      	push	{r3, lr}
	if ((mode != ADC_START_NOW) && (mode != ADC_NO_START)) {
1a002f74:	2901      	cmp	r1, #1
1a002f76:	d904      	bls.n	1a002f82 <Chip_ADC_SetStartMode+0x10>
		if (EdgeOption) {
1a002f78:	b132      	cbz	r2, 1a002f88 <Chip_ADC_SetStartMode+0x16>
			pADC->CR |= ADC_CR_EDGE;
1a002f7a:	6803      	ldr	r3, [r0, #0]
1a002f7c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
1a002f80:	6003      	str	r3, [r0, #0]
		}
		else {
			pADC->CR &= ~ADC_CR_EDGE;
		}
	}
	setStartMode(pADC, (uint8_t) mode);
1a002f82:	f7ff ff88 	bl	1a002e96 <setStartMode>
}
1a002f86:	bd08      	pop	{r3, pc}
			pADC->CR &= ~ADC_CR_EDGE;
1a002f88:	6803      	ldr	r3, [r0, #0]
1a002f8a:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
1a002f8e:	6003      	str	r3, [r0, #0]
1a002f90:	e7f7      	b.n	1a002f82 <Chip_ADC_SetStartMode+0x10>

1a002f92 <Chip_ADC_SetSampleRate>:

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a002f92:	b570      	push	{r4, r5, r6, lr}
1a002f94:	4605      	mov	r5, r0
1a002f96:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a002f98:	6804      	ldr	r4, [r0, #0]
1a002f9a:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a002f9e:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a002fa2:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a002fa4:	790b      	ldrb	r3, [r1, #4]
1a002fa6:	f1c3 030b 	rsb	r3, r3, #11
1a002faa:	b2db      	uxtb	r3, r3
1a002fac:	7949      	ldrb	r1, [r1, #5]
1a002fae:	f7ff ff59 	bl	1a002e64 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a002fb2:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a002fb6:	7933      	ldrb	r3, [r6, #4]
1a002fb8:	045b      	lsls	r3, r3, #17
1a002fba:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
1a002fbe:	4303      	orrs	r3, r0
	pADC->CR = cr;
1a002fc0:	602b      	str	r3, [r5, #0]
}
1a002fc2:	bd70      	pop	{r4, r5, r6, pc}

1a002fc4 <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a002fc4:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a002fc6:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a002fc8:	680a      	ldr	r2, [r1, #0]
1a002fca:	f7ff ffe2 	bl	1a002f92 <Chip_ADC_SetSampleRate>
}
1a002fce:	bd08      	pop	{r3, pc}

1a002fd0 <Chip_ADC_EnableChannel>:

/* Enable or disable the ADC channel on ADC peripheral */
void Chip_ADC_EnableChannel(LPC_ADC_T *pADC, ADC_CHANNEL_T channel, FunctionalState NewState)
{
	if (NewState == ENABLE) {
1a002fd0:	2a01      	cmp	r2, #1
1a002fd2:	d00a      	beq.n	1a002fea <Chip_ADC_EnableChannel+0x1a>
		pADC->CR |= ADC_CR_CH_SEL(channel);
	}
	else {
		pADC->CR &= ~ADC_CR_START_MASK;
1a002fd4:	6802      	ldr	r2, [r0, #0]
1a002fd6:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
1a002fda:	6002      	str	r2, [r0, #0]
		pADC->CR &= ~ADC_CR_CH_SEL(channel);
1a002fdc:	6803      	ldr	r3, [r0, #0]
1a002fde:	2201      	movs	r2, #1
1a002fe0:	408a      	lsls	r2, r1
1a002fe2:	ea23 0302 	bic.w	r3, r3, r2
1a002fe6:	6003      	str	r3, [r0, #0]
1a002fe8:	4770      	bx	lr
{
1a002fea:	b410      	push	{r4}
		pADC->CR |= ADC_CR_CH_SEL(channel);
1a002fec:	6804      	ldr	r4, [r0, #0]
1a002fee:	408a      	lsls	r2, r1
1a002ff0:	4314      	orrs	r4, r2
1a002ff2:	6004      	str	r4, [r0, #0]
	}
}
1a002ff4:	f85d 4b04 	ldr.w	r4, [sp], #4
1a002ff8:	4770      	bx	lr

1a002ffa <Chip_ADC_SetBurstCmd>:

/* Enable burst mode */
void Chip_ADC_SetBurstCmd(LPC_ADC_T *pADC, FunctionalState NewState)
{
1a002ffa:	b538      	push	{r3, r4, r5, lr}
1a002ffc:	4604      	mov	r4, r0
1a002ffe:	460d      	mov	r5, r1
	setStartMode(pADC, ADC_NO_START);
1a003000:	2100      	movs	r1, #0
1a003002:	f7ff ff48 	bl	1a002e96 <setStartMode>
	
    if (NewState == DISABLE) {
1a003006:	b925      	cbnz	r5, 1a003012 <Chip_ADC_SetBurstCmd+0x18>
		pADC->CR &= ~ADC_CR_BURST;
1a003008:	6823      	ldr	r3, [r4, #0]
1a00300a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
1a00300e:	6023      	str	r3, [r4, #0]
	}
	else {
		pADC->CR |= ADC_CR_BURST;
	}
}
1a003010:	bd38      	pop	{r3, r4, r5, pc}
		pADC->CR |= ADC_CR_BURST;
1a003012:	6823      	ldr	r3, [r4, #0]
1a003014:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
1a003018:	6023      	str	r3, [r4, #0]
}
1a00301a:	e7f9      	b.n	1a003010 <Chip_ADC_SetBurstCmd+0x16>

1a00301c <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a00301c:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a00301e:	680b      	ldr	r3, [r1, #0]
1a003020:	f013 0f80 	tst.w	r3, #128	; 0x80
1a003024:	d002      	beq.n	1a00302c <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a003026:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a00302a:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a00302c:	4607      	mov	r7, r0
1a00302e:	2501      	movs	r5, #1
1a003030:	e03a      	b.n	1a0030a8 <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a003032:	694b      	ldr	r3, [r1, #20]
1a003034:	fb03 f302 	mul.w	r3, r3, r2
1a003038:	fbb3 f3f5 	udiv	r3, r3, r5
1a00303c:	e01c      	b.n	1a003078 <pll_calc_divs+0x5c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a00303e:	461c      	mov	r4, r3
	if (val < 0)
1a003040:	ebb0 0c04 	subs.w	ip, r0, r4
1a003044:	d427      	bmi.n	1a003096 <pll_calc_divs+0x7a>
				} else {
					fout = fcco >> (p + 1);
				}

				if (ABS(freq - fout) < prev) {
1a003046:	4567      	cmp	r7, ip
1a003048:	d906      	bls.n	1a003058 <pll_calc_divs+0x3c>
					ppll->nsel = n;
1a00304a:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a00304c:	1c77      	adds	r7, r6, #1
1a00304e:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a003050:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a003052:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a003054:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a003056:	4667      	mov	r7, ip
			for (m = 1; m <= 256; m++) {
1a003058:	3201      	adds	r2, #1
1a00305a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a00305e:	dc1d      	bgt.n	1a00309c <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 6)) {
1a003060:	680c      	ldr	r4, [r1, #0]
1a003062:	f014 0f40 	tst.w	r4, #64	; 0x40
1a003066:	d0e4      	beq.n	1a003032 <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a003068:	1c73      	adds	r3, r6, #1
1a00306a:	fa02 fc03 	lsl.w	ip, r2, r3
1a00306e:	694b      	ldr	r3, [r1, #20]
1a003070:	fb03 f30c 	mul.w	r3, r3, ip
1a003074:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a003078:	f8df c038 	ldr.w	ip, [pc, #56]	; 1a0030b4 <pll_calc_divs+0x98>
1a00307c:	4563      	cmp	r3, ip
1a00307e:	d9eb      	bls.n	1a003058 <pll_calc_divs+0x3c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a003080:	f8df c034 	ldr.w	ip, [pc, #52]	; 1a0030b8 <pll_calc_divs+0x9c>
1a003084:	4563      	cmp	r3, ip
1a003086:	d809      	bhi.n	1a00309c <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 7)) {
1a003088:	f014 0f80 	tst.w	r4, #128	; 0x80
1a00308c:	d1d7      	bne.n	1a00303e <pll_calc_divs+0x22>
					fout = fcco >> (p + 1);
1a00308e:	1c74      	adds	r4, r6, #1
1a003090:	fa23 f404 	lsr.w	r4, r3, r4
1a003094:	e7d4      	b.n	1a003040 <pll_calc_divs+0x24>
		return -val;
1a003096:	f1cc 0c00 	rsb	ip, ip, #0
1a00309a:	e7d4      	b.n	1a003046 <pll_calc_divs+0x2a>
		for (p = 0; p < 4; p ++) {
1a00309c:	3601      	adds	r6, #1
1a00309e:	2e03      	cmp	r6, #3
1a0030a0:	dc01      	bgt.n	1a0030a6 <pll_calc_divs+0x8a>
			for (m = 1; m <= 256; m++) {
1a0030a2:	2201      	movs	r2, #1
1a0030a4:	e7d9      	b.n	1a00305a <pll_calc_divs+0x3e>
	for (n = 1; n <= 4; n++) {
1a0030a6:	3501      	adds	r5, #1
1a0030a8:	2d04      	cmp	r5, #4
1a0030aa:	dc01      	bgt.n	1a0030b0 <pll_calc_divs+0x94>
		for (p = 0; p < 4; p ++) {
1a0030ac:	2600      	movs	r6, #0
1a0030ae:	e7f6      	b.n	1a00309e <pll_calc_divs+0x82>
				}
			}
		}
	}
}
1a0030b0:	bcf0      	pop	{r4, r5, r6, r7}
1a0030b2:	4770      	bx	lr
1a0030b4:	094c5eff 	.word	0x094c5eff
1a0030b8:	1312d000 	.word	0x1312d000

1a0030bc <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a0030bc:	b5f0      	push	{r4, r5, r6, r7, lr}
1a0030be:	b099      	sub	sp, #100	; 0x64
1a0030c0:	4605      	mov	r5, r0
1a0030c2:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a0030c4:	225c      	movs	r2, #92	; 0x5c
1a0030c6:	2100      	movs	r1, #0
1a0030c8:	a801      	add	r0, sp, #4
1a0030ca:	f001 fb0a 	bl	1a0046e2 <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a0030ce:	2380      	movs	r3, #128	; 0x80
1a0030d0:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a0030d2:	6963      	ldr	r3, [r4, #20]
1a0030d4:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a0030d6:	7923      	ldrb	r3, [r4, #4]
1a0030d8:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a0030dc:	4669      	mov	r1, sp
1a0030de:	4628      	mov	r0, r5
1a0030e0:	f7ff ff9c 	bl	1a00301c <pll_calc_divs>
	if (pll[0].fout == freq) {
1a0030e4:	9b06      	ldr	r3, [sp, #24]
1a0030e6:	42ab      	cmp	r3, r5
1a0030e8:	d027      	beq.n	1a00313a <pll_get_frac+0x7e>
	if (val < 0)
1a0030ea:	1aeb      	subs	r3, r5, r3
1a0030ec:	d42e      	bmi.n	1a00314c <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a0030ee:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a0030f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a0030f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a0030f6:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a0030f8:	6963      	ldr	r3, [r4, #20]
1a0030fa:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a0030fc:	7923      	ldrb	r3, [r4, #4]
1a0030fe:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a003102:	a910      	add	r1, sp, #64	; 0x40
1a003104:	4628      	mov	r0, r5
1a003106:	f7ff ff89 	bl	1a00301c <pll_calc_divs>
	if (pll[2].fout == freq) {
1a00310a:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a00310c:	42ab      	cmp	r3, r5
1a00310e:	d01f      	beq.n	1a003150 <pll_get_frac+0x94>
	if (val < 0)
1a003110:	1aeb      	subs	r3, r5, r3
1a003112:	d425      	bmi.n	1a003160 <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a003114:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a003116:	4b2b      	ldr	r3, [pc, #172]	; (1a0031c4 <pll_get_frac+0x108>)
1a003118:	429d      	cmp	r5, r3
1a00311a:	d923      	bls.n	1a003164 <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a00311c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a00311e:	1aed      	subs	r5, r5, r3
1a003120:	d433      	bmi.n	1a00318a <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a003122:	42ae      	cmp	r6, r5
1a003124:	dc3b      	bgt.n	1a00319e <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a003126:	42be      	cmp	r6, r7
1a003128:	dc31      	bgt.n	1a00318e <pll_get_frac+0xd2>
			*ppll = pll[0];
1a00312a:	466d      	mov	r5, sp
1a00312c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00312e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003130:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003134:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a003138:	e006      	b.n	1a003148 <pll_get_frac+0x8c>
		*ppll = pll[0];
1a00313a:	466d      	mov	r5, sp
1a00313c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00313e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003140:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003144:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a003148:	b019      	add	sp, #100	; 0x64
1a00314a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a00314c:	425b      	negs	r3, r3
1a00314e:	e7ce      	b.n	1a0030ee <pll_get_frac+0x32>
		*ppll = pll[2];
1a003150:	ad10      	add	r5, sp, #64	; 0x40
1a003152:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a003154:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003156:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00315a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a00315e:	e7f3      	b.n	1a003148 <pll_get_frac+0x8c>
		return -val;
1a003160:	425b      	negs	r3, r3
1a003162:	e7d7      	b.n	1a003114 <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a003164:	2340      	movs	r3, #64	; 0x40
1a003166:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a003168:	6963      	ldr	r3, [r4, #20]
1a00316a:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a00316c:	a908      	add	r1, sp, #32
1a00316e:	4628      	mov	r0, r5
1a003170:	f7ff ff54 	bl	1a00301c <pll_calc_divs>
		if (pll[1].fout == freq) {
1a003174:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a003176:	42ab      	cmp	r3, r5
1a003178:	d1d0      	bne.n	1a00311c <pll_get_frac+0x60>
			*ppll = pll[1];
1a00317a:	ad08      	add	r5, sp, #32
1a00317c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00317e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003180:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003184:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a003188:	e7de      	b.n	1a003148 <pll_get_frac+0x8c>
		return -val;
1a00318a:	426d      	negs	r5, r5
1a00318c:	e7c9      	b.n	1a003122 <pll_get_frac+0x66>
			*ppll = pll[2];
1a00318e:	ad10      	add	r5, sp, #64	; 0x40
1a003190:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a003192:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003194:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003198:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a00319c:	e7d4      	b.n	1a003148 <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a00319e:	42af      	cmp	r7, r5
1a0031a0:	db07      	blt.n	1a0031b2 <pll_get_frac+0xf6>
			*ppll = pll[1];
1a0031a2:	ad08      	add	r5, sp, #32
1a0031a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0031a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0031a8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0031ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0031b0:	e7ca      	b.n	1a003148 <pll_get_frac+0x8c>
			*ppll = pll[2];
1a0031b2:	ad10      	add	r5, sp, #64	; 0x40
1a0031b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0031b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0031b8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0031bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0031c0:	e7c2      	b.n	1a003148 <pll_get_frac+0x8c>
1a0031c2:	bf00      	nop
1a0031c4:	068e7780 	.word	0x068e7780

1a0031c8 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a0031c8:	b430      	push	{r4, r5}
1a0031ca:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a0031cc:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a0031ce:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a0031d0:	e000      	b.n	1a0031d4 <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a0031d2:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a0031d4:	281c      	cmp	r0, #28
1a0031d6:	d118      	bne.n	1a00320a <Chip_Clock_FindBaseClock+0x42>
1a0031d8:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a0031dc:	0051      	lsls	r1, r2, #1
1a0031de:	4a0c      	ldr	r2, [pc, #48]	; (1a003210 <Chip_Clock_FindBaseClock+0x48>)
1a0031e0:	440a      	add	r2, r1
1a0031e2:	7914      	ldrb	r4, [r2, #4]
1a0031e4:	4284      	cmp	r4, r0
1a0031e6:	d010      	beq.n	1a00320a <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a0031e8:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a0031ec:	004a      	lsls	r2, r1, #1
1a0031ee:	4908      	ldr	r1, [pc, #32]	; (1a003210 <Chip_Clock_FindBaseClock+0x48>)
1a0031f0:	5a8a      	ldrh	r2, [r1, r2]
1a0031f2:	42aa      	cmp	r2, r5
1a0031f4:	d8ed      	bhi.n	1a0031d2 <Chip_Clock_FindBaseClock+0xa>
1a0031f6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a0031fa:	0051      	lsls	r1, r2, #1
1a0031fc:	4a04      	ldr	r2, [pc, #16]	; (1a003210 <Chip_Clock_FindBaseClock+0x48>)
1a0031fe:	440a      	add	r2, r1
1a003200:	8852      	ldrh	r2, [r2, #2]
1a003202:	42aa      	cmp	r2, r5
1a003204:	d3e5      	bcc.n	1a0031d2 <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a003206:	4620      	mov	r0, r4
1a003208:	e7e4      	b.n	1a0031d4 <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a00320a:	bc30      	pop	{r4, r5}
1a00320c:	4770      	bx	lr
1a00320e:	bf00      	nop
1a003210:	1a005604 	.word	0x1a005604

1a003214 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a003214:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a003216:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a00321a:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a00321c:	4a0d      	ldr	r2, [pc, #52]	; (1a003254 <Chip_Clock_EnableCrystal+0x40>)
1a00321e:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a003220:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a003224:	6992      	ldr	r2, [r2, #24]
1a003226:	428a      	cmp	r2, r1
1a003228:	d001      	beq.n	1a00322e <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a00322a:	4a0a      	ldr	r2, [pc, #40]	; (1a003254 <Chip_Clock_EnableCrystal+0x40>)
1a00322c:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a00322e:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a003232:	4a09      	ldr	r2, [pc, #36]	; (1a003258 <Chip_Clock_EnableCrystal+0x44>)
1a003234:	6811      	ldr	r1, [r2, #0]
1a003236:	4a09      	ldr	r2, [pc, #36]	; (1a00325c <Chip_Clock_EnableCrystal+0x48>)
1a003238:	4291      	cmp	r1, r2
1a00323a:	d901      	bls.n	1a003240 <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a00323c:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a003240:	4a04      	ldr	r2, [pc, #16]	; (1a003254 <Chip_Clock_EnableCrystal+0x40>)
1a003242:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a003244:	9b01      	ldr	r3, [sp, #4]
1a003246:	1e5a      	subs	r2, r3, #1
1a003248:	9201      	str	r2, [sp, #4]
1a00324a:	2b00      	cmp	r3, #0
1a00324c:	d1fa      	bne.n	1a003244 <Chip_Clock_EnableCrystal+0x30>
}
1a00324e:	b002      	add	sp, #8
1a003250:	4770      	bx	lr
1a003252:	bf00      	nop
1a003254:	40050000 	.word	0x40050000
1a003258:	1a00556c 	.word	0x1a00556c
1a00325c:	01312cff 	.word	0x01312cff

1a003260 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a003260:	3012      	adds	r0, #18
1a003262:	4b05      	ldr	r3, [pc, #20]	; (1a003278 <Chip_Clock_GetDividerSource+0x18>)
1a003264:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a003268:	f010 0f01 	tst.w	r0, #1
1a00326c:	d102      	bne.n	1a003274 <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a00326e:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a003272:	4770      	bx	lr
		return CLKINPUT_PD;
1a003274:	2011      	movs	r0, #17
}
1a003276:	4770      	bx	lr
1a003278:	40050000 	.word	0x40050000

1a00327c <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a00327c:	f100 0212 	add.w	r2, r0, #18
1a003280:	4b03      	ldr	r3, [pc, #12]	; (1a003290 <Chip_Clock_GetDividerDivisor+0x14>)
1a003282:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a003286:	4b03      	ldr	r3, [pc, #12]	; (1a003294 <Chip_Clock_GetDividerDivisor+0x18>)
1a003288:	5c18      	ldrb	r0, [r3, r0]
}
1a00328a:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a00328e:	4770      	bx	lr
1a003290:	40050000 	.word	0x40050000
1a003294:	1a0055fc 	.word	0x1a0055fc

1a003298 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a003298:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a00329a:	2810      	cmp	r0, #16
1a00329c:	d80a      	bhi.n	1a0032b4 <Chip_Clock_GetClockInputHz+0x1c>
1a00329e:	e8df f000 	tbb	[pc, r0]
1a0032a2:	0b44      	.short	0x0b44
1a0032a4:	0921180d 	.word	0x0921180d
1a0032a8:	2d2a2724 	.word	0x2d2a2724
1a0032ac:	34300909 	.word	0x34300909
1a0032b0:	3c38      	.short	0x3c38
1a0032b2:	40          	.byte	0x40
1a0032b3:	00          	.byte	0x00
	uint32_t rate = 0;
1a0032b4:	2000      	movs	r0, #0
1a0032b6:	e03a      	b.n	1a00332e <Chip_Clock_GetClockInputHz+0x96>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a0032b8:	481e      	ldr	r0, [pc, #120]	; (1a003334 <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a0032ba:	e038      	b.n	1a00332e <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a0032bc:	4b1e      	ldr	r3, [pc, #120]	; (1a003338 <Chip_Clock_GetClockInputHz+0xa0>)
1a0032be:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a0032c2:	f003 0307 	and.w	r3, r3, #7
1a0032c6:	2b04      	cmp	r3, #4
1a0032c8:	d001      	beq.n	1a0032ce <Chip_Clock_GetClockInputHz+0x36>
			/* MII mode requires 25MHz clock */
			rate = 25000000;
1a0032ca:	481c      	ldr	r0, [pc, #112]	; (1a00333c <Chip_Clock_GetClockInputHz+0xa4>)
1a0032cc:	e02f      	b.n	1a00332e <Chip_Clock_GetClockInputHz+0x96>
	uint32_t rate = 0;
1a0032ce:	2000      	movs	r0, #0
1a0032d0:	e02d      	b.n	1a00332e <Chip_Clock_GetClockInputHz+0x96>
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a0032d2:	4b19      	ldr	r3, [pc, #100]	; (1a003338 <Chip_Clock_GetClockInputHz+0xa0>)
1a0032d4:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a0032d8:	f003 0307 	and.w	r3, r3, #7
1a0032dc:	2b04      	cmp	r3, #4
1a0032de:	d027      	beq.n	1a003330 <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a0032e0:	4816      	ldr	r0, [pc, #88]	; (1a00333c <Chip_Clock_GetClockInputHz+0xa4>)
1a0032e2:	e024      	b.n	1a00332e <Chip_Clock_GetClockInputHz+0x96>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a0032e4:	4b16      	ldr	r3, [pc, #88]	; (1a003340 <Chip_Clock_GetClockInputHz+0xa8>)
1a0032e6:	6818      	ldr	r0, [r3, #0]
		break;
1a0032e8:	e021      	b.n	1a00332e <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a0032ea:	4b16      	ldr	r3, [pc, #88]	; (1a003344 <Chip_Clock_GetClockInputHz+0xac>)
1a0032ec:	6818      	ldr	r0, [r3, #0]
		break;
1a0032ee:	e01e      	b.n	1a00332e <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a0032f0:	4b15      	ldr	r3, [pc, #84]	; (1a003348 <Chip_Clock_GetClockInputHz+0xb0>)
1a0032f2:	6818      	ldr	r0, [r3, #0]
		break;
1a0032f4:	e01b      	b.n	1a00332e <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a0032f6:	4b14      	ldr	r3, [pc, #80]	; (1a003348 <Chip_Clock_GetClockInputHz+0xb0>)
1a0032f8:	6858      	ldr	r0, [r3, #4]
		break;
1a0032fa:	e018      	b.n	1a00332e <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a0032fc:	f000 f868 	bl	1a0033d0 <Chip_Clock_GetMainPLLHz>
		break;
1a003300:	e015      	b.n	1a00332e <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a003302:	2100      	movs	r1, #0
1a003304:	f000 f89a 	bl	1a00343c <Chip_Clock_GetDivRate>
		break;
1a003308:	e011      	b.n	1a00332e <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a00330a:	2101      	movs	r1, #1
1a00330c:	f000 f896 	bl	1a00343c <Chip_Clock_GetDivRate>
		break;
1a003310:	e00d      	b.n	1a00332e <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a003312:	2102      	movs	r1, #2
1a003314:	f000 f892 	bl	1a00343c <Chip_Clock_GetDivRate>
		break;
1a003318:	e009      	b.n	1a00332e <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a00331a:	2103      	movs	r1, #3
1a00331c:	f000 f88e 	bl	1a00343c <Chip_Clock_GetDivRate>
		break;
1a003320:	e005      	b.n	1a00332e <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a003322:	2104      	movs	r1, #4
1a003324:	f000 f88a 	bl	1a00343c <Chip_Clock_GetDivRate>
		break;
1a003328:	e001      	b.n	1a00332e <Chip_Clock_GetClockInputHz+0x96>
		rate = CRYSTAL_32K_FREQ_IN;
1a00332a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a00332e:	bd08      	pop	{r3, pc}
			rate = 50000000; /* RMII uses 50 MHz */
1a003330:	4806      	ldr	r0, [pc, #24]	; (1a00334c <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a003332:	e7fc      	b.n	1a00332e <Chip_Clock_GetClockInputHz+0x96>
1a003334:	00b71b00 	.word	0x00b71b00
1a003338:	40043000 	.word	0x40043000
1a00333c:	017d7840 	.word	0x017d7840
1a003340:	1a005540 	.word	0x1a005540
1a003344:	1a00556c 	.word	0x1a00556c
1a003348:	10002b18 	.word	0x10002b18
1a00334c:	02faf080 	.word	0x02faf080

1a003350 <Chip_Clock_CalcMainPLLValue>:
{
1a003350:	b538      	push	{r3, r4, r5, lr}
1a003352:	4605      	mov	r5, r0
1a003354:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a003356:	7908      	ldrb	r0, [r1, #4]
1a003358:	f7ff ff9e 	bl	1a003298 <Chip_Clock_GetClockInputHz>
1a00335c:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a00335e:	4b19      	ldr	r3, [pc, #100]	; (1a0033c4 <Chip_Clock_CalcMainPLLValue+0x74>)
1a003360:	442b      	add	r3, r5
1a003362:	4a19      	ldr	r2, [pc, #100]	; (1a0033c8 <Chip_Clock_CalcMainPLLValue+0x78>)
1a003364:	4293      	cmp	r3, r2
1a003366:	d821      	bhi.n	1a0033ac <Chip_Clock_CalcMainPLLValue+0x5c>
1a003368:	b318      	cbz	r0, 1a0033b2 <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a00336a:	2380      	movs	r3, #128	; 0x80
1a00336c:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a00336e:	2300      	movs	r3, #0
1a003370:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a003372:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a003374:	fbb5 f3f0 	udiv	r3, r5, r0
1a003378:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a00337a:	4a14      	ldr	r2, [pc, #80]	; (1a0033cc <Chip_Clock_CalcMainPLLValue+0x7c>)
1a00337c:	4295      	cmp	r5, r2
1a00337e:	d903      	bls.n	1a003388 <Chip_Clock_CalcMainPLLValue+0x38>
1a003380:	fb03 f000 	mul.w	r0, r3, r0
1a003384:	42a8      	cmp	r0, r5
1a003386:	d007      	beq.n	1a003398 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a003388:	4621      	mov	r1, r4
1a00338a:	4628      	mov	r0, r5
1a00338c:	f7ff fe96 	bl	1a0030bc <pll_get_frac>
		if (!ppll->nsel) {
1a003390:	68a3      	ldr	r3, [r4, #8]
1a003392:	b18b      	cbz	r3, 1a0033b8 <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a003394:	3b01      	subs	r3, #1
1a003396:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a003398:	6923      	ldr	r3, [r4, #16]
1a00339a:	b183      	cbz	r3, 1a0033be <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a00339c:	68e2      	ldr	r2, [r4, #12]
1a00339e:	b10a      	cbz	r2, 1a0033a4 <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a0033a0:	3a01      	subs	r2, #1
1a0033a2:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a0033a4:	3b01      	subs	r3, #1
1a0033a6:	6123      	str	r3, [r4, #16]
	return 0;
1a0033a8:	2000      	movs	r0, #0
}
1a0033aa:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a0033ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0033b0:	e7fb      	b.n	1a0033aa <Chip_Clock_CalcMainPLLValue+0x5a>
1a0033b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0033b6:	e7f8      	b.n	1a0033aa <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a0033b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0033bc:	e7f5      	b.n	1a0033aa <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a0033be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0033c2:	e7f2      	b.n	1a0033aa <Chip_Clock_CalcMainPLLValue+0x5a>
1a0033c4:	ff6b3a10 	.word	0xff6b3a10
1a0033c8:	0b940510 	.word	0x0b940510
1a0033cc:	094c5eff 	.word	0x094c5eff

1a0033d0 <Chip_Clock_GetMainPLLHz>:
{
1a0033d0:	b530      	push	{r4, r5, lr}
1a0033d2:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a0033d4:	4d17      	ldr	r5, [pc, #92]	; (1a003434 <Chip_Clock_GetMainPLLHz+0x64>)
1a0033d6:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a0033d8:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a0033dc:	f7ff ff5c 	bl	1a003298 <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a0033e0:	4b15      	ldr	r3, [pc, #84]	; (1a003438 <Chip_Clock_GetMainPLLHz+0x68>)
1a0033e2:	681b      	ldr	r3, [r3, #0]
1a0033e4:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a0033e6:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a0033e8:	f013 0f01 	tst.w	r3, #1
1a0033ec:	d020      	beq.n	1a003430 <Chip_Clock_GetMainPLLHz+0x60>
	msel = (PLLReg >> 16) & 0xFF;
1a0033ee:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a0033f2:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a0033f6:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a0033fa:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a0033fe:	3301      	adds	r3, #1
	n = nsel + 1;
1a003400:	3201      	adds	r2, #1
	p = ptab[psel];
1a003402:	f10d 0c08 	add.w	ip, sp, #8
1a003406:	4461      	add	r1, ip
1a003408:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a00340c:	f014 0f80 	tst.w	r4, #128	; 0x80
1a003410:	d108      	bne.n	1a003424 <Chip_Clock_GetMainPLLHz+0x54>
1a003412:	b93d      	cbnz	r5, 1a003424 <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a003414:	0049      	lsls	r1, r1, #1
1a003416:	fbb3 f3f1 	udiv	r3, r3, r1
1a00341a:	fbb0 f0f2 	udiv	r0, r0, r2
1a00341e:	fb00 f003 	mul.w	r0, r0, r3
1a003422:	e003      	b.n	1a00342c <Chip_Clock_GetMainPLLHz+0x5c>
		return m * (freq / n);
1a003424:	fbb0 f0f2 	udiv	r0, r0, r2
1a003428:	fb03 f000 	mul.w	r0, r3, r0
}
1a00342c:	b003      	add	sp, #12
1a00342e:	bd30      	pop	{r4, r5, pc}
		return 0;
1a003430:	2000      	movs	r0, #0
1a003432:	e7fb      	b.n	1a00342c <Chip_Clock_GetMainPLLHz+0x5c>
1a003434:	40050000 	.word	0x40050000
1a003438:	1a0055f8 	.word	0x1a0055f8

1a00343c <Chip_Clock_GetDivRate>:
{
1a00343c:	b538      	push	{r3, r4, r5, lr}
1a00343e:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a003440:	4608      	mov	r0, r1
1a003442:	f7ff ff0d 	bl	1a003260 <Chip_Clock_GetDividerSource>
1a003446:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a003448:	4620      	mov	r0, r4
1a00344a:	f7ff ff17 	bl	1a00327c <Chip_Clock_GetDividerDivisor>
1a00344e:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a003450:	4628      	mov	r0, r5
1a003452:	f7ff ff21 	bl	1a003298 <Chip_Clock_GetClockInputHz>
1a003456:	3401      	adds	r4, #1
}
1a003458:	fbb0 f0f4 	udiv	r0, r0, r4
1a00345c:	bd38      	pop	{r3, r4, r5, pc}
1a00345e:	Address 0x000000001a00345e is out of bounds.


1a003460 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a003460:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a003462:	f100 0416 	add.w	r4, r0, #22
1a003466:	00a4      	lsls	r4, r4, #2
1a003468:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a00346c:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a003470:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a003472:	281b      	cmp	r0, #27
1a003474:	d813      	bhi.n	1a00349e <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a003476:	2911      	cmp	r1, #17
1a003478:	d01a      	beq.n	1a0034b0 <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a00347a:	4d0e      	ldr	r5, [pc, #56]	; (1a0034b4 <Chip_Clock_SetBaseClock+0x54>)
1a00347c:	4025      	ands	r5, r4

			if (autoblocken) {
1a00347e:	b10a      	cbz	r2, 1a003484 <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a003480:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a003484:	b10b      	cbz	r3, 1a00348a <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a003486:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a00348a:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a00348e:	3016      	adds	r0, #22
1a003490:	0080      	lsls	r0, r0, #2
1a003492:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a003496:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a00349a:	6045      	str	r5, [r0, #4]
1a00349c:	e008      	b.n	1a0034b0 <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a00349e:	f044 0401 	orr.w	r4, r4, #1
1a0034a2:	3016      	adds	r0, #22
1a0034a4:	0080      	lsls	r0, r0, #2
1a0034a6:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a0034aa:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a0034ae:	6044      	str	r4, [r0, #4]
	}
}
1a0034b0:	bc30      	pop	{r4, r5}
1a0034b2:	4770      	bx	lr
1a0034b4:	e0fff7fe 	.word	0xe0fff7fe

1a0034b8 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a0034b8:	281b      	cmp	r0, #27
1a0034ba:	d80c      	bhi.n	1a0034d6 <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a0034bc:	3016      	adds	r0, #22
1a0034be:	0080      	lsls	r0, r0, #2
1a0034c0:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a0034c4:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a0034c8:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a0034ca:	f010 0f01 	tst.w	r0, #1
1a0034ce:	d104      	bne.n	1a0034da <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a0034d0:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a0034d4:	4770      	bx	lr
		return CLKINPUT_PD;
1a0034d6:	2011      	movs	r0, #17
1a0034d8:	4770      	bx	lr
		return CLKINPUT_PD;
1a0034da:	2011      	movs	r0, #17
}
1a0034dc:	4770      	bx	lr

1a0034de <Chip_Clock_GetBaseClocktHz>:
{
1a0034de:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a0034e0:	f7ff ffea 	bl	1a0034b8 <Chip_Clock_GetBaseClock>
1a0034e4:	f7ff fed8 	bl	1a003298 <Chip_Clock_GetClockInputHz>
}
1a0034e8:	bd08      	pop	{r3, pc}
1a0034ea:	Address 0x000000001a0034ea is out of bounds.


1a0034ec <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a0034ec:	b971      	cbnz	r1, 1a00350c <Chip_Clock_EnableOpts+0x20>
	uint32_t reg = 1;
1a0034ee:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a0034f0:	b10a      	cbz	r2, 1a0034f6 <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a0034f2:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a0034f6:	2b02      	cmp	r3, #2
1a0034f8:	d00a      	beq.n	1a003510 <Chip_Clock_EnableOpts+0x24>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a0034fa:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0034fe:	d30a      	bcc.n	1a003516 <Chip_Clock_EnableOpts+0x2a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a003500:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a003504:	4b06      	ldr	r3, [pc, #24]	; (1a003520 <Chip_Clock_EnableOpts+0x34>)
1a003506:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a00350a:	4770      	bx	lr
		reg |= (1 << 1);
1a00350c:	2103      	movs	r1, #3
1a00350e:	e7ef      	b.n	1a0034f0 <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a003510:	f041 0120 	orr.w	r1, r1, #32
1a003514:	e7f1      	b.n	1a0034fa <Chip_Clock_EnableOpts+0xe>
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a003516:	3020      	adds	r0, #32
1a003518:	4b02      	ldr	r3, [pc, #8]	; (1a003524 <Chip_Clock_EnableOpts+0x38>)
1a00351a:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a00351e:	4770      	bx	lr
1a003520:	40052000 	.word	0x40052000
1a003524:	40051000 	.word	0x40051000

1a003528 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a003528:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a00352c:	d309      	bcc.n	1a003542 <Chip_Clock_Enable+0x1a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a00352e:	4a09      	ldr	r2, [pc, #36]	; (1a003554 <Chip_Clock_Enable+0x2c>)
1a003530:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a003534:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a003538:	f043 0301 	orr.w	r3, r3, #1
1a00353c:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a003540:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a003542:	4a05      	ldr	r2, [pc, #20]	; (1a003558 <Chip_Clock_Enable+0x30>)
1a003544:	3020      	adds	r0, #32
1a003546:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a00354a:	f043 0301 	orr.w	r3, r3, #1
1a00354e:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a003552:	4770      	bx	lr
1a003554:	40052000 	.word	0x40052000
1a003558:	40051000 	.word	0x40051000

1a00355c <Chip_Clock_Disable>:

/* Disables a peripheral clock */
void Chip_Clock_Disable(CHIP_CCU_CLK_T clk)
{
	/* Stop peripheral clock */
	if (clk >= CLK_CCU2_START) {
1a00355c:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a003560:	d309      	bcc.n	1a003576 <Chip_Clock_Disable+0x1a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG &= ~1;
1a003562:	4a09      	ldr	r2, [pc, #36]	; (1a003588 <Chip_Clock_Disable+0x2c>)
1a003564:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a003568:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a00356c:	f023 0301 	bic.w	r3, r3, #1
1a003570:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a003574:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG &= ~1;
1a003576:	4a05      	ldr	r2, [pc, #20]	; (1a00358c <Chip_Clock_Disable+0x30>)
1a003578:	3020      	adds	r0, #32
1a00357a:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a00357e:	f023 0301 	bic.w	r3, r3, #1
1a003582:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a003586:	4770      	bx	lr
1a003588:	40052000 	.word	0x40052000
1a00358c:	40051000 	.word	0x40051000

1a003590 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a003590:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a003592:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a003596:	d309      	bcc.n	1a0035ac <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a003598:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a00359c:	4a0d      	ldr	r2, [pc, #52]	; (1a0035d4 <Chip_Clock_GetRate+0x44>)
1a00359e:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a0035a2:	f014 0f01 	tst.w	r4, #1
1a0035a6:	d107      	bne.n	1a0035b8 <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a0035a8:	2000      	movs	r0, #0
	}

	return rate;
}
1a0035aa:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a0035ac:	f100 0320 	add.w	r3, r0, #32
1a0035b0:	4a09      	ldr	r2, [pc, #36]	; (1a0035d8 <Chip_Clock_GetRate+0x48>)
1a0035b2:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a0035b6:	e7f4      	b.n	1a0035a2 <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a0035b8:	f7ff fe06 	bl	1a0031c8 <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a0035bc:	f7ff ff8f 	bl	1a0034de <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a0035c0:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a0035c4:	d103      	bne.n	1a0035ce <Chip_Clock_GetRate+0x3e>
			div = 1;
1a0035c6:	2301      	movs	r3, #1
		rate = rate / div;
1a0035c8:	fbb0 f0f3 	udiv	r0, r0, r3
1a0035cc:	e7ed      	b.n	1a0035aa <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a0035ce:	2302      	movs	r3, #2
1a0035d0:	e7fa      	b.n	1a0035c8 <Chip_Clock_GetRate+0x38>
1a0035d2:	bf00      	nop
1a0035d4:	40052000 	.word	0x40052000
1a0035d8:	40051000 	.word	0x40051000

1a0035dc <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a0035dc:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a0035de:	2069      	movs	r0, #105	; 0x69
1a0035e0:	f7ff ffd6 	bl	1a003590 <Chip_Clock_GetRate>
1a0035e4:	4b01      	ldr	r3, [pc, #4]	; (1a0035ec <SystemCoreClockUpdate+0x10>)
1a0035e6:	6018      	str	r0, [r3, #0]
}
1a0035e8:	bd08      	pop	{r3, pc}
1a0035ea:	bf00      	nop
1a0035ec:	10002ba4 	.word	0x10002ba4

1a0035f0 <Chip_SCT_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize SCT */
void Chip_SCT_Init(LPC_SCT_T *pSCT)
{
1a0035f0:	b508      	push	{r3, lr}
	Chip_Clock_EnableOpts(CLK_MX_SCT, true, true, 1);
1a0035f2:	2301      	movs	r3, #1
1a0035f4:	461a      	mov	r2, r3
1a0035f6:	4619      	mov	r1, r3
1a0035f8:	206d      	movs	r0, #109	; 0x6d
1a0035fa:	f7ff ff77 	bl	1a0034ec <Chip_Clock_EnableOpts>
}
1a0035fe:	bd08      	pop	{r3, pc}

1a003600 <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a003600:	4770      	bx	lr
1a003602:	Address 0x000000001a003602 is out of bounds.


1a003604 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a003604:	b570      	push	{r4, r5, r6, lr}
1a003606:	b08a      	sub	sp, #40	; 0x28
1a003608:	4605      	mov	r5, r0
1a00360a:	460e      	mov	r6, r1
1a00360c:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 50000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a00360e:	f24c 3350 	movw	r3, #50000	; 0xc350
1a003612:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a003614:	2806      	cmp	r0, #6
1a003616:	d018      	beq.n	1a00364a <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a003618:	2300      	movs	r3, #0
1a00361a:	2201      	movs	r2, #1
1a00361c:	4629      	mov	r1, r5
1a00361e:	2004      	movs	r0, #4
1a003620:	f7ff ff1e 	bl	1a003460 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a003624:	4a4a      	ldr	r2, [pc, #296]	; (1a003750 <Chip_SetupCoreClock+0x14c>)
1a003626:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a003628:	f043 0301 	orr.w	r3, r3, #1
1a00362c:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a00362e:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a003632:	a901      	add	r1, sp, #4
1a003634:	4630      	mov	r0, r6
1a003636:	f7ff fe8b 	bl	1a003350 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a00363a:	4b46      	ldr	r3, [pc, #280]	; (1a003754 <Chip_SetupCoreClock+0x150>)
1a00363c:	429e      	cmp	r6, r3
1a00363e:	d916      	bls.n	1a00366e <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a003640:	9b01      	ldr	r3, [sp, #4]
1a003642:	f013 0f40 	tst.w	r3, #64	; 0x40
1a003646:	d003      	beq.n	1a003650 <Chip_SetupCoreClock+0x4c>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
1a003648:	e7fe      	b.n	1a003648 <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a00364a:	f7ff fde3 	bl	1a003214 <Chip_Clock_EnableCrystal>
1a00364e:	e7e3      	b.n	1a003618 <Chip_SetupCoreClock+0x14>
		} else if (ppll.ctrl & (1 << 7)){
1a003650:	f013 0f80 	tst.w	r3, #128	; 0x80
1a003654:	d005      	beq.n	1a003662 <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a003656:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a00365a:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a00365c:	2500      	movs	r5, #0
			direct = 1;
1a00365e:	2601      	movs	r6, #1
1a003660:	e007      	b.n	1a003672 <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a003662:	9b04      	ldr	r3, [sp, #16]
1a003664:	3301      	adds	r3, #1
1a003666:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a003668:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a00366a:	2600      	movs	r6, #0
1a00366c:	e001      	b.n	1a003672 <Chip_SetupCoreClock+0x6e>
1a00366e:	2500      	movs	r5, #0
1a003670:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a003672:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a003676:	9b01      	ldr	r3, [sp, #4]
1a003678:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a00367c:	9a05      	ldr	r2, [sp, #20]
1a00367e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a003682:	9a03      	ldr	r2, [sp, #12]
1a003684:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a003688:	9a04      	ldr	r2, [sp, #16]
1a00368a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a00368e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a003692:	4a2f      	ldr	r2, [pc, #188]	; (1a003750 <Chip_SetupCoreClock+0x14c>)
1a003694:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a003696:	4b2e      	ldr	r3, [pc, #184]	; (1a003750 <Chip_SetupCoreClock+0x14c>)
1a003698:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a00369a:	f013 0f01 	tst.w	r3, #1
1a00369e:	d0fa      	beq.n	1a003696 <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a0036a0:	2300      	movs	r3, #0
1a0036a2:	2201      	movs	r2, #1
1a0036a4:	2109      	movs	r1, #9
1a0036a6:	2004      	movs	r0, #4
1a0036a8:	f7ff feda 	bl	1a003460 <Chip_Clock_SetBaseClock>

	if (direct) {
1a0036ac:	b306      	cbz	r6, 1a0036f0 <Chip_SetupCoreClock+0xec>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a0036ae:	f24c 3350 	movw	r3, #50000	; 0xc350
1a0036b2:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a0036b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0036b6:	1e5a      	subs	r2, r3, #1
1a0036b8:	9209      	str	r2, [sp, #36]	; 0x24
1a0036ba:	2b00      	cmp	r3, #0
1a0036bc:	d1fa      	bne.n	1a0036b4 <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a0036be:	9b01      	ldr	r3, [sp, #4]
1a0036c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a0036c4:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a0036c6:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a0036ca:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a0036ce:	9a05      	ldr	r2, [sp, #20]
1a0036d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a0036d4:	9a03      	ldr	r2, [sp, #12]
1a0036d6:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a0036da:	9a04      	ldr	r2, [sp, #16]
1a0036dc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0036e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0036e4:	4a1a      	ldr	r2, [pc, #104]	; (1a003750 <Chip_SetupCoreClock+0x14c>)
1a0036e6:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a0036e8:	2c00      	cmp	r4, #0
1a0036ea:	d12e      	bne.n	1a00374a <Chip_SetupCoreClock+0x146>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a0036ec:	b00a      	add	sp, #40	; 0x28
1a0036ee:	bd70      	pop	{r4, r5, r6, pc}
	} else if (pdivide) {
1a0036f0:	2d00      	cmp	r5, #0
1a0036f2:	d0f9      	beq.n	1a0036e8 <Chip_SetupCoreClock+0xe4>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a0036f4:	f24c 3350 	movw	r3, #50000	; 0xc350
1a0036f8:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a0036fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0036fc:	1e5a      	subs	r2, r3, #1
1a0036fe:	9209      	str	r2, [sp, #36]	; 0x24
1a003700:	2b00      	cmp	r3, #0
1a003702:	d1fa      	bne.n	1a0036fa <Chip_SetupCoreClock+0xf6>
		ppll.psel--;
1a003704:	9b04      	ldr	r3, [sp, #16]
1a003706:	1e5a      	subs	r2, r3, #1
1a003708:	9204      	str	r2, [sp, #16]
1a00370a:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a00370e:	9b01      	ldr	r3, [sp, #4]
1a003710:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a003714:	9905      	ldr	r1, [sp, #20]
1a003716:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a00371a:	9903      	ldr	r1, [sp, #12]
1a00371c:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a003720:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a003724:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a003728:	4a09      	ldr	r2, [pc, #36]	; (1a003750 <Chip_SetupCoreClock+0x14c>)
1a00372a:	6453      	str	r3, [r2, #68]	; 0x44
1a00372c:	e7dc      	b.n	1a0036e8 <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a00372e:	480a      	ldr	r0, [pc, #40]	; (1a003758 <Chip_SetupCoreClock+0x154>)
1a003730:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a003734:	78cb      	ldrb	r3, [r1, #3]
1a003736:	788a      	ldrb	r2, [r1, #2]
1a003738:	7849      	ldrb	r1, [r1, #1]
1a00373a:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a00373e:	f7ff fe8f 	bl	1a003460 <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a003742:	3401      	adds	r4, #1
1a003744:	2c11      	cmp	r4, #17
1a003746:	d9f2      	bls.n	1a00372e <Chip_SetupCoreClock+0x12a>
1a003748:	e7d0      	b.n	1a0036ec <Chip_SetupCoreClock+0xe8>
1a00374a:	2400      	movs	r4, #0
1a00374c:	e7fa      	b.n	1a003744 <Chip_SetupCoreClock+0x140>
1a00374e:	bf00      	nop
1a003750:	40050000 	.word	0x40050000
1a003754:	068e7780 	.word	0x068e7780
1a003758:	1a005670 	.word	0x1a005670

1a00375c <Chip_SCTPWM_SetOutPin>:
 * Public functions
 ****************************************************************************/

/* Setup the OUTPUT pin corresponding to the PWM index */
void Chip_SCTPWM_SetOutPin(LPC_SCT_T *pSCT, uint8_t index, uint8_t pin)
{
1a00375c:	b430      	push	{r4, r5}
	int ix = (int) index;
	pSCT->EVENT[ix].CTRL = index | (1 << 12);
1a00375e:	f441 5580 	orr.w	r5, r1, #4096	; 0x1000
1a003762:	f101 0360 	add.w	r3, r1, #96	; 0x60
1a003766:	eb00 04c3 	add.w	r4, r0, r3, lsl #3
1a00376a:	6065      	str	r5, [r4, #4]
	pSCT->EVENT[ix].STATE = 1;
1a00376c:	2401      	movs	r4, #1
1a00376e:	f840 4033 	str.w	r4, [r0, r3, lsl #3]
	pSCT->OUT[pin].SET = 1;
1a003772:	f102 03a0 	add.w	r3, r2, #160	; 0xa0
1a003776:	f840 4033 	str.w	r4, [r0, r3, lsl #3]
	pSCT->OUT[pin].CLR = 1 << ix;
1a00377a:	fa04 f101 	lsl.w	r1, r4, r1
1a00377e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
1a003782:	6059      	str	r1, [r3, #4]

	/* Clear the output in-case of conflict */
	pSCT->RES = (pSCT->RES & ~(3 << (pin << 1))) | (0x01 << (pin << 1));
1a003784:	6d81      	ldr	r1, [r0, #88]	; 0x58
1a003786:	40a2      	lsls	r2, r4
1a003788:	2303      	movs	r3, #3
1a00378a:	4093      	lsls	r3, r2
1a00378c:	43db      	mvns	r3, r3
1a00378e:	4019      	ands	r1, r3
1a003790:	4094      	lsls	r4, r2
1a003792:	430c      	orrs	r4, r1
1a003794:	6584      	str	r4, [r0, #88]	; 0x58

	/* Set and Clear do not depend on direction */
	pSCT->OUTPUTDIRCTRL = (pSCT->OUTPUTDIRCTRL & ~(3 << (pin << 1)));
1a003796:	6d42      	ldr	r2, [r0, #84]	; 0x54
1a003798:	4013      	ands	r3, r2
1a00379a:	6543      	str	r3, [r0, #84]	; 0x54
}
1a00379c:	bc30      	pop	{r4, r5}
1a00379e:	4770      	bx	lr

1a0037a0 <Chip_SCTPWM_SetRate>:

/* Set the PWM frequency */
void Chip_SCTPWM_SetRate(LPC_SCT_T *pSCT, uint32_t freq)
{
1a0037a0:	b538      	push	{r3, r4, r5, lr}
1a0037a2:	4604      	mov	r4, r0
1a0037a4:	460d      	mov	r5, r1
	uint32_t rate;

	rate = Chip_Clock_GetRate(CLK_MX_SCT) / freq;;
1a0037a6:	206d      	movs	r0, #109	; 0x6d
1a0037a8:	f7ff fef2 	bl	1a003590 <Chip_Clock_GetRate>
1a0037ac:	fbb0 f0f5 	udiv	r0, r0, r5
 * @param	value	: Value (ORed value of SCT_CTRL_* bits)
 * @return	Nothing
 */
STATIC INLINE void Chip_SCT_SetControl(LPC_SCT_T *pSCT, uint32_t value)
{
	pSCT->CTRL_U |= value;
1a0037b0:	6863      	ldr	r3, [r4, #4]
1a0037b2:	f043 1304 	orr.w	r3, r3, #262148	; 0x40004
1a0037b6:	6063      	str	r3, [r4, #4]
1a0037b8:	6863      	ldr	r3, [r4, #4]
1a0037ba:	f043 1308 	orr.w	r3, r3, #524296	; 0x80008
1a0037be:	6063      	str	r3, [r4, #4]

	/* Stop the SCT before configuration */
	Chip_SCTPWM_Stop(pSCT);

	/* Set MATCH0 for max limit */
	pSCT->REGMODE_L = 0;
1a0037c0:	2300      	movs	r3, #0
1a0037c2:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
	pSCT->REGMODE_H = 0;
1a0037c6:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
	pSCT->MATCH[n].U = value;
1a0037ca:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 * @param	value	: The 32-bit match count reload value
 * @return	Nothing
 */
STATIC INLINE void Chip_SCT_SetMatchReload(LPC_SCT_T *pSCT, CHIP_SCT_MATCH_REG_T n, uint32_t value)
{
	pSCT->MATCHREL[n].U = value;
1a0037ce:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
	Chip_SCT_SetMatchCount(pSCT, SCT_MATCH_0, 0);
	Chip_SCT_SetMatchReload(pSCT, SCT_MATCH_0, rate);
	pSCT->EVENT[0].CTRL = 1 << 12;
1a0037d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
1a0037d6:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
	pSCT->EVENT[0].STATE = 1;
1a0037da:	2301      	movs	r3, #1
1a0037dc:	f8c4 3300 	str.w	r3, [r4, #768]	; 0x300
	pSCT->LIMIT_L = 1;
1a0037e0:	8123      	strh	r3, [r4, #8]
	pSCT->CONFIG = value;
1a0037e2:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
1a0037e6:	6023      	str	r3, [r4, #0]

	/* Set SCT Counter to count 32-bits and reset to 0 after reaching MATCH0 */
	Chip_SCT_Config(pSCT, SCT_CONFIG_32BIT_COUNTER | SCT_CONFIG_AUTOLIMIT_L);
}
1a0037e8:	bd38      	pop	{r3, r4, r5, pc}
1a0037ea:	Address 0x000000001a0037ea is out of bounds.


1a0037ec <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a0037ec:	4b03      	ldr	r3, [pc, #12]	; (1a0037fc <Chip_SSP_GetClockIndex+0x10>)
1a0037ee:	4298      	cmp	r0, r3
1a0037f0:	d001      	beq.n	1a0037f6 <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a0037f2:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a0037f4:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a0037f6:	20a5      	movs	r0, #165	; 0xa5
1a0037f8:	4770      	bx	lr
1a0037fa:	bf00      	nop
1a0037fc:	400c5000 	.word	0x400c5000

1a003800 <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a003800:	4b04      	ldr	r3, [pc, #16]	; (1a003814 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a003802:	4298      	cmp	r0, r3
1a003804:	d002      	beq.n	1a00380c <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a003806:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a00380a:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a00380c:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a003810:	4770      	bx	lr
1a003812:	bf00      	nop
1a003814:	400c5000 	.word	0x400c5000

1a003818 <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a003818:	6803      	ldr	r3, [r0, #0]
1a00381a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a00381e:	0209      	lsls	r1, r1, #8
1a003820:	b289      	uxth	r1, r1
1a003822:	4319      	orrs	r1, r3
1a003824:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a003826:	6102      	str	r2, [r0, #16]
}
1a003828:	4770      	bx	lr

1a00382a <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a00382a:	b570      	push	{r4, r5, r6, lr}
1a00382c:	4606      	mov	r6, r0
1a00382e:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a003830:	f7ff ffe6 	bl	1a003800 <Chip_SSP_GetPeriphClockIndex>
1a003834:	f7ff feac 	bl	1a003590 <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a003838:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a00383a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	cr0_div = 0;
1a00383e:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a003840:	e000      	b.n	1a003844 <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a003842:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a003844:	42ab      	cmp	r3, r5
1a003846:	d90b      	bls.n	1a003860 <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a003848:	1c4c      	adds	r4, r1, #1
1a00384a:	fb02 f304 	mul.w	r3, r2, r4
1a00384e:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a003852:	429d      	cmp	r5, r3
1a003854:	d2f6      	bcs.n	1a003844 <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a003856:	2cff      	cmp	r4, #255	; 0xff
1a003858:	d9f3      	bls.n	1a003842 <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a00385a:	3202      	adds	r2, #2
				cr0_div = 0;
1a00385c:	2100      	movs	r1, #0
1a00385e:	e7f1      	b.n	1a003844 <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a003860:	4630      	mov	r0, r6
1a003862:	f7ff ffd9 	bl	1a003818 <Chip_SSP_SetClockRate>
}
1a003866:	bd70      	pop	{r4, r5, r6, pc}

1a003868 <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a003868:	b510      	push	{r4, lr}
1a00386a:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a00386c:	f7ff ffbe 	bl	1a0037ec <Chip_SSP_GetClockIndex>
1a003870:	f7ff fe5a 	bl	1a003528 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a003874:	4620      	mov	r0, r4
1a003876:	f7ff ffc3 	bl	1a003800 <Chip_SSP_GetPeriphClockIndex>
1a00387a:	f7ff fe55 	bl	1a003528 <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a00387e:	6863      	ldr	r3, [r4, #4]
1a003880:	f023 0304 	bic.w	r3, r3, #4
1a003884:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a003886:	6823      	ldr	r3, [r4, #0]
1a003888:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a00388c:	f043 0307 	orr.w	r3, r3, #7
1a003890:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a003892:	4902      	ldr	r1, [pc, #8]	; (1a00389c <Chip_SSP_Init+0x34>)
1a003894:	4620      	mov	r0, r4
1a003896:	f7ff ffc8 	bl	1a00382a <Chip_SSP_SetBitRate>
}
1a00389a:	bd10      	pop	{r4, pc}
1a00389c:	000186a0 	.word	0x000186a0

1a0038a0 <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a0038a0:	b508      	push	{r3, lr}
   extern void *g_pfnVectors;
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a0038a2:	4a0b      	ldr	r2, [pc, #44]	; (1a0038d0 <SystemInit+0x30>)
1a0038a4:	4b0b      	ldr	r3, [pc, #44]	; (1a0038d4 <SystemInit+0x34>)
1a0038a6:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a0038a8:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a0038ac:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a0038ae:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a0038b2:	2b20      	cmp	r3, #32
1a0038b4:	d004      	beq.n	1a0038c0 <SystemInit+0x20>

   if (SCB_GetFPUType() > 0)
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */

   /* Board specific SystemInit */
   Board_SystemInit();
1a0038b6:	f7ff f99f 	bl	1a002bf8 <Board_SystemInit>
   Board_Init();
1a0038ba:	f7ff f925 	bl	1a002b08 <Board_Init>
}
1a0038be:	bd08      	pop	{r3, pc}
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a0038c0:	4a04      	ldr	r2, [pc, #16]	; (1a0038d4 <SystemInit+0x34>)
1a0038c2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a0038c6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a0038ca:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a0038ce:	e7f2      	b.n	1a0038b6 <SystemInit+0x16>
1a0038d0:	1a000000 	.word	0x1a000000
1a0038d4:	e000ed00 	.word	0xe000ed00

1a0038d8 <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a0038d8:	4b04      	ldr	r3, [pc, #16]	; (1a0038ec <cyclesCounterInit+0x14>)
1a0038da:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   DWT_CTRL  |= 1; // *DWT_CTRL  |= 1;
1a0038dc:	4a04      	ldr	r2, [pc, #16]	; (1a0038f0 <cyclesCounterInit+0x18>)
1a0038de:	6813      	ldr	r3, [r2, #0]
1a0038e0:	f043 0301 	orr.w	r3, r3, #1
1a0038e4:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a0038e6:	2001      	movs	r0, #1
1a0038e8:	4770      	bx	lr
1a0038ea:	bf00      	nop
1a0038ec:	10000044 	.word	0x10000044
1a0038f0:	e0001000 	.word	0xe0001000

1a0038f4 <Sct_Init>:
 * @brief:   Initialize the SCT peripheral with the given frequency
 * @param:   frequency:   value in Hz
 * @note:   there can only be 1 frequency in all the SCT peripheral.
 */
void Sct_Init(uint32_t frequency)
{
1a0038f4:	b510      	push	{r4, lr}
1a0038f6:	4604      	mov	r4, r0
 * @param	pSCT	: The base of SCT peripheral on the chip
 * @return	None
 */
STATIC INLINE void Chip_SCTPWM_Init(LPC_SCT_T *pSCT)
{
	Chip_SCT_Init(pSCT);
1a0038f8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
1a0038fc:	f7ff fe78 	bl	1a0035f0 <Chip_SCT_Init>
   /* Source: https://www.lpcware.com/content/faq/how-use-sct-standard-pwm-using-lpcopen */
   /* Initialize the SCT as PWM and set frequency */
   Chip_SCTPWM_Init(LPC_SCT);
   Chip_SCTPWM_SetRate(LPC_SCT, frequency);
1a003900:	4621      	mov	r1, r4
1a003902:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
1a003906:	f7ff ff4b 	bl	1a0037a0 <Chip_SCTPWM_SetRate>
	pSCT->CTRL_U &= ~(value);
1a00390a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
1a00390e:	6853      	ldr	r3, [r2, #4]
1a003910:	f023 1304 	bic.w	r3, r3, #262148	; 0x40004
1a003914:	6053      	str	r3, [r2, #4]

   Chip_SCTPWM_Start(LPC_SCT);
}
1a003916:	bd10      	pop	{r4, pc}

1a003918 <Sct_Uint8ToTicks>:
	return pSCT->MATCHREL[0].U;
1a003918:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
1a00391c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 * @param   value:   8bit value, from 0 to 255
 * @return   Equivalent in Ticks for the LPC4337
 */
uint32_t Sct_Uint8ToTicks(uint8_t value)
{
   return ( (Chip_SCTPWM_GetTicksPerCycle(LPC_SCT) * value)/ 255 );
1a003920:	fb03 f000 	mul.w	r0, r3, r0
1a003924:	4b02      	ldr	r3, [pc, #8]	; (1a003930 <Sct_Uint8ToTicks+0x18>)
1a003926:	fba3 3000 	umull	r3, r0, r3, r0
}
1a00392a:	09c0      	lsrs	r0, r0, #7
1a00392c:	4770      	bx	lr
1a00392e:	bf00      	nop
1a003930:	80808081 	.word	0x80808081

1a003934 <Sct_SetDutyCycle>:
 * @param:	sctNumber:   pin where the pwm signal is generated
 * @param	value:   8bit value, from 0 to 255
 * @note   For the 'ticks' parameter, see function Sct_Uint8ToTicks
 */
void Sct_SetDutyCycle(uint8_t sctNumber, uint8_t value)
{
1a003934:	b510      	push	{r4, lr}
   Chip_SCTPWM_SetDutyCycle(LPC_SCT, sctNumber+1, Sct_Uint8ToTicks(value));
1a003936:	3001      	adds	r0, #1
1a003938:	b2c4      	uxtb	r4, r0
1a00393a:	4608      	mov	r0, r1
1a00393c:	f7ff ffec 	bl	1a003918 <Sct_Uint8ToTicks>
	pSCT->MATCHREL[n].U = value;
1a003940:	3480      	adds	r4, #128	; 0x80
1a003942:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
1a003946:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
}
1a00394a:	bd10      	pop	{r4, pc}

1a00394c <Sct_EnablePwmFor>:
{
1a00394c:	b510      	push	{r4, lr}
1a00394e:	4604      	mov	r4, r0
   Chip_SCU_PinMux(SCTdataList[sctNumber].port , SCTdataList[sctNumber].pin , SCU_MODE_INACT , CTOUT_FUNC);
1a003950:	4a0f      	ldr	r2, [pc, #60]	; (1a003990 <Sct_EnablePwmFor+0x44>)
1a003952:	f912 3010 	ldrsb.w	r3, [r2, r0, lsl #1]
1a003956:	b2db      	uxtb	r3, r3
1a003958:	eb02 0240 	add.w	r2, r2, r0, lsl #1
1a00395c:	f992 2001 	ldrsb.w	r2, [r2, #1]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a003960:	015b      	lsls	r3, r3, #5
1a003962:	fa53 f382 	uxtab	r3, r3, r2
1a003966:	4a0b      	ldr	r2, [pc, #44]	; (1a003994 <Sct_EnablePwmFor+0x48>)
1a003968:	2111      	movs	r1, #17
1a00396a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   Chip_SCTPWM_SetOutPin(LPC_SCT, sctNumber+1, sctNumber);
1a00396e:	1c41      	adds	r1, r0, #1
1a003970:	4602      	mov	r2, r0
1a003972:	b2c9      	uxtb	r1, r1
1a003974:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
1a003978:	f7ff fef0 	bl	1a00375c <Chip_SCTPWM_SetOutPin>
1a00397c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
1a003980:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
   Sct_SetDutyCycle(sctNumber, Chip_SCTPWM_PercentageToTicks(LPC_SCT,0));
1a003984:	2100      	movs	r1, #0
1a003986:	4620      	mov	r0, r4
1a003988:	f7ff ffd4 	bl	1a003934 <Sct_SetDutyCycle>
}
1a00398c:	bd10      	pop	{r4, pc}
1a00398e:	bf00      	nop
1a003990:	1a0056b8 	.word	0x1a0056b8
1a003994:	40086000 	.word	0x40086000

1a003998 <dacInit>:
 * @brief:  enable/disable the ADC and DAC peripheral
 * @param:  DAC_ENABLE, DAC_DISABLE
 * @return: none
*/
void dacInit( dacInit_t config )
{
1a003998:	b510      	push	{r4, lr}

   switch(config) {
1a00399a:	b110      	cbz	r0, 1a0039a2 <dacInit+0xa>
1a00399c:	2801      	cmp	r0, #1
1a00399e:	d016      	beq.n	1a0039ce <dacInit+0x36>
      /* Disable DAC peripheral */
      Chip_DAC_DeInit( LPC_DAC );
      break;
   }

}
1a0039a0:	bd10      	pop	{r4, pc}
      Chip_Clock_EnableOpts(CLK_APB3_DAC, true, true, 1);
1a0039a2:	2301      	movs	r3, #1
1a0039a4:	461a      	mov	r2, r3
1a0039a6:	4619      	mov	r1, r3
1a0039a8:	2002      	movs	r0, #2
1a0039aa:	f7ff fd9f 	bl	1a0034ec <Chip_Clock_EnableOpts>
      Chip_DAC_SetBias(LPC_DAC, DAC_MAX_UPDATE_RATE_400kHz);
1a0039ae:	4c0a      	ldr	r4, [pc, #40]	; (1a0039d8 <dacInit+0x40>)
1a0039b0:	2101      	movs	r1, #1
1a0039b2:	4620      	mov	r0, r4
1a0039b4:	f7ff f933 	bl	1a002c1e <Chip_DAC_SetBias>
 */
STATIC INLINE void Chip_DAC_ConfigDAConverterControl(LPC_DAC_T *pDAC, uint32_t dacFlags)
{
	uint32_t temp;

	temp = pDAC->CTRL & ~DAC_DACCTRL_MASK;
1a0039b8:	6863      	ldr	r3, [r4, #4]
1a0039ba:	f023 030f 	bic.w	r3, r3, #15
	pDAC->CTRL = temp | dacFlags;
1a0039be:	f043 0308 	orr.w	r3, r3, #8
1a0039c2:	6063      	str	r3, [r4, #4]
      Chip_DAC_UpdateValue(LPC_DAC, 0);
1a0039c4:	2100      	movs	r1, #0
1a0039c6:	4620      	mov	r0, r4
1a0039c8:	f7ff f921 	bl	1a002c0e <Chip_DAC_UpdateValue>
      break;
1a0039cc:	e7e8      	b.n	1a0039a0 <dacInit+0x8>
      Chip_DAC_DeInit( LPC_DAC );
1a0039ce:	4802      	ldr	r0, [pc, #8]	; (1a0039d8 <dacInit+0x40>)
1a0039d0:	f7ff f918 	bl	1a002c04 <Chip_DAC_DeInit>
}
1a0039d4:	e7e4      	b.n	1a0039a0 <dacInit+0x8>
1a0039d6:	bf00      	nop
1a0039d8:	400e1000 	.word	0x400e1000

1a0039dc <uartTxReady>:
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_RDR;
}
// Return TRUE if have space in TX FIFO
bool_t uartTxReady( uartMap_t uart )
{
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_THRE;
1a0039dc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a0039e0:	0083      	lsls	r3, r0, #2
1a0039e2:	4a03      	ldr	r2, [pc, #12]	; (1a0039f0 <uartTxReady+0x14>)
1a0039e4:	58d3      	ldr	r3, [r2, r3]
	return pUART->LSR;
1a0039e6:	6958      	ldr	r0, [r3, #20]
}
1a0039e8:	f000 0020 	and.w	r0, r0, #32
1a0039ec:	4770      	bx	lr
1a0039ee:	bf00      	nop
1a0039f0:	1a0056d4 	.word	0x1a0056d4

1a0039f4 <uartTxWrite>:
   return Chip_UART_ReadByte( lpcUarts[uart].uartAddr );
}
// Write in TX FIFO
void uartTxWrite( uartMap_t uart, const uint8_t value )
{
   Chip_UART_SendByte( lpcUarts[uart].uartAddr, value );
1a0039f4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a0039f8:	0083      	lsls	r3, r0, #2
1a0039fa:	4a02      	ldr	r2, [pc, #8]	; (1a003a04 <uartTxWrite+0x10>)
1a0039fc:	58d3      	ldr	r3, [r2, r3]
	pUART->THR = (uint32_t) data;
1a0039fe:	6019      	str	r1, [r3, #0]
}
1a003a00:	4770      	bx	lr
1a003a02:	bf00      	nop
1a003a04:	1a0056d4 	.word	0x1a0056d4

1a003a08 <uartInit>:

//-------------------------------------------------------------

// UART Initialization
void uartInit( uartMap_t uart, uint32_t baudRate )
{
1a003a08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a003a0c:	4680      	mov	r8, r0
1a003a0e:	4689      	mov	r9, r1
   // Initialize UART
   Chip_UART_Init( lpcUarts[uart].uartAddr );
1a003a10:	4c19      	ldr	r4, [pc, #100]	; (1a003a78 <uartInit+0x70>)
1a003a12:	0045      	lsls	r5, r0, #1
1a003a14:	182a      	adds	r2, r5, r0
1a003a16:	0093      	lsls	r3, r2, #2
1a003a18:	18e6      	adds	r6, r4, r3
1a003a1a:	58e7      	ldr	r7, [r4, r3]
1a003a1c:	4638      	mov	r0, r7
1a003a1e:	f7ff f95f 	bl	1a002ce0 <Chip_UART_Init>
   // Set Baud rate
   Chip_UART_SetBaud( lpcUarts[uart].uartAddr, baudRate );
1a003a22:	4649      	mov	r1, r9
1a003a24:	4638      	mov	r0, r7
1a003a26:	f7ff f985 	bl	1a002d34 <Chip_UART_SetBaud>
	pUART->FCR = fcr;
1a003a2a:	2307      	movs	r3, #7
1a003a2c:	60bb      	str	r3, [r7, #8]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a003a2e:	683b      	ldr	r3, [r7, #0]
    pUART->TER2 = UART_TER2_TXEN;
1a003a30:	2301      	movs	r3, #1
1a003a32:	65fb      	str	r3, [r7, #92]	; 0x5c
   
   // Enable UART Transmission
   Chip_UART_TXEnable( lpcUarts[uart].uartAddr );
   
   // Configure SCU UARTn_TXD pin
   Chip_SCU_PinMux( lpcUarts[uart].txPin.lpcScuPort,
1a003a34:	7930      	ldrb	r0, [r6, #4]
1a003a36:	7973      	ldrb	r3, [r6, #5]
1a003a38:	79b2      	ldrb	r2, [r6, #6]
1a003a3a:	f042 0218 	orr.w	r2, r2, #24
1a003a3e:	490f      	ldr	r1, [pc, #60]	; (1a003a7c <uartInit+0x74>)
1a003a40:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a003a44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    lpcUarts[uart].txPin.lpcScuPin,
                    MD_PDN,
                    lpcUarts[uart].txPin.lpcScuFunc );
                    
   // Configure SCU UARTn_RXD pin
   Chip_SCU_PinMux( lpcUarts[uart].rxPin.lpcScuPort,
1a003a48:	79f0      	ldrb	r0, [r6, #7]
1a003a4a:	7a33      	ldrb	r3, [r6, #8]
1a003a4c:	7a72      	ldrb	r2, [r6, #9]
1a003a4e:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a003a52:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a003a56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    lpcUarts[uart].rxPin.lpcScuPin,
                    MD_PLN | MD_EZI | MD_ZI,
                    lpcUarts[uart].rxPin.lpcScuFunc );

   // Specific configurations for RS485
   if( uart == UART_485 ) {
1a003a5a:	f1b8 0f01 	cmp.w	r8, #1
1a003a5e:	d001      	beq.n	1a003a64 <uartInit+0x5c>
      Chip_SCU_PinMux( lpcUart485DirPin.lpcScuPort,
                       lpcUart485DirPin.lpcScuPin,
                       MD_PDN,
                       lpcUart485DirPin.lpcScuFunc );
   }
}
1a003a60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @note	Use an Or'ed value of UART_RS485CTRL_* definitions with this
 *			call to set specific options.
 */
STATIC INLINE void Chip_UART_SetRS485Flags(LPC_USART_T *pUART, uint32_t ctrl)
{
	pUART->RS485CTRL |= ctrl;
1a003a64:	4a06      	ldr	r2, [pc, #24]	; (1a003a80 <uartInit+0x78>)
1a003a66:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
1a003a68:	f043 0330 	orr.w	r3, r3, #48	; 0x30
1a003a6c:	64d3      	str	r3, [r2, #76]	; 0x4c
1a003a6e:	221a      	movs	r2, #26
1a003a70:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
1a003a74:	e7f4      	b.n	1a003a60 <uartInit+0x58>
1a003a76:	bf00      	nop
1a003a78:	1a0056d4 	.word	0x1a0056d4
1a003a7c:	40086000 	.word	0x40086000
1a003a80:	40081000 	.word	0x40081000

1a003a84 <uartWriteByte>:
   return retVal;
}

// Blocking Write 1 byte to TX FIFO
void uartWriteByte( uartMap_t uart, const uint8_t value )
{
1a003a84:	b538      	push	{r3, r4, r5, lr}
1a003a86:	4604      	mov	r4, r0
1a003a88:	460d      	mov	r5, r1
   // Wait for space in FIFO (blocking)
   while( uartTxReady( uart ) == FALSE );
1a003a8a:	4620      	mov	r0, r4
1a003a8c:	f7ff ffa6 	bl	1a0039dc <uartTxReady>
1a003a90:	2800      	cmp	r0, #0
1a003a92:	d0fa      	beq.n	1a003a8a <uartWriteByte+0x6>
   // Send byte
   uartTxWrite( uart, value );
1a003a94:	4629      	mov	r1, r5
1a003a96:	4620      	mov	r0, r4
1a003a98:	f7ff ffac 	bl	1a0039f4 <uartTxWrite>
}
1a003a9c:	bd38      	pop	{r3, r4, r5, pc}

1a003a9e <uartWriteString>:

// Blocking Send a string
void uartWriteString( uartMap_t uart, const char* str )
{
1a003a9e:	b538      	push	{r3, r4, r5, lr}
1a003aa0:	4605      	mov	r5, r0
1a003aa2:	460c      	mov	r4, r1
   while( *str != 0 ) {
1a003aa4:	7821      	ldrb	r1, [r4, #0]
1a003aa6:	b121      	cbz	r1, 1a003ab2 <uartWriteString+0x14>
      uartWriteByte( uart, (uint8_t)*str );
1a003aa8:	4628      	mov	r0, r5
1a003aaa:	f7ff ffeb 	bl	1a003a84 <uartWriteByte>
      str++;
1a003aae:	3401      	adds	r4, #1
1a003ab0:	e7f8      	b.n	1a003aa4 <uartWriteString+0x6>
   }
}
1a003ab2:	bd38      	pop	{r3, r4, r5, pc}

1a003ab4 <pwmInitTimers>:
 * @Brief:   Initializes the pwm timers.
 * @param   none
 * @return   nothing
 */
static void pwmInitTimers(void)
{
1a003ab4:	b508      	push	{r3, lr}
   Sct_Init(PWM_FREC);
1a003ab6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1a003aba:	f7ff ff1b 	bl	1a0038f4 <Sct_Init>
}
1a003abe:	bd08      	pop	{r3, pc}

1a003ac0 <pwmIsAttached>:
 * @param:   pwmNumber:   ID of the pwm, from 0 to 10
 * @return:   position (1 ~ PWM_TOTALNUMBER), 0 if the element was not found.
 */
uint8_t pwmIsAttached( pwmMap_t pwmNumber )
{
   uint8_t position = 0, positionInList = 0;
1a003ac0:	2300      	movs	r3, #0
   while ( (position < PWM_TOTALNUMBER) &&
1a003ac2:	2b0a      	cmp	r3, #10
1a003ac4:	d806      	bhi.n	1a003ad4 <pwmIsAttached+0x14>
           (pwmNumber != AttachedPWMList[position]) ) {
1a003ac6:	4a07      	ldr	r2, [pc, #28]	; (1a003ae4 <pwmIsAttached+0x24>)
1a003ac8:	5cd2      	ldrb	r2, [r2, r3]
   while ( (position < PWM_TOTALNUMBER) &&
1a003aca:	4282      	cmp	r2, r0
1a003acc:	d002      	beq.n	1a003ad4 <pwmIsAttached+0x14>
      position++;
1a003ace:	3301      	adds	r3, #1
1a003ad0:	b2db      	uxtb	r3, r3
1a003ad2:	e7f6      	b.n	1a003ac2 <pwmIsAttached+0x2>
   }

   if (position < PWM_TOTALNUMBER) {
1a003ad4:	2b0a      	cmp	r3, #10
1a003ad6:	d802      	bhi.n	1a003ade <pwmIsAttached+0x1e>
      positionInList = position + 1;
1a003ad8:	1c58      	adds	r0, r3, #1
1a003ada:	b2c0      	uxtb	r0, r0
1a003adc:	4770      	bx	lr
   } else {
      positionInList = 0;
1a003ade:	2000      	movs	r0, #0
   }

   return positionInList;
}
1a003ae0:	4770      	bx	lr
1a003ae2:	bf00      	nop
1a003ae4:	10000048 	.word	0x10000048

1a003ae8 <pwmAttach>:
{
1a003ae8:	b510      	push	{r4, lr}
1a003aea:	4604      	mov	r4, r0
   position = pwmIsAttached(pwmNumber);
1a003aec:	f7ff ffe8 	bl	1a003ac0 <pwmIsAttached>
   if(position==0) {
1a003af0:	b970      	cbnz	r0, 1a003b10 <pwmAttach+0x28>
      position = pwmIsAttached(EMPTY_POSITION); /* Searches for the first empty position */
1a003af2:	20ff      	movs	r0, #255	; 0xff
1a003af4:	f7ff ffe4 	bl	1a003ac0 <pwmIsAttached>
      if(position) { /* if position==0 => there is no room in the list for another pwm */
1a003af8:	b908      	cbnz	r0, 1a003afe <pwmAttach+0x16>
   bool_t success = FALSE;
1a003afa:	2000      	movs	r0, #0
1a003afc:	e009      	b.n	1a003b12 <pwmAttach+0x2a>
         AttachedPWMList[position-1] = pwmNumber;
1a003afe:	1e43      	subs	r3, r0, #1
1a003b00:	4a04      	ldr	r2, [pc, #16]	; (1a003b14 <pwmAttach+0x2c>)
1a003b02:	54d4      	strb	r4, [r2, r3]
         Sct_EnablePwmFor(pwmMap[pwmNumber]);
1a003b04:	4b04      	ldr	r3, [pc, #16]	; (1a003b18 <pwmAttach+0x30>)
1a003b06:	5d18      	ldrb	r0, [r3, r4]
1a003b08:	f7ff ff20 	bl	1a00394c <Sct_EnablePwmFor>
         success = TRUE;
1a003b0c:	2001      	movs	r0, #1
1a003b0e:	e000      	b.n	1a003b12 <pwmAttach+0x2a>
   bool_t success = FALSE;
1a003b10:	2000      	movs	r0, #0
}
1a003b12:	bd10      	pop	{r4, pc}
1a003b14:	10000048 	.word	0x10000048
1a003b18:	1a00571c 	.word	0x1a00571c

1a003b1c <pwmDetach>:
{
1a003b1c:	b508      	push	{r3, lr}
   position = pwmIsAttached(pwmNumber);
1a003b1e:	f7ff ffcf 	bl	1a003ac0 <pwmIsAttached>
   if(position) {
1a003b22:	b128      	cbz	r0, 1a003b30 <pwmDetach+0x14>
      AttachedPWMList[position-1] = EMPTY_POSITION;
1a003b24:	1e43      	subs	r3, r0, #1
1a003b26:	4a03      	ldr	r2, [pc, #12]	; (1a003b34 <pwmDetach+0x18>)
1a003b28:	21ff      	movs	r1, #255	; 0xff
1a003b2a:	54d1      	strb	r1, [r2, r3]
      success = TRUE;
1a003b2c:	2001      	movs	r0, #1
1a003b2e:	e000      	b.n	1a003b32 <pwmDetach+0x16>
   bool_t success = FALSE;
1a003b30:	2000      	movs	r0, #0
}
1a003b32:	bd08      	pop	{r3, pc}
1a003b34:	10000048 	.word	0x10000048

1a003b38 <pwmInit>:
{
1a003b38:	b508      	push	{r3, lr}
   switch(config) {
1a003b3a:	2902      	cmp	r1, #2
1a003b3c:	d008      	beq.n	1a003b50 <pwmInit+0x18>
1a003b3e:	2903      	cmp	r1, #3
1a003b40:	d009      	beq.n	1a003b56 <pwmInit+0x1e>
1a003b42:	b109      	cbz	r1, 1a003b48 <pwmInit+0x10>
      ret_val = 0;
1a003b44:	2000      	movs	r0, #0
}
1a003b46:	bd08      	pop	{r3, pc}
      pwmInitTimers();
1a003b48:	f7ff ffb4 	bl	1a003ab4 <pwmInitTimers>
   bool_t ret_val = 1;
1a003b4c:	2001      	movs	r0, #1
      break;
1a003b4e:	e7fa      	b.n	1a003b46 <pwmInit+0xe>
      ret_val = pwmAttach( pwmNumber );
1a003b50:	f7ff ffca 	bl	1a003ae8 <pwmAttach>
      break;
1a003b54:	e7f7      	b.n	1a003b46 <pwmInit+0xe>
      ret_val = pwmDetach( pwmNumber );
1a003b56:	f7ff ffe1 	bl	1a003b1c <pwmDetach>
      break;
1a003b5a:	e7f4      	b.n	1a003b46 <pwmInit+0xe>

1a003b5c <adcInit>:
 * @brief:  enable/disable the ADC and DAC peripheral
 * @param:  ADC_ENABLE, ADC_DISABLE
 * @return: none
*/
void adcInit( adcInit_t config )
{
1a003b5c:	b530      	push	{r4, r5, lr}
1a003b5e:	b083      	sub	sp, #12
   T_FIL3  ---- 7   ADC0_0 (ANALOG_SEL)
   T_COL1  ---- 132 ADC0_4 (ANALOG_SEL)
   ENET_MDC --- 140 ADC1_6 (ANALOG_SEL)
   */
   
   switch(config) {
1a003b60:	b118      	cbz	r0, 1a003b6a <adcInit+0xe>
1a003b62:	2801      	cmp	r0, #1
1a003b64:	d04b      	beq.n	1a003bfe <adcInit+0xa2>
         /* Disable ADC peripheral */
         Chip_ADC_DeInit( LPC_ADC0 );
         break;
      }

}
1a003b66:	b003      	add	sp, #12
1a003b68:	bd30      	pop	{r4, r5, pc}
         ADC_CLOCK_SETUP_T ADCSetup = {
1a003b6a:	4b27      	ldr	r3, [pc, #156]	; (1a003c08 <adcInit+0xac>)
1a003b6c:	9300      	str	r3, [sp, #0]
1a003b6e:	2500      	movs	r5, #0
1a003b70:	f88d 5004 	strb.w	r5, [sp, #4]
1a003b74:	f88d 5005 	strb.w	r5, [sp, #5]
         Chip_ADC_Init( LPC_ADC0, &ADCSetup );
1a003b78:	4c24      	ldr	r4, [pc, #144]	; (1a003c0c <adcInit+0xb0>)
1a003b7a:	4669      	mov	r1, sp
1a003b7c:	4620      	mov	r0, r4
1a003b7e:	f7ff f99d 	bl	1a002ebc <Chip_ADC_Init>
         Chip_ADC_SetBurstCmd( LPC_ADC0, DISABLE );
1a003b82:	4629      	mov	r1, r5
1a003b84:	4620      	mov	r0, r4
1a003b86:	f7ff fa38 	bl	1a002ffa <Chip_ADC_SetBurstCmd>
         Chip_ADC_SetSampleRate( LPC_ADC0, &ADCSetup, ADC_MAX_SAMPLE_RATE/2 );
1a003b8a:	4a21      	ldr	r2, [pc, #132]	; (1a003c10 <adcInit+0xb4>)
1a003b8c:	4669      	mov	r1, sp
1a003b8e:	4620      	mov	r0, r4
1a003b90:	f7ff f9ff 	bl	1a002f92 <Chip_ADC_SetSampleRate>
         Chip_ADC_EnableChannel( LPC_ADC0, ADC_CH1, DISABLE );
1a003b94:	462a      	mov	r2, r5
1a003b96:	2101      	movs	r1, #1
1a003b98:	4620      	mov	r0, r4
1a003b9a:	f7ff fa19 	bl	1a002fd0 <Chip_ADC_EnableChannel>
         Chip_ADC_Int_SetChannelCmd( LPC_ADC0, ADC_CH1, DISABLE );
1a003b9e:	462a      	mov	r2, r5
1a003ba0:	2101      	movs	r1, #1
1a003ba2:	4620      	mov	r0, r4
1a003ba4:	f7ff f9d4 	bl	1a002f50 <Chip_ADC_Int_SetChannelCmd>
         Chip_ADC_EnableChannel( LPC_ADC0, ADC_CH2, DISABLE );
1a003ba8:	462a      	mov	r2, r5
1a003baa:	2102      	movs	r1, #2
1a003bac:	4620      	mov	r0, r4
1a003bae:	f7ff fa0f 	bl	1a002fd0 <Chip_ADC_EnableChannel>
         Chip_ADC_Int_SetChannelCmd( LPC_ADC0, ADC_CH2, DISABLE );
1a003bb2:	462a      	mov	r2, r5
1a003bb4:	2102      	movs	r1, #2
1a003bb6:	4620      	mov	r0, r4
1a003bb8:	f7ff f9ca 	bl	1a002f50 <Chip_ADC_Int_SetChannelCmd>
         Chip_ADC_EnableChannel( LPC_ADC0, ADC_CH3, DISABLE );
1a003bbc:	462a      	mov	r2, r5
1a003bbe:	2103      	movs	r1, #3
1a003bc0:	4620      	mov	r0, r4
1a003bc2:	f7ff fa05 	bl	1a002fd0 <Chip_ADC_EnableChannel>
         Chip_ADC_Int_SetChannelCmd( LPC_ADC0, ADC_CH3, DISABLE );
1a003bc6:	462a      	mov	r2, r5
1a003bc8:	2103      	movs	r1, #3
1a003bca:	4620      	mov	r0, r4
1a003bcc:	f7ff f9c0 	bl	1a002f50 <Chip_ADC_Int_SetChannelCmd>
         Chip_ADC_EnableChannel( LPC_ADC0, ADC_CH4, DISABLE );
1a003bd0:	462a      	mov	r2, r5
1a003bd2:	2104      	movs	r1, #4
1a003bd4:	4620      	mov	r0, r4
1a003bd6:	f7ff f9fb 	bl	1a002fd0 <Chip_ADC_EnableChannel>
         Chip_ADC_Int_SetChannelCmd( LPC_ADC0, ADC_CH4, DISABLE );
1a003bda:	462a      	mov	r2, r5
1a003bdc:	2104      	movs	r1, #4
1a003bde:	4620      	mov	r0, r4
1a003be0:	f7ff f9b6 	bl	1a002f50 <Chip_ADC_Int_SetChannelCmd>
	LPC_SCU->ENAIO[ADC_ID] |= 1UL << channel;
1a003be4:	4a0b      	ldr	r2, [pc, #44]	; (1a003c14 <adcInit+0xb8>)
1a003be6:	f8d2 3c88 	ldr.w	r3, [r2, #3208]	; 0xc88
1a003bea:	f043 0310 	orr.w	r3, r3, #16
1a003bee:	f8c2 3c88 	str.w	r3, [r2, #3208]	; 0xc88
         Chip_ADC_Int_SetChannelCmd( LPC_ADC0, ADC_CH5, DISABLE ); // Revisar codigo
1a003bf2:	462a      	mov	r2, r5
1a003bf4:	2105      	movs	r1, #5
1a003bf6:	4620      	mov	r0, r4
1a003bf8:	f7ff f9aa 	bl	1a002f50 <Chip_ADC_Int_SetChannelCmd>
      break;
1a003bfc:	e7b3      	b.n	1a003b66 <adcInit+0xa>
         Chip_ADC_DeInit( LPC_ADC0 );
1a003bfe:	4803      	ldr	r0, [pc, #12]	; (1a003c0c <adcInit+0xb0>)
1a003c00:	f7ff f97c 	bl	1a002efc <Chip_ADC_DeInit>
}
1a003c04:	e7af      	b.n	1a003b66 <adcInit+0xa>
1a003c06:	bf00      	nop
1a003c08:	00061a80 	.word	0x00061a80
1a003c0c:	400e3000 	.word	0x400e3000
1a003c10:	00030d40 	.word	0x00030d40
1a003c14:	40086000 	.word	0x40086000

1a003c18 <adcRead>:
 * @brief   Get the value of one ADC channel. Mode: BLOCKING
 * @param   AI0 ... AIn
 * @return  analog value
 */
uint16_t adcRead( adcMap_t analogInput )
{
1a003c18:	b570      	push	{r4, r5, r6, lr}
1a003c1a:	b082      	sub	sp, #8
   uint8_t lpcAdcChannel = (uint8_t)(analogInput + 1);
1a003c1c:	3001      	adds	r0, #1
1a003c1e:	b2c4      	uxtb	r4, r0
   uint16_t analogValue = 0;
1a003c20:	2600      	movs	r6, #0
1a003c22:	f8ad 6006 	strh.w	r6, [sp, #6]

   // Enable channel
   Chip_ADC_EnableChannel(LPC_ADC0, lpcAdcChannel, ENABLE);
1a003c26:	4d11      	ldr	r5, [pc, #68]	; (1a003c6c <adcRead+0x54>)
1a003c28:	2201      	movs	r2, #1
1a003c2a:	4621      	mov	r1, r4
1a003c2c:	4628      	mov	r0, r5
1a003c2e:	f7ff f9cf 	bl	1a002fd0 <Chip_ADC_EnableChannel>

   // Start conversion
   Chip_ADC_SetStartMode(LPC_ADC0, ADC_START_NOW, ADC_TRIGGERMODE_RISING);
1a003c32:	4632      	mov	r2, r6
1a003c34:	2101      	movs	r1, #1
1a003c36:	4628      	mov	r0, r5
1a003c38:	f7ff f99b 	bl	1a002f72 <Chip_ADC_SetStartMode>

   // Wait for conversion complete
   while(
      (Chip_ADC_ReadStatus(LPC_ADC0, lpcAdcChannel, ADC_DR_DONE_STAT) != SET)
1a003c3c:	2200      	movs	r2, #0
1a003c3e:	4621      	mov	r1, r4
1a003c40:	480a      	ldr	r0, [pc, #40]	; (1a003c6c <adcRead+0x54>)
1a003c42:	f7ff f96a 	bl	1a002f1a <Chip_ADC_ReadStatus>
   while(
1a003c46:	2801      	cmp	r0, #1
1a003c48:	d1f8      	bne.n	1a003c3c <adcRead+0x24>
   );

   // Enable Read value
   Chip_ADC_ReadValue( LPC_ADC0, lpcAdcChannel, &analogValue );
1a003c4a:	4d08      	ldr	r5, [pc, #32]	; (1a003c6c <adcRead+0x54>)
1a003c4c:	f10d 0206 	add.w	r2, sp, #6
1a003c50:	4621      	mov	r1, r4
1a003c52:	4628      	mov	r0, r5
1a003c54:	f7ff f95d 	bl	1a002f12 <Chip_ADC_ReadValue>

   // Disable channel
   Chip_ADC_EnableChannel( LPC_ADC0, lpcAdcChannel, DISABLE );
1a003c58:	2200      	movs	r2, #0
1a003c5a:	4621      	mov	r1, r4
1a003c5c:	4628      	mov	r0, r5
1a003c5e:	f7ff f9b7 	bl	1a002fd0 <Chip_ADC_EnableChannel>

   return analogValue;
}
1a003c62:	f8bd 0006 	ldrh.w	r0, [sp, #6]
1a003c66:	b002      	add	sp, #8
1a003c68:	bd70      	pop	{r4, r5, r6, pc}
1a003c6a:	bf00      	nop
1a003c6c:	400e3000 	.word	0x400e3000

1a003c70 <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a003c70:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a003c72:	4d0b      	ldr	r5, [pc, #44]	; (1a003ca0 <gpioObtainPinInit+0x30>)
1a003c74:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a003c78:	182c      	adds	r4, r5, r0
1a003c7a:	5628      	ldrsb	r0, [r5, r0]
1a003c7c:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a003c7e:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a003c82:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a003c84:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a003c88:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a003c8a:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a003c8e:	9b02      	ldr	r3, [sp, #8]
1a003c90:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a003c92:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a003c96:	9b03      	ldr	r3, [sp, #12]
1a003c98:	701a      	strb	r2, [r3, #0]
}
1a003c9a:	bc30      	pop	{r4, r5}
1a003c9c:	4770      	bx	lr
1a003c9e:	bf00      	nop
1a003ca0:	1a005728 	.word	0x1a005728

1a003ca4 <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
   if( pin == VCC ){
1a003ca4:	f110 0f02 	cmn.w	r0, #2
1a003ca8:	f000 80c7 	beq.w	1a003e3a <gpioInit+0x196>
	  return FALSE;
   }
   if( pin == GND ){
1a003cac:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a003cb0:	f000 80c5 	beq.w	1a003e3e <gpioInit+0x19a>
{
1a003cb4:	b570      	push	{r4, r5, r6, lr}
1a003cb6:	b084      	sub	sp, #16
1a003cb8:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a003cba:	2300      	movs	r3, #0
1a003cbc:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a003cc0:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a003cc4:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a003cc8:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a003ccc:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a003cd0:	f10d 030b 	add.w	r3, sp, #11
1a003cd4:	9301      	str	r3, [sp, #4]
1a003cd6:	ab03      	add	r3, sp, #12
1a003cd8:	9300      	str	r3, [sp, #0]
1a003cda:	f10d 030d 	add.w	r3, sp, #13
1a003cde:	f10d 020e 	add.w	r2, sp, #14
1a003ce2:	f10d 010f 	add.w	r1, sp, #15
1a003ce6:	f7ff ffc3 	bl	1a003c70 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a003cea:	2c05      	cmp	r4, #5
1a003cec:	f200 80a9 	bhi.w	1a003e42 <gpioInit+0x19e>
1a003cf0:	e8df f004 	tbb	[pc, r4]
1a003cf4:	45278109 	.word	0x45278109
1a003cf8:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a003cfa:	4853      	ldr	r0, [pc, #332]	; (1a003e48 <gpioInit+0x1a4>)
1a003cfc:	f7ff fc80 	bl	1a003600 <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a003d00:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a003d02:	b004      	add	sp, #16
1a003d04:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a003d06:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a003d0a:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a003d0e:	f89d 200d 	ldrb.w	r2, [sp, #13]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a003d12:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a003d16:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a003d1a:	494c      	ldr	r1, [pc, #304]	; (1a003e4c <gpioInit+0x1a8>)
1a003d1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a003d20:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a003d24:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a003d28:	2001      	movs	r0, #1
1a003d2a:	fa00 f102 	lsl.w	r1, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a003d2e:	4c46      	ldr	r4, [pc, #280]	; (1a003e48 <gpioInit+0x1a4>)
1a003d30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a003d34:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a003d38:	ea22 0201 	bic.w	r2, r2, r1
1a003d3c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a003d40:	e7df      	b.n	1a003d02 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a003d42:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a003d46:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a003d4a:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a003d4e:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a003d52:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a003d56:	493d      	ldr	r1, [pc, #244]	; (1a003e4c <gpioInit+0x1a8>)
1a003d58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a003d5c:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a003d60:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a003d64:	2001      	movs	r0, #1
1a003d66:	fa00 f102 	lsl.w	r1, r0, r2
1a003d6a:	4c37      	ldr	r4, [pc, #220]	; (1a003e48 <gpioInit+0x1a4>)
1a003d6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a003d70:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a003d74:	ea22 0201 	bic.w	r2, r2, r1
1a003d78:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a003d7c:	e7c1      	b.n	1a003d02 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a003d7e:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a003d82:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a003d86:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a003d8a:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a003d8e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a003d92:	492e      	ldr	r1, [pc, #184]	; (1a003e4c <gpioInit+0x1a8>)
1a003d94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a003d98:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a003d9c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a003da0:	2001      	movs	r0, #1
1a003da2:	fa00 f102 	lsl.w	r1, r0, r2
1a003da6:	4c28      	ldr	r4, [pc, #160]	; (1a003e48 <gpioInit+0x1a4>)
1a003da8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a003dac:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a003db0:	ea22 0201 	bic.w	r2, r2, r1
1a003db4:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a003db8:	e7a3      	b.n	1a003d02 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a003dba:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a003dbe:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a003dc2:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a003dc6:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a003dca:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a003dce:	491f      	ldr	r1, [pc, #124]	; (1a003e4c <gpioInit+0x1a8>)
1a003dd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a003dd4:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a003dd8:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a003ddc:	2001      	movs	r0, #1
1a003dde:	fa00 f102 	lsl.w	r1, r0, r2
1a003de2:	4c19      	ldr	r4, [pc, #100]	; (1a003e48 <gpioInit+0x1a4>)
1a003de4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a003de8:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a003dec:	ea22 0201 	bic.w	r2, r2, r1
1a003df0:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a003df4:	e785      	b.n	1a003d02 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a003df6:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a003dfa:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a003dfe:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a003e02:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a003e06:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a003e0a:	4910      	ldr	r1, [pc, #64]	; (1a003e4c <gpioInit+0x1a8>)
1a003e0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a003e10:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a003e14:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a003e18:	2001      	movs	r0, #1
1a003e1a:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] |= bitValue;
1a003e1e:	4b0a      	ldr	r3, [pc, #40]	; (1a003e48 <gpioInit+0x1a4>)
1a003e20:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a003e24:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a003e28:	4331      	orrs	r1, r6
1a003e2a:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a003e2e:	b2d2      	uxtb	r2, r2
	pGPIO->B[port][pin] = setting;
1a003e30:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a003e34:	2100      	movs	r1, #0
1a003e36:	5499      	strb	r1, [r3, r2]
1a003e38:	e763      	b.n	1a003d02 <gpioInit+0x5e>
	  return FALSE;
1a003e3a:	2000      	movs	r0, #0
1a003e3c:	4770      	bx	lr
	  return FALSE;
1a003e3e:	2000      	movs	r0, #0
}
1a003e40:	4770      	bx	lr
      ret_val = 0;
1a003e42:	2000      	movs	r0, #0
1a003e44:	e75d      	b.n	1a003d02 <gpioInit+0x5e>
1a003e46:	bf00      	nop
1a003e48:	400f4000 	.word	0x400f4000
1a003e4c:	40086000 	.word	0x40086000

1a003e50 <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
   if( pin == VCC ){
1a003e50:	f110 0f02 	cmn.w	r0, #2
1a003e54:	d02d      	beq.n	1a003eb2 <gpioWrite+0x62>
	  return FALSE;
   }
   if( pin == GND ){
1a003e56:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a003e5a:	d02c      	beq.n	1a003eb6 <gpioWrite+0x66>
{
1a003e5c:	b510      	push	{r4, lr}
1a003e5e:	b084      	sub	sp, #16
1a003e60:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a003e62:	2300      	movs	r3, #0
1a003e64:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a003e68:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a003e6c:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a003e70:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a003e74:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a003e78:	f10d 030b 	add.w	r3, sp, #11
1a003e7c:	9301      	str	r3, [sp, #4]
1a003e7e:	ab03      	add	r3, sp, #12
1a003e80:	9300      	str	r3, [sp, #0]
1a003e82:	f10d 030d 	add.w	r3, sp, #13
1a003e86:	f10d 020e 	add.w	r2, sp, #14
1a003e8a:	f10d 010f 	add.w	r1, sp, #15
1a003e8e:	f7ff feef 	bl	1a003c70 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a003e92:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a003e96:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a003e9a:	1c21      	adds	r1, r4, #0
1a003e9c:	bf18      	it	ne
1a003e9e:	2101      	movne	r1, #1
1a003ea0:	015b      	lsls	r3, r3, #5
1a003ea2:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a003ea6:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a003eaa:	5499      	strb	r1, [r3, r2]

   return ret_val;
1a003eac:	2001      	movs	r0, #1
}
1a003eae:	b004      	add	sp, #16
1a003eb0:	bd10      	pop	{r4, pc}
	  return FALSE;
1a003eb2:	2000      	movs	r0, #0
1a003eb4:	4770      	bx	lr
	  return FALSE;
1a003eb6:	2000      	movs	r0, #0
}
1a003eb8:	4770      	bx	lr

1a003eba <gpioRead>:
}


bool_t gpioRead( gpioMap_t pin )
{
   if( pin == VCC ){
1a003eba:	f110 0f02 	cmn.w	r0, #2
1a003ebe:	d02c      	beq.n	1a003f1a <gpioRead+0x60>
      return TRUE;
   }
   if( pin == GND ){
1a003ec0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a003ec4:	d02b      	beq.n	1a003f1e <gpioRead+0x64>
{
1a003ec6:	b500      	push	{lr}
1a003ec8:	b085      	sub	sp, #20
      return FALSE;
   }

   bool_t ret_val     = OFF;

   int8_t pinNamePort = 0;
1a003eca:	2300      	movs	r3, #0
1a003ecc:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a003ed0:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a003ed4:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a003ed8:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a003edc:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a003ee0:	f10d 030b 	add.w	r3, sp, #11
1a003ee4:	9301      	str	r3, [sp, #4]
1a003ee6:	ab03      	add	r3, sp, #12
1a003ee8:	9300      	str	r3, [sp, #0]
1a003eea:	f10d 030d 	add.w	r3, sp, #13
1a003eee:	f10d 020e 	add.w	r2, sp, #14
1a003ef2:	f10d 010f 	add.w	r1, sp, #15
1a003ef6:	f7ff febb 	bl	1a003c70 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   ret_val = (bool_t) Chip_GPIO_ReadPortBit( LPC_GPIO_PORT, gpioPort, gpioPin );
1a003efa:	f99d 300c 	ldrsb.w	r3, [sp, #12]
1a003efe:	f89d 200b 	ldrb.w	r2, [sp, #11]
	return (bool) pGPIO->B[port][pin];
1a003f02:	015b      	lsls	r3, r3, #5
1a003f04:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a003f08:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a003f0c:	5c98      	ldrb	r0, [r3, r2]
1a003f0e:	3000      	adds	r0, #0
1a003f10:	bf18      	it	ne
1a003f12:	2001      	movne	r0, #1

   return ret_val;
}
1a003f14:	b005      	add	sp, #20
1a003f16:	f85d fb04 	ldr.w	pc, [sp], #4
      return TRUE;
1a003f1a:	2001      	movs	r0, #1
1a003f1c:	4770      	bx	lr
      return FALSE;
1a003f1e:	2000      	movs	r0, #0
}
1a003f20:	4770      	bx	lr
1a003f22:	Address 0x000000001a003f22 is out of bounds.


1a003f24 <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a003f24:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a003f26:	4b04      	ldr	r3, [pc, #16]	; (1a003f38 <USB0_IRQHandler+0x14>)
1a003f28:	681b      	ldr	r3, [r3, #0]
1a003f2a:	681b      	ldr	r3, [r3, #0]
1a003f2c:	68db      	ldr	r3, [r3, #12]
1a003f2e:	4a03      	ldr	r2, [pc, #12]	; (1a003f3c <USB0_IRQHandler+0x18>)
1a003f30:	6810      	ldr	r0, [r2, #0]
1a003f32:	4798      	blx	r3
}
1a003f34:	bd08      	pop	{r3, pc}
1a003f36:	bf00      	nop
1a003f38:	10002ba8 	.word	0x10002ba8
1a003f3c:	10002b20 	.word	0x10002b20

1a003f40 <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a003f40:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a003f42:	f7ff fb4b 	bl	1a0035dc <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a003f46:	4b18      	ldr	r3, [pc, #96]	; (1a003fa8 <boardInit+0x68>)
1a003f48:	6818      	ldr	r0, [r3, #0]
1a003f4a:	f7ff fcc5 	bl	1a0038d8 <cyclesCounterInit>
      //#error CIAA-NXP

   #elif BOARD==edu_ciaa_nxp

      // Inicializar GPIOs
      gpioInit( 0, GPIO_ENABLE );
1a003f4e:	2105      	movs	r1, #5
1a003f50:	2000      	movs	r0, #0
1a003f52:	f7ff fea7 	bl	1a003ca4 <gpioInit>

      // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
      gpioInit( TEC1, GPIO_INPUT );
1a003f56:	2100      	movs	r1, #0
1a003f58:	2024      	movs	r0, #36	; 0x24
1a003f5a:	f7ff fea3 	bl	1a003ca4 <gpioInit>
      gpioInit( TEC2, GPIO_INPUT );
1a003f5e:	2100      	movs	r1, #0
1a003f60:	2025      	movs	r0, #37	; 0x25
1a003f62:	f7ff fe9f 	bl	1a003ca4 <gpioInit>
      gpioInit( TEC3, GPIO_INPUT );
1a003f66:	2100      	movs	r1, #0
1a003f68:	2026      	movs	r0, #38	; 0x26
1a003f6a:	f7ff fe9b 	bl	1a003ca4 <gpioInit>
      gpioInit( TEC4, GPIO_INPUT );
1a003f6e:	2100      	movs	r1, #0
1a003f70:	2027      	movs	r0, #39	; 0x27
1a003f72:	f7ff fe97 	bl	1a003ca4 <gpioInit>

      // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
      gpioInit( LEDR, GPIO_OUTPUT );
1a003f76:	2101      	movs	r1, #1
1a003f78:	2028      	movs	r0, #40	; 0x28
1a003f7a:	f7ff fe93 	bl	1a003ca4 <gpioInit>
      gpioInit( LEDG, GPIO_OUTPUT );
1a003f7e:	2101      	movs	r1, #1
1a003f80:	2029      	movs	r0, #41	; 0x29
1a003f82:	f7ff fe8f 	bl	1a003ca4 <gpioInit>
      gpioInit( LEDB, GPIO_OUTPUT );
1a003f86:	2101      	movs	r1, #1
1a003f88:	202a      	movs	r0, #42	; 0x2a
1a003f8a:	f7ff fe8b 	bl	1a003ca4 <gpioInit>
      gpioInit( LED1, GPIO_OUTPUT );
1a003f8e:	2101      	movs	r1, #1
1a003f90:	202b      	movs	r0, #43	; 0x2b
1a003f92:	f7ff fe87 	bl	1a003ca4 <gpioInit>
      gpioInit( LED2, GPIO_OUTPUT );
1a003f96:	2101      	movs	r1, #1
1a003f98:	202c      	movs	r0, #44	; 0x2c
1a003f9a:	f7ff fe83 	bl	1a003ca4 <gpioInit>
      gpioInit( LED3, GPIO_OUTPUT );
1a003f9e:	2101      	movs	r1, #1
1a003fa0:	202d      	movs	r0, #45	; 0x2d
1a003fa2:	f7ff fe7f 	bl	1a003ca4 <gpioInit>
   #else
      #error BOARD compile variable must be defined

   #endif

}
1a003fa6:	bd08      	pop	{r3, pc}
1a003fa8:	10002ba4 	.word	0x10002ba4

1a003fac <printInitUart>:
{
   *printer = uart;
}

void printInitUart( print_t* printer, uartMap_t uart, uint32_t baudRate )
{
1a003fac:	b508      	push	{r3, lr}
1a003fae:	460b      	mov	r3, r1
   *printer = uart;
1a003fb0:	7001      	strb	r1, [r0, #0]
   uartInit( uart, baudRate );
1a003fb2:	4611      	mov	r1, r2
1a003fb4:	4618      	mov	r0, r3
1a003fb6:	f7ff fd27 	bl	1a003a08 <uartInit>
}
1a003fba:	bd08      	pop	{r3, pc}

1a003fbc <printString>:
}

// Print String

void printString( print_t printer, const char* string )
{
1a003fbc:	b508      	push	{r3, lr}
   uartWriteString( printer, string );
1a003fbe:	f7ff fd6e 	bl	1a003a9e <uartWriteString>
}
1a003fc2:	bd08      	pop	{r3, pc}

1a003fc4 <printEnter>:

void printEnter( print_t printer )
{
1a003fc4:	b508      	push	{r3, lr}
   uartWriteString( printer, PRINT_ENTER_STRING );
1a003fc6:	4902      	ldr	r1, [pc, #8]	; (1a003fd0 <printEnter+0xc>)
1a003fc8:	f7ff fd69 	bl	1a003a9e <uartWriteString>
}
1a003fcc:	bd08      	pop	{r3, pc}
1a003fce:	bf00      	nop
1a003fd0:	1a005524 	.word	0x1a005524

1a003fd4 <__aeabi_uldivmod>:
1a003fd4:	b953      	cbnz	r3, 1a003fec <__aeabi_uldivmod+0x18>
1a003fd6:	b94a      	cbnz	r2, 1a003fec <__aeabi_uldivmod+0x18>
1a003fd8:	2900      	cmp	r1, #0
1a003fda:	bf08      	it	eq
1a003fdc:	2800      	cmpeq	r0, #0
1a003fde:	bf1c      	itt	ne
1a003fe0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a003fe4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a003fe8:	f000 b974 	b.w	1a0042d4 <__aeabi_idiv0>
1a003fec:	f1ad 0c08 	sub.w	ip, sp, #8
1a003ff0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a003ff4:	f000 f806 	bl	1a004004 <__udivmoddi4>
1a003ff8:	f8dd e004 	ldr.w	lr, [sp, #4]
1a003ffc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a004000:	b004      	add	sp, #16
1a004002:	4770      	bx	lr

1a004004 <__udivmoddi4>:
1a004004:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a004008:	9e08      	ldr	r6, [sp, #32]
1a00400a:	4604      	mov	r4, r0
1a00400c:	4688      	mov	r8, r1
1a00400e:	2b00      	cmp	r3, #0
1a004010:	f040 8085 	bne.w	1a00411e <__udivmoddi4+0x11a>
1a004014:	428a      	cmp	r2, r1
1a004016:	4615      	mov	r5, r2
1a004018:	d948      	bls.n	1a0040ac <__udivmoddi4+0xa8>
1a00401a:	fab2 f282 	clz	r2, r2
1a00401e:	b14a      	cbz	r2, 1a004034 <__udivmoddi4+0x30>
1a004020:	f1c2 0720 	rsb	r7, r2, #32
1a004024:	fa01 f302 	lsl.w	r3, r1, r2
1a004028:	fa20 f707 	lsr.w	r7, r0, r7
1a00402c:	4095      	lsls	r5, r2
1a00402e:	ea47 0803 	orr.w	r8, r7, r3
1a004032:	4094      	lsls	r4, r2
1a004034:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a004038:	0c23      	lsrs	r3, r4, #16
1a00403a:	fbb8 f7fe 	udiv	r7, r8, lr
1a00403e:	fa1f fc85 	uxth.w	ip, r5
1a004042:	fb0e 8817 	mls	r8, lr, r7, r8
1a004046:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a00404a:	fb07 f10c 	mul.w	r1, r7, ip
1a00404e:	4299      	cmp	r1, r3
1a004050:	d909      	bls.n	1a004066 <__udivmoddi4+0x62>
1a004052:	18eb      	adds	r3, r5, r3
1a004054:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
1a004058:	f080 80e3 	bcs.w	1a004222 <__udivmoddi4+0x21e>
1a00405c:	4299      	cmp	r1, r3
1a00405e:	f240 80e0 	bls.w	1a004222 <__udivmoddi4+0x21e>
1a004062:	3f02      	subs	r7, #2
1a004064:	442b      	add	r3, r5
1a004066:	1a5b      	subs	r3, r3, r1
1a004068:	b2a4      	uxth	r4, r4
1a00406a:	fbb3 f0fe 	udiv	r0, r3, lr
1a00406e:	fb0e 3310 	mls	r3, lr, r0, r3
1a004072:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a004076:	fb00 fc0c 	mul.w	ip, r0, ip
1a00407a:	45a4      	cmp	ip, r4
1a00407c:	d909      	bls.n	1a004092 <__udivmoddi4+0x8e>
1a00407e:	192c      	adds	r4, r5, r4
1a004080:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a004084:	f080 80cb 	bcs.w	1a00421e <__udivmoddi4+0x21a>
1a004088:	45a4      	cmp	ip, r4
1a00408a:	f240 80c8 	bls.w	1a00421e <__udivmoddi4+0x21a>
1a00408e:	3802      	subs	r0, #2
1a004090:	442c      	add	r4, r5
1a004092:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a004096:	eba4 040c 	sub.w	r4, r4, ip
1a00409a:	2700      	movs	r7, #0
1a00409c:	b11e      	cbz	r6, 1a0040a6 <__udivmoddi4+0xa2>
1a00409e:	40d4      	lsrs	r4, r2
1a0040a0:	2300      	movs	r3, #0
1a0040a2:	e9c6 4300 	strd	r4, r3, [r6]
1a0040a6:	4639      	mov	r1, r7
1a0040a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0040ac:	2a00      	cmp	r2, #0
1a0040ae:	d053      	beq.n	1a004158 <__udivmoddi4+0x154>
1a0040b0:	fab2 f282 	clz	r2, r2
1a0040b4:	2a00      	cmp	r2, #0
1a0040b6:	f040 80b6 	bne.w	1a004226 <__udivmoddi4+0x222>
1a0040ba:	1b49      	subs	r1, r1, r5
1a0040bc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0040c0:	fa1f f885 	uxth.w	r8, r5
1a0040c4:	2701      	movs	r7, #1
1a0040c6:	fbb1 fcfe 	udiv	ip, r1, lr
1a0040ca:	0c23      	lsrs	r3, r4, #16
1a0040cc:	fb0e 111c 	mls	r1, lr, ip, r1
1a0040d0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a0040d4:	fb08 f10c 	mul.w	r1, r8, ip
1a0040d8:	4299      	cmp	r1, r3
1a0040da:	d907      	bls.n	1a0040ec <__udivmoddi4+0xe8>
1a0040dc:	18eb      	adds	r3, r5, r3
1a0040de:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
1a0040e2:	d202      	bcs.n	1a0040ea <__udivmoddi4+0xe6>
1a0040e4:	4299      	cmp	r1, r3
1a0040e6:	f200 80ec 	bhi.w	1a0042c2 <__udivmoddi4+0x2be>
1a0040ea:	4684      	mov	ip, r0
1a0040ec:	1a59      	subs	r1, r3, r1
1a0040ee:	b2a3      	uxth	r3, r4
1a0040f0:	fbb1 f0fe 	udiv	r0, r1, lr
1a0040f4:	fb0e 1410 	mls	r4, lr, r0, r1
1a0040f8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a0040fc:	fb08 f800 	mul.w	r8, r8, r0
1a004100:	45a0      	cmp	r8, r4
1a004102:	d907      	bls.n	1a004114 <__udivmoddi4+0x110>
1a004104:	192c      	adds	r4, r5, r4
1a004106:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a00410a:	d202      	bcs.n	1a004112 <__udivmoddi4+0x10e>
1a00410c:	45a0      	cmp	r8, r4
1a00410e:	f200 80dc 	bhi.w	1a0042ca <__udivmoddi4+0x2c6>
1a004112:	4618      	mov	r0, r3
1a004114:	eba4 0408 	sub.w	r4, r4, r8
1a004118:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a00411c:	e7be      	b.n	1a00409c <__udivmoddi4+0x98>
1a00411e:	428b      	cmp	r3, r1
1a004120:	d908      	bls.n	1a004134 <__udivmoddi4+0x130>
1a004122:	2e00      	cmp	r6, #0
1a004124:	d078      	beq.n	1a004218 <__udivmoddi4+0x214>
1a004126:	2700      	movs	r7, #0
1a004128:	e9c6 0100 	strd	r0, r1, [r6]
1a00412c:	4638      	mov	r0, r7
1a00412e:	4639      	mov	r1, r7
1a004130:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a004134:	fab3 f783 	clz	r7, r3
1a004138:	b97f      	cbnz	r7, 1a00415a <__udivmoddi4+0x156>
1a00413a:	428b      	cmp	r3, r1
1a00413c:	d302      	bcc.n	1a004144 <__udivmoddi4+0x140>
1a00413e:	4282      	cmp	r2, r0
1a004140:	f200 80bd 	bhi.w	1a0042be <__udivmoddi4+0x2ba>
1a004144:	1a84      	subs	r4, r0, r2
1a004146:	eb61 0303 	sbc.w	r3, r1, r3
1a00414a:	2001      	movs	r0, #1
1a00414c:	4698      	mov	r8, r3
1a00414e:	2e00      	cmp	r6, #0
1a004150:	d0a9      	beq.n	1a0040a6 <__udivmoddi4+0xa2>
1a004152:	e9c6 4800 	strd	r4, r8, [r6]
1a004156:	e7a6      	b.n	1a0040a6 <__udivmoddi4+0xa2>
1a004158:	deff      	udf	#255	; 0xff
1a00415a:	f1c7 0520 	rsb	r5, r7, #32
1a00415e:	40bb      	lsls	r3, r7
1a004160:	fa22 fc05 	lsr.w	ip, r2, r5
1a004164:	ea4c 0c03 	orr.w	ip, ip, r3
1a004168:	fa01 f407 	lsl.w	r4, r1, r7
1a00416c:	fa20 f805 	lsr.w	r8, r0, r5
1a004170:	fa21 f305 	lsr.w	r3, r1, r5
1a004174:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
1a004178:	ea48 0404 	orr.w	r4, r8, r4
1a00417c:	fbb3 f9fe 	udiv	r9, r3, lr
1a004180:	0c21      	lsrs	r1, r4, #16
1a004182:	fb0e 3319 	mls	r3, lr, r9, r3
1a004186:	fa1f f88c 	uxth.w	r8, ip
1a00418a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
1a00418e:	fb09 fa08 	mul.w	sl, r9, r8
1a004192:	459a      	cmp	sl, r3
1a004194:	fa02 f207 	lsl.w	r2, r2, r7
1a004198:	fa00 f107 	lsl.w	r1, r0, r7
1a00419c:	d90b      	bls.n	1a0041b6 <__udivmoddi4+0x1b2>
1a00419e:	eb1c 0303 	adds.w	r3, ip, r3
1a0041a2:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a0041a6:	f080 8088 	bcs.w	1a0042ba <__udivmoddi4+0x2b6>
1a0041aa:	459a      	cmp	sl, r3
1a0041ac:	f240 8085 	bls.w	1a0042ba <__udivmoddi4+0x2b6>
1a0041b0:	f1a9 0902 	sub.w	r9, r9, #2
1a0041b4:	4463      	add	r3, ip
1a0041b6:	eba3 030a 	sub.w	r3, r3, sl
1a0041ba:	b2a4      	uxth	r4, r4
1a0041bc:	fbb3 f0fe 	udiv	r0, r3, lr
1a0041c0:	fb0e 3310 	mls	r3, lr, r0, r3
1a0041c4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a0041c8:	fb00 f808 	mul.w	r8, r0, r8
1a0041cc:	45a0      	cmp	r8, r4
1a0041ce:	d908      	bls.n	1a0041e2 <__udivmoddi4+0x1de>
1a0041d0:	eb1c 0404 	adds.w	r4, ip, r4
1a0041d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a0041d8:	d26b      	bcs.n	1a0042b2 <__udivmoddi4+0x2ae>
1a0041da:	45a0      	cmp	r8, r4
1a0041dc:	d969      	bls.n	1a0042b2 <__udivmoddi4+0x2ae>
1a0041de:	3802      	subs	r0, #2
1a0041e0:	4464      	add	r4, ip
1a0041e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a0041e6:	eba4 0408 	sub.w	r4, r4, r8
1a0041ea:	fba0 8902 	umull	r8, r9, r0, r2
1a0041ee:	454c      	cmp	r4, r9
1a0041f0:	46c6      	mov	lr, r8
1a0041f2:	464b      	mov	r3, r9
1a0041f4:	d354      	bcc.n	1a0042a0 <__udivmoddi4+0x29c>
1a0041f6:	d051      	beq.n	1a00429c <__udivmoddi4+0x298>
1a0041f8:	2e00      	cmp	r6, #0
1a0041fa:	d069      	beq.n	1a0042d0 <__udivmoddi4+0x2cc>
1a0041fc:	ebb1 020e 	subs.w	r2, r1, lr
1a004200:	eb64 0403 	sbc.w	r4, r4, r3
1a004204:	fa04 f505 	lsl.w	r5, r4, r5
1a004208:	fa22 f307 	lsr.w	r3, r2, r7
1a00420c:	40fc      	lsrs	r4, r7
1a00420e:	431d      	orrs	r5, r3
1a004210:	e9c6 5400 	strd	r5, r4, [r6]
1a004214:	2700      	movs	r7, #0
1a004216:	e746      	b.n	1a0040a6 <__udivmoddi4+0xa2>
1a004218:	4637      	mov	r7, r6
1a00421a:	4630      	mov	r0, r6
1a00421c:	e743      	b.n	1a0040a6 <__udivmoddi4+0xa2>
1a00421e:	4618      	mov	r0, r3
1a004220:	e737      	b.n	1a004092 <__udivmoddi4+0x8e>
1a004222:	4607      	mov	r7, r0
1a004224:	e71f      	b.n	1a004066 <__udivmoddi4+0x62>
1a004226:	f1c2 0320 	rsb	r3, r2, #32
1a00422a:	fa20 f703 	lsr.w	r7, r0, r3
1a00422e:	4095      	lsls	r5, r2
1a004230:	fa01 f002 	lsl.w	r0, r1, r2
1a004234:	fa21 f303 	lsr.w	r3, r1, r3
1a004238:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a00423c:	4338      	orrs	r0, r7
1a00423e:	0c01      	lsrs	r1, r0, #16
1a004240:	fbb3 f7fe 	udiv	r7, r3, lr
1a004244:	fa1f f885 	uxth.w	r8, r5
1a004248:	fb0e 3317 	mls	r3, lr, r7, r3
1a00424c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a004250:	fb07 f308 	mul.w	r3, r7, r8
1a004254:	428b      	cmp	r3, r1
1a004256:	fa04 f402 	lsl.w	r4, r4, r2
1a00425a:	d907      	bls.n	1a00426c <__udivmoddi4+0x268>
1a00425c:	1869      	adds	r1, r5, r1
1a00425e:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
1a004262:	d228      	bcs.n	1a0042b6 <__udivmoddi4+0x2b2>
1a004264:	428b      	cmp	r3, r1
1a004266:	d926      	bls.n	1a0042b6 <__udivmoddi4+0x2b2>
1a004268:	3f02      	subs	r7, #2
1a00426a:	4429      	add	r1, r5
1a00426c:	1acb      	subs	r3, r1, r3
1a00426e:	b281      	uxth	r1, r0
1a004270:	fbb3 f0fe 	udiv	r0, r3, lr
1a004274:	fb0e 3310 	mls	r3, lr, r0, r3
1a004278:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a00427c:	fb00 f308 	mul.w	r3, r0, r8
1a004280:	428b      	cmp	r3, r1
1a004282:	d907      	bls.n	1a004294 <__udivmoddi4+0x290>
1a004284:	1869      	adds	r1, r5, r1
1a004286:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
1a00428a:	d210      	bcs.n	1a0042ae <__udivmoddi4+0x2aa>
1a00428c:	428b      	cmp	r3, r1
1a00428e:	d90e      	bls.n	1a0042ae <__udivmoddi4+0x2aa>
1a004290:	3802      	subs	r0, #2
1a004292:	4429      	add	r1, r5
1a004294:	1ac9      	subs	r1, r1, r3
1a004296:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a00429a:	e714      	b.n	1a0040c6 <__udivmoddi4+0xc2>
1a00429c:	4541      	cmp	r1, r8
1a00429e:	d2ab      	bcs.n	1a0041f8 <__udivmoddi4+0x1f4>
1a0042a0:	ebb8 0e02 	subs.w	lr, r8, r2
1a0042a4:	eb69 020c 	sbc.w	r2, r9, ip
1a0042a8:	3801      	subs	r0, #1
1a0042aa:	4613      	mov	r3, r2
1a0042ac:	e7a4      	b.n	1a0041f8 <__udivmoddi4+0x1f4>
1a0042ae:	4660      	mov	r0, ip
1a0042b0:	e7f0      	b.n	1a004294 <__udivmoddi4+0x290>
1a0042b2:	4618      	mov	r0, r3
1a0042b4:	e795      	b.n	1a0041e2 <__udivmoddi4+0x1de>
1a0042b6:	4667      	mov	r7, ip
1a0042b8:	e7d8      	b.n	1a00426c <__udivmoddi4+0x268>
1a0042ba:	4681      	mov	r9, r0
1a0042bc:	e77b      	b.n	1a0041b6 <__udivmoddi4+0x1b2>
1a0042be:	4638      	mov	r0, r7
1a0042c0:	e745      	b.n	1a00414e <__udivmoddi4+0x14a>
1a0042c2:	f1ac 0c02 	sub.w	ip, ip, #2
1a0042c6:	442b      	add	r3, r5
1a0042c8:	e710      	b.n	1a0040ec <__udivmoddi4+0xe8>
1a0042ca:	3802      	subs	r0, #2
1a0042cc:	442c      	add	r4, r5
1a0042ce:	e721      	b.n	1a004114 <__udivmoddi4+0x110>
1a0042d0:	4637      	mov	r7, r6
1a0042d2:	e6e8      	b.n	1a0040a6 <__udivmoddi4+0xa2>

1a0042d4 <__aeabi_idiv0>:
1a0042d4:	4770      	bx	lr
1a0042d6:	bf00      	nop

1a0042d8 <__sflush_r>:
1a0042d8:	898a      	ldrh	r2, [r1, #12]
1a0042da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0042de:	4605      	mov	r5, r0
1a0042e0:	0710      	lsls	r0, r2, #28
1a0042e2:	460c      	mov	r4, r1
1a0042e4:	d458      	bmi.n	1a004398 <__sflush_r+0xc0>
1a0042e6:	684b      	ldr	r3, [r1, #4]
1a0042e8:	2b00      	cmp	r3, #0
1a0042ea:	dc05      	bgt.n	1a0042f8 <__sflush_r+0x20>
1a0042ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
1a0042ee:	2b00      	cmp	r3, #0
1a0042f0:	dc02      	bgt.n	1a0042f8 <__sflush_r+0x20>
1a0042f2:	2000      	movs	r0, #0
1a0042f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0042f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a0042fa:	2e00      	cmp	r6, #0
1a0042fc:	d0f9      	beq.n	1a0042f2 <__sflush_r+0x1a>
1a0042fe:	2300      	movs	r3, #0
1a004300:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
1a004304:	682f      	ldr	r7, [r5, #0]
1a004306:	602b      	str	r3, [r5, #0]
1a004308:	d032      	beq.n	1a004370 <__sflush_r+0x98>
1a00430a:	6d60      	ldr	r0, [r4, #84]	; 0x54
1a00430c:	89a3      	ldrh	r3, [r4, #12]
1a00430e:	075a      	lsls	r2, r3, #29
1a004310:	d505      	bpl.n	1a00431e <__sflush_r+0x46>
1a004312:	6863      	ldr	r3, [r4, #4]
1a004314:	1ac0      	subs	r0, r0, r3
1a004316:	6b63      	ldr	r3, [r4, #52]	; 0x34
1a004318:	b10b      	cbz	r3, 1a00431e <__sflush_r+0x46>
1a00431a:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a00431c:	1ac0      	subs	r0, r0, r3
1a00431e:	2300      	movs	r3, #0
1a004320:	4602      	mov	r2, r0
1a004322:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a004324:	6a21      	ldr	r1, [r4, #32]
1a004326:	4628      	mov	r0, r5
1a004328:	47b0      	blx	r6
1a00432a:	1c43      	adds	r3, r0, #1
1a00432c:	89a3      	ldrh	r3, [r4, #12]
1a00432e:	d106      	bne.n	1a00433e <__sflush_r+0x66>
1a004330:	6829      	ldr	r1, [r5, #0]
1a004332:	291d      	cmp	r1, #29
1a004334:	d849      	bhi.n	1a0043ca <__sflush_r+0xf2>
1a004336:	4a2a      	ldr	r2, [pc, #168]	; (1a0043e0 <__sflush_r+0x108>)
1a004338:	40ca      	lsrs	r2, r1
1a00433a:	07d6      	lsls	r6, r2, #31
1a00433c:	d545      	bpl.n	1a0043ca <__sflush_r+0xf2>
1a00433e:	2200      	movs	r2, #0
1a004340:	6062      	str	r2, [r4, #4]
1a004342:	04d9      	lsls	r1, r3, #19
1a004344:	6922      	ldr	r2, [r4, #16]
1a004346:	6022      	str	r2, [r4, #0]
1a004348:	d504      	bpl.n	1a004354 <__sflush_r+0x7c>
1a00434a:	1c42      	adds	r2, r0, #1
1a00434c:	d101      	bne.n	1a004352 <__sflush_r+0x7a>
1a00434e:	682b      	ldr	r3, [r5, #0]
1a004350:	b903      	cbnz	r3, 1a004354 <__sflush_r+0x7c>
1a004352:	6560      	str	r0, [r4, #84]	; 0x54
1a004354:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a004356:	602f      	str	r7, [r5, #0]
1a004358:	2900      	cmp	r1, #0
1a00435a:	d0ca      	beq.n	1a0042f2 <__sflush_r+0x1a>
1a00435c:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a004360:	4299      	cmp	r1, r3
1a004362:	d002      	beq.n	1a00436a <__sflush_r+0x92>
1a004364:	4628      	mov	r0, r5
1a004366:	f000 f9c5 	bl	1a0046f4 <_free_r>
1a00436a:	2000      	movs	r0, #0
1a00436c:	6360      	str	r0, [r4, #52]	; 0x34
1a00436e:	e7c1      	b.n	1a0042f4 <__sflush_r+0x1c>
1a004370:	6a21      	ldr	r1, [r4, #32]
1a004372:	2301      	movs	r3, #1
1a004374:	4628      	mov	r0, r5
1a004376:	47b0      	blx	r6
1a004378:	1c41      	adds	r1, r0, #1
1a00437a:	d1c7      	bne.n	1a00430c <__sflush_r+0x34>
1a00437c:	682b      	ldr	r3, [r5, #0]
1a00437e:	2b00      	cmp	r3, #0
1a004380:	d0c4      	beq.n	1a00430c <__sflush_r+0x34>
1a004382:	2b1d      	cmp	r3, #29
1a004384:	d001      	beq.n	1a00438a <__sflush_r+0xb2>
1a004386:	2b16      	cmp	r3, #22
1a004388:	d101      	bne.n	1a00438e <__sflush_r+0xb6>
1a00438a:	602f      	str	r7, [r5, #0]
1a00438c:	e7b1      	b.n	1a0042f2 <__sflush_r+0x1a>
1a00438e:	89a3      	ldrh	r3, [r4, #12]
1a004390:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a004394:	81a3      	strh	r3, [r4, #12]
1a004396:	e7ad      	b.n	1a0042f4 <__sflush_r+0x1c>
1a004398:	690f      	ldr	r7, [r1, #16]
1a00439a:	2f00      	cmp	r7, #0
1a00439c:	d0a9      	beq.n	1a0042f2 <__sflush_r+0x1a>
1a00439e:	0793      	lsls	r3, r2, #30
1a0043a0:	680e      	ldr	r6, [r1, #0]
1a0043a2:	bf08      	it	eq
1a0043a4:	694b      	ldreq	r3, [r1, #20]
1a0043a6:	600f      	str	r7, [r1, #0]
1a0043a8:	bf18      	it	ne
1a0043aa:	2300      	movne	r3, #0
1a0043ac:	eba6 0807 	sub.w	r8, r6, r7
1a0043b0:	608b      	str	r3, [r1, #8]
1a0043b2:	f1b8 0f00 	cmp.w	r8, #0
1a0043b6:	dd9c      	ble.n	1a0042f2 <__sflush_r+0x1a>
1a0043b8:	4643      	mov	r3, r8
1a0043ba:	463a      	mov	r2, r7
1a0043bc:	6a21      	ldr	r1, [r4, #32]
1a0043be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
1a0043c0:	4628      	mov	r0, r5
1a0043c2:	47b0      	blx	r6
1a0043c4:	2800      	cmp	r0, #0
1a0043c6:	dc06      	bgt.n	1a0043d6 <__sflush_r+0xfe>
1a0043c8:	89a3      	ldrh	r3, [r4, #12]
1a0043ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a0043ce:	81a3      	strh	r3, [r4, #12]
1a0043d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0043d4:	e78e      	b.n	1a0042f4 <__sflush_r+0x1c>
1a0043d6:	4407      	add	r7, r0
1a0043d8:	eba8 0800 	sub.w	r8, r8, r0
1a0043dc:	e7e9      	b.n	1a0043b2 <__sflush_r+0xda>
1a0043de:	bf00      	nop
1a0043e0:	20400001 	.word	0x20400001

1a0043e4 <_fflush_r>:
1a0043e4:	b538      	push	{r3, r4, r5, lr}
1a0043e6:	690b      	ldr	r3, [r1, #16]
1a0043e8:	4605      	mov	r5, r0
1a0043ea:	460c      	mov	r4, r1
1a0043ec:	b913      	cbnz	r3, 1a0043f4 <_fflush_r+0x10>
1a0043ee:	2500      	movs	r5, #0
1a0043f0:	4628      	mov	r0, r5
1a0043f2:	bd38      	pop	{r3, r4, r5, pc}
1a0043f4:	b118      	cbz	r0, 1a0043fe <_fflush_r+0x1a>
1a0043f6:	6983      	ldr	r3, [r0, #24]
1a0043f8:	b90b      	cbnz	r3, 1a0043fe <_fflush_r+0x1a>
1a0043fa:	f000 f887 	bl	1a00450c <__sinit>
1a0043fe:	4b14      	ldr	r3, [pc, #80]	; (1a004450 <_fflush_r+0x6c>)
1a004400:	429c      	cmp	r4, r3
1a004402:	d11b      	bne.n	1a00443c <_fflush_r+0x58>
1a004404:	686c      	ldr	r4, [r5, #4]
1a004406:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a00440a:	2b00      	cmp	r3, #0
1a00440c:	d0ef      	beq.n	1a0043ee <_fflush_r+0xa>
1a00440e:	6e62      	ldr	r2, [r4, #100]	; 0x64
1a004410:	07d0      	lsls	r0, r2, #31
1a004412:	d404      	bmi.n	1a00441e <_fflush_r+0x3a>
1a004414:	0599      	lsls	r1, r3, #22
1a004416:	d402      	bmi.n	1a00441e <_fflush_r+0x3a>
1a004418:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a00441a:	f000 f952 	bl	1a0046c2 <__retarget_lock_acquire_recursive>
1a00441e:	4628      	mov	r0, r5
1a004420:	4621      	mov	r1, r4
1a004422:	f7ff ff59 	bl	1a0042d8 <__sflush_r>
1a004426:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a004428:	07da      	lsls	r2, r3, #31
1a00442a:	4605      	mov	r5, r0
1a00442c:	d4e0      	bmi.n	1a0043f0 <_fflush_r+0xc>
1a00442e:	89a3      	ldrh	r3, [r4, #12]
1a004430:	059b      	lsls	r3, r3, #22
1a004432:	d4dd      	bmi.n	1a0043f0 <_fflush_r+0xc>
1a004434:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a004436:	f000 f945 	bl	1a0046c4 <__retarget_lock_release_recursive>
1a00443a:	e7d9      	b.n	1a0043f0 <_fflush_r+0xc>
1a00443c:	4b05      	ldr	r3, [pc, #20]	; (1a004454 <_fflush_r+0x70>)
1a00443e:	429c      	cmp	r4, r3
1a004440:	d101      	bne.n	1a004446 <_fflush_r+0x62>
1a004442:	68ac      	ldr	r4, [r5, #8]
1a004444:	e7df      	b.n	1a004406 <_fflush_r+0x22>
1a004446:	4b04      	ldr	r3, [pc, #16]	; (1a004458 <_fflush_r+0x74>)
1a004448:	429c      	cmp	r4, r3
1a00444a:	bf08      	it	eq
1a00444c:	68ec      	ldreq	r4, [r5, #12]
1a00444e:	e7da      	b.n	1a004406 <_fflush_r+0x22>
1a004450:	1a005830 	.word	0x1a005830
1a004454:	1a005850 	.word	0x1a005850
1a004458:	1a005810 	.word	0x1a005810

1a00445c <std>:
1a00445c:	2300      	movs	r3, #0
1a00445e:	b510      	push	{r4, lr}
1a004460:	4604      	mov	r4, r0
1a004462:	e9c0 3300 	strd	r3, r3, [r0]
1a004466:	6083      	str	r3, [r0, #8]
1a004468:	8181      	strh	r1, [r0, #12]
1a00446a:	6643      	str	r3, [r0, #100]	; 0x64
1a00446c:	81c2      	strh	r2, [r0, #14]
1a00446e:	e9c0 3304 	strd	r3, r3, [r0, #16]
1a004472:	6183      	str	r3, [r0, #24]
1a004474:	4619      	mov	r1, r3
1a004476:	2208      	movs	r2, #8
1a004478:	305c      	adds	r0, #92	; 0x5c
1a00447a:	f000 f932 	bl	1a0046e2 <memset>
1a00447e:	4b05      	ldr	r3, [pc, #20]	; (1a004494 <std+0x38>)
1a004480:	6263      	str	r3, [r4, #36]	; 0x24
1a004482:	4b05      	ldr	r3, [pc, #20]	; (1a004498 <std+0x3c>)
1a004484:	62a3      	str	r3, [r4, #40]	; 0x28
1a004486:	4b05      	ldr	r3, [pc, #20]	; (1a00449c <std+0x40>)
1a004488:	62e3      	str	r3, [r4, #44]	; 0x2c
1a00448a:	4b05      	ldr	r3, [pc, #20]	; (1a0044a0 <std+0x44>)
1a00448c:	6224      	str	r4, [r4, #32]
1a00448e:	6323      	str	r3, [r4, #48]	; 0x30
1a004490:	bd10      	pop	{r4, pc}
1a004492:	bf00      	nop
1a004494:	1a004961 	.word	0x1a004961
1a004498:	1a004983 	.word	0x1a004983
1a00449c:	1a0049bb 	.word	0x1a0049bb
1a0044a0:	1a0049df 	.word	0x1a0049df

1a0044a4 <_cleanup_r>:
1a0044a4:	4901      	ldr	r1, [pc, #4]	; (1a0044ac <_cleanup_r+0x8>)
1a0044a6:	f000 b8af 	b.w	1a004608 <_fwalk_reent>
1a0044aa:	bf00      	nop
1a0044ac:	1a0043e5 	.word	0x1a0043e5

1a0044b0 <__sfmoreglue>:
1a0044b0:	b570      	push	{r4, r5, r6, lr}
1a0044b2:	1e4a      	subs	r2, r1, #1
1a0044b4:	2568      	movs	r5, #104	; 0x68
1a0044b6:	4355      	muls	r5, r2
1a0044b8:	460e      	mov	r6, r1
1a0044ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
1a0044be:	f000 f967 	bl	1a004790 <_malloc_r>
1a0044c2:	4604      	mov	r4, r0
1a0044c4:	b140      	cbz	r0, 1a0044d8 <__sfmoreglue+0x28>
1a0044c6:	2100      	movs	r1, #0
1a0044c8:	e9c0 1600 	strd	r1, r6, [r0]
1a0044cc:	300c      	adds	r0, #12
1a0044ce:	60a0      	str	r0, [r4, #8]
1a0044d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
1a0044d4:	f000 f905 	bl	1a0046e2 <memset>
1a0044d8:	4620      	mov	r0, r4
1a0044da:	bd70      	pop	{r4, r5, r6, pc}

1a0044dc <__sfp_lock_acquire>:
1a0044dc:	4801      	ldr	r0, [pc, #4]	; (1a0044e4 <__sfp_lock_acquire+0x8>)
1a0044de:	f000 b8f0 	b.w	1a0046c2 <__retarget_lock_acquire_recursive>
1a0044e2:	bf00      	nop
1a0044e4:	10002bb4 	.word	0x10002bb4

1a0044e8 <__sfp_lock_release>:
1a0044e8:	4801      	ldr	r0, [pc, #4]	; (1a0044f0 <__sfp_lock_release+0x8>)
1a0044ea:	f000 b8eb 	b.w	1a0046c4 <__retarget_lock_release_recursive>
1a0044ee:	bf00      	nop
1a0044f0:	10002bb4 	.word	0x10002bb4

1a0044f4 <__sinit_lock_acquire>:
1a0044f4:	4801      	ldr	r0, [pc, #4]	; (1a0044fc <__sinit_lock_acquire+0x8>)
1a0044f6:	f000 b8e4 	b.w	1a0046c2 <__retarget_lock_acquire_recursive>
1a0044fa:	bf00      	nop
1a0044fc:	10002baf 	.word	0x10002baf

1a004500 <__sinit_lock_release>:
1a004500:	4801      	ldr	r0, [pc, #4]	; (1a004508 <__sinit_lock_release+0x8>)
1a004502:	f000 b8df 	b.w	1a0046c4 <__retarget_lock_release_recursive>
1a004506:	bf00      	nop
1a004508:	10002baf 	.word	0x10002baf

1a00450c <__sinit>:
1a00450c:	b510      	push	{r4, lr}
1a00450e:	4604      	mov	r4, r0
1a004510:	f7ff fff0 	bl	1a0044f4 <__sinit_lock_acquire>
1a004514:	69a3      	ldr	r3, [r4, #24]
1a004516:	b11b      	cbz	r3, 1a004520 <__sinit+0x14>
1a004518:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a00451c:	f7ff bff0 	b.w	1a004500 <__sinit_lock_release>
1a004520:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
1a004524:	6523      	str	r3, [r4, #80]	; 0x50
1a004526:	4b13      	ldr	r3, [pc, #76]	; (1a004574 <__sinit+0x68>)
1a004528:	4a13      	ldr	r2, [pc, #76]	; (1a004578 <__sinit+0x6c>)
1a00452a:	681b      	ldr	r3, [r3, #0]
1a00452c:	62a2      	str	r2, [r4, #40]	; 0x28
1a00452e:	42a3      	cmp	r3, r4
1a004530:	bf04      	itt	eq
1a004532:	2301      	moveq	r3, #1
1a004534:	61a3      	streq	r3, [r4, #24]
1a004536:	4620      	mov	r0, r4
1a004538:	f000 f820 	bl	1a00457c <__sfp>
1a00453c:	6060      	str	r0, [r4, #4]
1a00453e:	4620      	mov	r0, r4
1a004540:	f000 f81c 	bl	1a00457c <__sfp>
1a004544:	60a0      	str	r0, [r4, #8]
1a004546:	4620      	mov	r0, r4
1a004548:	f000 f818 	bl	1a00457c <__sfp>
1a00454c:	2200      	movs	r2, #0
1a00454e:	60e0      	str	r0, [r4, #12]
1a004550:	2104      	movs	r1, #4
1a004552:	6860      	ldr	r0, [r4, #4]
1a004554:	f7ff ff82 	bl	1a00445c <std>
1a004558:	2201      	movs	r2, #1
1a00455a:	2109      	movs	r1, #9
1a00455c:	68a0      	ldr	r0, [r4, #8]
1a00455e:	f7ff ff7d 	bl	1a00445c <std>
1a004562:	2202      	movs	r2, #2
1a004564:	2112      	movs	r1, #18
1a004566:	68e0      	ldr	r0, [r4, #12]
1a004568:	f7ff ff78 	bl	1a00445c <std>
1a00456c:	2301      	movs	r3, #1
1a00456e:	61a3      	str	r3, [r4, #24]
1a004570:	e7d2      	b.n	1a004518 <__sinit+0xc>
1a004572:	bf00      	nop
1a004574:	1a005870 	.word	0x1a005870
1a004578:	1a0044a5 	.word	0x1a0044a5

1a00457c <__sfp>:
1a00457c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a00457e:	4607      	mov	r7, r0
1a004580:	f7ff ffac 	bl	1a0044dc <__sfp_lock_acquire>
1a004584:	4b1e      	ldr	r3, [pc, #120]	; (1a004600 <__sfp+0x84>)
1a004586:	681e      	ldr	r6, [r3, #0]
1a004588:	69b3      	ldr	r3, [r6, #24]
1a00458a:	b913      	cbnz	r3, 1a004592 <__sfp+0x16>
1a00458c:	4630      	mov	r0, r6
1a00458e:	f7ff ffbd 	bl	1a00450c <__sinit>
1a004592:	3648      	adds	r6, #72	; 0x48
1a004594:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
1a004598:	3b01      	subs	r3, #1
1a00459a:	d503      	bpl.n	1a0045a4 <__sfp+0x28>
1a00459c:	6833      	ldr	r3, [r6, #0]
1a00459e:	b30b      	cbz	r3, 1a0045e4 <__sfp+0x68>
1a0045a0:	6836      	ldr	r6, [r6, #0]
1a0045a2:	e7f7      	b.n	1a004594 <__sfp+0x18>
1a0045a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
1a0045a8:	b9d5      	cbnz	r5, 1a0045e0 <__sfp+0x64>
1a0045aa:	4b16      	ldr	r3, [pc, #88]	; (1a004604 <__sfp+0x88>)
1a0045ac:	60e3      	str	r3, [r4, #12]
1a0045ae:	f104 0058 	add.w	r0, r4, #88	; 0x58
1a0045b2:	6665      	str	r5, [r4, #100]	; 0x64
1a0045b4:	f000 f884 	bl	1a0046c0 <__retarget_lock_init_recursive>
1a0045b8:	f7ff ff96 	bl	1a0044e8 <__sfp_lock_release>
1a0045bc:	6025      	str	r5, [r4, #0]
1a0045be:	e9c4 5501 	strd	r5, r5, [r4, #4]
1a0045c2:	e9c4 5504 	strd	r5, r5, [r4, #16]
1a0045c6:	61a5      	str	r5, [r4, #24]
1a0045c8:	2208      	movs	r2, #8
1a0045ca:	4629      	mov	r1, r5
1a0045cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
1a0045d0:	f000 f887 	bl	1a0046e2 <memset>
1a0045d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
1a0045d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
1a0045dc:	4620      	mov	r0, r4
1a0045de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0045e0:	3468      	adds	r4, #104	; 0x68
1a0045e2:	e7d9      	b.n	1a004598 <__sfp+0x1c>
1a0045e4:	2104      	movs	r1, #4
1a0045e6:	4638      	mov	r0, r7
1a0045e8:	f7ff ff62 	bl	1a0044b0 <__sfmoreglue>
1a0045ec:	4604      	mov	r4, r0
1a0045ee:	6030      	str	r0, [r6, #0]
1a0045f0:	2800      	cmp	r0, #0
1a0045f2:	d1d5      	bne.n	1a0045a0 <__sfp+0x24>
1a0045f4:	f7ff ff78 	bl	1a0044e8 <__sfp_lock_release>
1a0045f8:	230c      	movs	r3, #12
1a0045fa:	603b      	str	r3, [r7, #0]
1a0045fc:	e7ee      	b.n	1a0045dc <__sfp+0x60>
1a0045fe:	bf00      	nop
1a004600:	1a005870 	.word	0x1a005870
1a004604:	ffff0001 	.word	0xffff0001

1a004608 <_fwalk_reent>:
1a004608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a00460c:	4680      	mov	r8, r0
1a00460e:	4689      	mov	r9, r1
1a004610:	f100 0448 	add.w	r4, r0, #72	; 0x48
1a004614:	2600      	movs	r6, #0
1a004616:	b914      	cbnz	r4, 1a00461e <_fwalk_reent+0x16>
1a004618:	4630      	mov	r0, r6
1a00461a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a00461e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
1a004622:	3f01      	subs	r7, #1
1a004624:	d501      	bpl.n	1a00462a <_fwalk_reent+0x22>
1a004626:	6824      	ldr	r4, [r4, #0]
1a004628:	e7f5      	b.n	1a004616 <_fwalk_reent+0xe>
1a00462a:	89ab      	ldrh	r3, [r5, #12]
1a00462c:	2b01      	cmp	r3, #1
1a00462e:	d907      	bls.n	1a004640 <_fwalk_reent+0x38>
1a004630:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
1a004634:	3301      	adds	r3, #1
1a004636:	d003      	beq.n	1a004640 <_fwalk_reent+0x38>
1a004638:	4629      	mov	r1, r5
1a00463a:	4640      	mov	r0, r8
1a00463c:	47c8      	blx	r9
1a00463e:	4306      	orrs	r6, r0
1a004640:	3568      	adds	r5, #104	; 0x68
1a004642:	e7ee      	b.n	1a004622 <_fwalk_reent+0x1a>

1a004644 <__libc_init_array>:
1a004644:	b570      	push	{r4, r5, r6, lr}
1a004646:	4d0d      	ldr	r5, [pc, #52]	; (1a00467c <__libc_init_array+0x38>)
1a004648:	4c0d      	ldr	r4, [pc, #52]	; (1a004680 <__libc_init_array+0x3c>)
1a00464a:	1b64      	subs	r4, r4, r5
1a00464c:	10a4      	asrs	r4, r4, #2
1a00464e:	2600      	movs	r6, #0
1a004650:	42a6      	cmp	r6, r4
1a004652:	d109      	bne.n	1a004668 <__libc_init_array+0x24>
1a004654:	4d0b      	ldr	r5, [pc, #44]	; (1a004684 <__libc_init_array+0x40>)
1a004656:	4c0c      	ldr	r4, [pc, #48]	; (1a004688 <__libc_init_array+0x44>)
1a004658:	f7fc f8bd 	bl	1a0007d6 <_init>
1a00465c:	1b64      	subs	r4, r4, r5
1a00465e:	10a4      	asrs	r4, r4, #2
1a004660:	2600      	movs	r6, #0
1a004662:	42a6      	cmp	r6, r4
1a004664:	d105      	bne.n	1a004672 <__libc_init_array+0x2e>
1a004666:	bd70      	pop	{r4, r5, r6, pc}
1a004668:	f855 3b04 	ldr.w	r3, [r5], #4
1a00466c:	4798      	blx	r3
1a00466e:	3601      	adds	r6, #1
1a004670:	e7ee      	b.n	1a004650 <__libc_init_array+0xc>
1a004672:	f855 3b04 	ldr.w	r3, [r5], #4
1a004676:	4798      	blx	r3
1a004678:	3601      	adds	r6, #1
1a00467a:	e7f2      	b.n	1a004662 <__libc_init_array+0x1e>
1a00467c:	1a0058cc 	.word	0x1a0058cc
1a004680:	1a0058cc 	.word	0x1a0058cc
1a004684:	1a0058cc 	.word	0x1a0058cc
1a004688:	1a0058d0 	.word	0x1a0058d0

1a00468c <__itoa>:
1a00468c:	1e93      	subs	r3, r2, #2
1a00468e:	2b22      	cmp	r3, #34	; 0x22
1a004690:	b510      	push	{r4, lr}
1a004692:	460c      	mov	r4, r1
1a004694:	d904      	bls.n	1a0046a0 <__itoa+0x14>
1a004696:	2300      	movs	r3, #0
1a004698:	700b      	strb	r3, [r1, #0]
1a00469a:	461c      	mov	r4, r3
1a00469c:	4620      	mov	r0, r4
1a00469e:	bd10      	pop	{r4, pc}
1a0046a0:	2a0a      	cmp	r2, #10
1a0046a2:	d109      	bne.n	1a0046b8 <__itoa+0x2c>
1a0046a4:	2800      	cmp	r0, #0
1a0046a6:	da07      	bge.n	1a0046b8 <__itoa+0x2c>
1a0046a8:	232d      	movs	r3, #45	; 0x2d
1a0046aa:	700b      	strb	r3, [r1, #0]
1a0046ac:	4240      	negs	r0, r0
1a0046ae:	2101      	movs	r1, #1
1a0046b0:	4421      	add	r1, r4
1a0046b2:	f000 f999 	bl	1a0049e8 <__utoa>
1a0046b6:	e7f1      	b.n	1a00469c <__itoa+0x10>
1a0046b8:	2100      	movs	r1, #0
1a0046ba:	e7f9      	b.n	1a0046b0 <__itoa+0x24>

1a0046bc <itoa>:
1a0046bc:	f7ff bfe6 	b.w	1a00468c <__itoa>

1a0046c0 <__retarget_lock_init_recursive>:
1a0046c0:	4770      	bx	lr

1a0046c2 <__retarget_lock_acquire_recursive>:
1a0046c2:	4770      	bx	lr

1a0046c4 <__retarget_lock_release_recursive>:
1a0046c4:	4770      	bx	lr

1a0046c6 <memcpy>:
1a0046c6:	440a      	add	r2, r1
1a0046c8:	4291      	cmp	r1, r2
1a0046ca:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a0046ce:	d100      	bne.n	1a0046d2 <memcpy+0xc>
1a0046d0:	4770      	bx	lr
1a0046d2:	b510      	push	{r4, lr}
1a0046d4:	f811 4b01 	ldrb.w	r4, [r1], #1
1a0046d8:	f803 4f01 	strb.w	r4, [r3, #1]!
1a0046dc:	4291      	cmp	r1, r2
1a0046de:	d1f9      	bne.n	1a0046d4 <memcpy+0xe>
1a0046e0:	bd10      	pop	{r4, pc}

1a0046e2 <memset>:
1a0046e2:	4402      	add	r2, r0
1a0046e4:	4603      	mov	r3, r0
1a0046e6:	4293      	cmp	r3, r2
1a0046e8:	d100      	bne.n	1a0046ec <memset+0xa>
1a0046ea:	4770      	bx	lr
1a0046ec:	f803 1b01 	strb.w	r1, [r3], #1
1a0046f0:	e7f9      	b.n	1a0046e6 <memset+0x4>
1a0046f2:	Address 0x000000001a0046f2 is out of bounds.


1a0046f4 <_free_r>:
1a0046f4:	b538      	push	{r3, r4, r5, lr}
1a0046f6:	4605      	mov	r5, r0
1a0046f8:	2900      	cmp	r1, #0
1a0046fa:	d045      	beq.n	1a004788 <_free_r+0x94>
1a0046fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
1a004700:	1f0c      	subs	r4, r1, #4
1a004702:	2b00      	cmp	r3, #0
1a004704:	bfb8      	it	lt
1a004706:	18e4      	addlt	r4, r4, r3
1a004708:	f000 fad2 	bl	1a004cb0 <__malloc_lock>
1a00470c:	4a1f      	ldr	r2, [pc, #124]	; (1a00478c <_free_r+0x98>)
1a00470e:	6813      	ldr	r3, [r2, #0]
1a004710:	4610      	mov	r0, r2
1a004712:	b933      	cbnz	r3, 1a004722 <_free_r+0x2e>
1a004714:	6063      	str	r3, [r4, #4]
1a004716:	6014      	str	r4, [r2, #0]
1a004718:	4628      	mov	r0, r5
1a00471a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1a00471e:	f000 bacd 	b.w	1a004cbc <__malloc_unlock>
1a004722:	42a3      	cmp	r3, r4
1a004724:	d90c      	bls.n	1a004740 <_free_r+0x4c>
1a004726:	6821      	ldr	r1, [r4, #0]
1a004728:	1862      	adds	r2, r4, r1
1a00472a:	4293      	cmp	r3, r2
1a00472c:	bf04      	itt	eq
1a00472e:	681a      	ldreq	r2, [r3, #0]
1a004730:	685b      	ldreq	r3, [r3, #4]
1a004732:	6063      	str	r3, [r4, #4]
1a004734:	bf04      	itt	eq
1a004736:	1852      	addeq	r2, r2, r1
1a004738:	6022      	streq	r2, [r4, #0]
1a00473a:	6004      	str	r4, [r0, #0]
1a00473c:	e7ec      	b.n	1a004718 <_free_r+0x24>
1a00473e:	4613      	mov	r3, r2
1a004740:	685a      	ldr	r2, [r3, #4]
1a004742:	b10a      	cbz	r2, 1a004748 <_free_r+0x54>
1a004744:	42a2      	cmp	r2, r4
1a004746:	d9fa      	bls.n	1a00473e <_free_r+0x4a>
1a004748:	6819      	ldr	r1, [r3, #0]
1a00474a:	1858      	adds	r0, r3, r1
1a00474c:	42a0      	cmp	r0, r4
1a00474e:	d10b      	bne.n	1a004768 <_free_r+0x74>
1a004750:	6820      	ldr	r0, [r4, #0]
1a004752:	4401      	add	r1, r0
1a004754:	1858      	adds	r0, r3, r1
1a004756:	4282      	cmp	r2, r0
1a004758:	6019      	str	r1, [r3, #0]
1a00475a:	d1dd      	bne.n	1a004718 <_free_r+0x24>
1a00475c:	6810      	ldr	r0, [r2, #0]
1a00475e:	6852      	ldr	r2, [r2, #4]
1a004760:	605a      	str	r2, [r3, #4]
1a004762:	4401      	add	r1, r0
1a004764:	6019      	str	r1, [r3, #0]
1a004766:	e7d7      	b.n	1a004718 <_free_r+0x24>
1a004768:	d902      	bls.n	1a004770 <_free_r+0x7c>
1a00476a:	230c      	movs	r3, #12
1a00476c:	602b      	str	r3, [r5, #0]
1a00476e:	e7d3      	b.n	1a004718 <_free_r+0x24>
1a004770:	6820      	ldr	r0, [r4, #0]
1a004772:	1821      	adds	r1, r4, r0
1a004774:	428a      	cmp	r2, r1
1a004776:	bf04      	itt	eq
1a004778:	6811      	ldreq	r1, [r2, #0]
1a00477a:	6852      	ldreq	r2, [r2, #4]
1a00477c:	6062      	str	r2, [r4, #4]
1a00477e:	bf04      	itt	eq
1a004780:	1809      	addeq	r1, r1, r0
1a004782:	6021      	streq	r1, [r4, #0]
1a004784:	605c      	str	r4, [r3, #4]
1a004786:	e7c7      	b.n	1a004718 <_free_r+0x24>
1a004788:	bd38      	pop	{r3, r4, r5, pc}
1a00478a:	bf00      	nop
1a00478c:	10002b24 	.word	0x10002b24

1a004790 <_malloc_r>:
1a004790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a004792:	1ccd      	adds	r5, r1, #3
1a004794:	f025 0503 	bic.w	r5, r5, #3
1a004798:	3508      	adds	r5, #8
1a00479a:	2d0c      	cmp	r5, #12
1a00479c:	bf38      	it	cc
1a00479e:	250c      	movcc	r5, #12
1a0047a0:	2d00      	cmp	r5, #0
1a0047a2:	4606      	mov	r6, r0
1a0047a4:	db01      	blt.n	1a0047aa <_malloc_r+0x1a>
1a0047a6:	42a9      	cmp	r1, r5
1a0047a8:	d903      	bls.n	1a0047b2 <_malloc_r+0x22>
1a0047aa:	230c      	movs	r3, #12
1a0047ac:	6033      	str	r3, [r6, #0]
1a0047ae:	2000      	movs	r0, #0
1a0047b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0047b2:	f000 fa7d 	bl	1a004cb0 <__malloc_lock>
1a0047b6:	4921      	ldr	r1, [pc, #132]	; (1a00483c <_malloc_r+0xac>)
1a0047b8:	680a      	ldr	r2, [r1, #0]
1a0047ba:	4614      	mov	r4, r2
1a0047bc:	b99c      	cbnz	r4, 1a0047e6 <_malloc_r+0x56>
1a0047be:	4f20      	ldr	r7, [pc, #128]	; (1a004840 <_malloc_r+0xb0>)
1a0047c0:	683b      	ldr	r3, [r7, #0]
1a0047c2:	b923      	cbnz	r3, 1a0047ce <_malloc_r+0x3e>
1a0047c4:	4621      	mov	r1, r4
1a0047c6:	4630      	mov	r0, r6
1a0047c8:	f7fc f85a 	bl	1a000880 <_sbrk_r>
1a0047cc:	6038      	str	r0, [r7, #0]
1a0047ce:	4629      	mov	r1, r5
1a0047d0:	4630      	mov	r0, r6
1a0047d2:	f7fc f855 	bl	1a000880 <_sbrk_r>
1a0047d6:	1c43      	adds	r3, r0, #1
1a0047d8:	d123      	bne.n	1a004822 <_malloc_r+0x92>
1a0047da:	230c      	movs	r3, #12
1a0047dc:	6033      	str	r3, [r6, #0]
1a0047de:	4630      	mov	r0, r6
1a0047e0:	f000 fa6c 	bl	1a004cbc <__malloc_unlock>
1a0047e4:	e7e3      	b.n	1a0047ae <_malloc_r+0x1e>
1a0047e6:	6823      	ldr	r3, [r4, #0]
1a0047e8:	1b5b      	subs	r3, r3, r5
1a0047ea:	d417      	bmi.n	1a00481c <_malloc_r+0x8c>
1a0047ec:	2b0b      	cmp	r3, #11
1a0047ee:	d903      	bls.n	1a0047f8 <_malloc_r+0x68>
1a0047f0:	6023      	str	r3, [r4, #0]
1a0047f2:	441c      	add	r4, r3
1a0047f4:	6025      	str	r5, [r4, #0]
1a0047f6:	e004      	b.n	1a004802 <_malloc_r+0x72>
1a0047f8:	6863      	ldr	r3, [r4, #4]
1a0047fa:	42a2      	cmp	r2, r4
1a0047fc:	bf0c      	ite	eq
1a0047fe:	600b      	streq	r3, [r1, #0]
1a004800:	6053      	strne	r3, [r2, #4]
1a004802:	4630      	mov	r0, r6
1a004804:	f000 fa5a 	bl	1a004cbc <__malloc_unlock>
1a004808:	f104 000b 	add.w	r0, r4, #11
1a00480c:	1d23      	adds	r3, r4, #4
1a00480e:	f020 0007 	bic.w	r0, r0, #7
1a004812:	1ac2      	subs	r2, r0, r3
1a004814:	d0cc      	beq.n	1a0047b0 <_malloc_r+0x20>
1a004816:	1a1b      	subs	r3, r3, r0
1a004818:	50a3      	str	r3, [r4, r2]
1a00481a:	e7c9      	b.n	1a0047b0 <_malloc_r+0x20>
1a00481c:	4622      	mov	r2, r4
1a00481e:	6864      	ldr	r4, [r4, #4]
1a004820:	e7cc      	b.n	1a0047bc <_malloc_r+0x2c>
1a004822:	1cc4      	adds	r4, r0, #3
1a004824:	f024 0403 	bic.w	r4, r4, #3
1a004828:	42a0      	cmp	r0, r4
1a00482a:	d0e3      	beq.n	1a0047f4 <_malloc_r+0x64>
1a00482c:	1a21      	subs	r1, r4, r0
1a00482e:	4630      	mov	r0, r6
1a004830:	f7fc f826 	bl	1a000880 <_sbrk_r>
1a004834:	3001      	adds	r0, #1
1a004836:	d1dd      	bne.n	1a0047f4 <_malloc_r+0x64>
1a004838:	e7cf      	b.n	1a0047da <_malloc_r+0x4a>
1a00483a:	bf00      	nop
1a00483c:	10002b24 	.word	0x10002b24
1a004840:	10002b28 	.word	0x10002b28

1a004844 <iprintf>:
1a004844:	b40f      	push	{r0, r1, r2, r3}
1a004846:	4b0a      	ldr	r3, [pc, #40]	; (1a004870 <iprintf+0x2c>)
1a004848:	b513      	push	{r0, r1, r4, lr}
1a00484a:	681c      	ldr	r4, [r3, #0]
1a00484c:	b124      	cbz	r4, 1a004858 <iprintf+0x14>
1a00484e:	69a3      	ldr	r3, [r4, #24]
1a004850:	b913      	cbnz	r3, 1a004858 <iprintf+0x14>
1a004852:	4620      	mov	r0, r4
1a004854:	f7ff fe5a 	bl	1a00450c <__sinit>
1a004858:	ab05      	add	r3, sp, #20
1a00485a:	9a04      	ldr	r2, [sp, #16]
1a00485c:	68a1      	ldr	r1, [r4, #8]
1a00485e:	9301      	str	r3, [sp, #4]
1a004860:	4620      	mov	r0, r4
1a004862:	f000 fa5b 	bl	1a004d1c <_vfiprintf_r>
1a004866:	b002      	add	sp, #8
1a004868:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a00486c:	b004      	add	sp, #16
1a00486e:	4770      	bx	lr
1a004870:	10000054 	.word	0x10000054

1a004874 <_puts_r>:
1a004874:	b570      	push	{r4, r5, r6, lr}
1a004876:	460e      	mov	r6, r1
1a004878:	4605      	mov	r5, r0
1a00487a:	b118      	cbz	r0, 1a004884 <_puts_r+0x10>
1a00487c:	6983      	ldr	r3, [r0, #24]
1a00487e:	b90b      	cbnz	r3, 1a004884 <_puts_r+0x10>
1a004880:	f7ff fe44 	bl	1a00450c <__sinit>
1a004884:	69ab      	ldr	r3, [r5, #24]
1a004886:	68ac      	ldr	r4, [r5, #8]
1a004888:	b913      	cbnz	r3, 1a004890 <_puts_r+0x1c>
1a00488a:	4628      	mov	r0, r5
1a00488c:	f7ff fe3e 	bl	1a00450c <__sinit>
1a004890:	4b2c      	ldr	r3, [pc, #176]	; (1a004944 <_puts_r+0xd0>)
1a004892:	429c      	cmp	r4, r3
1a004894:	d120      	bne.n	1a0048d8 <_puts_r+0x64>
1a004896:	686c      	ldr	r4, [r5, #4]
1a004898:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a00489a:	07db      	lsls	r3, r3, #31
1a00489c:	d405      	bmi.n	1a0048aa <_puts_r+0x36>
1a00489e:	89a3      	ldrh	r3, [r4, #12]
1a0048a0:	0598      	lsls	r0, r3, #22
1a0048a2:	d402      	bmi.n	1a0048aa <_puts_r+0x36>
1a0048a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a0048a6:	f7ff ff0c 	bl	1a0046c2 <__retarget_lock_acquire_recursive>
1a0048aa:	89a3      	ldrh	r3, [r4, #12]
1a0048ac:	0719      	lsls	r1, r3, #28
1a0048ae:	d51d      	bpl.n	1a0048ec <_puts_r+0x78>
1a0048b0:	6923      	ldr	r3, [r4, #16]
1a0048b2:	b1db      	cbz	r3, 1a0048ec <_puts_r+0x78>
1a0048b4:	3e01      	subs	r6, #1
1a0048b6:	68a3      	ldr	r3, [r4, #8]
1a0048b8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
1a0048bc:	3b01      	subs	r3, #1
1a0048be:	60a3      	str	r3, [r4, #8]
1a0048c0:	bb39      	cbnz	r1, 1a004912 <_puts_r+0x9e>
1a0048c2:	2b00      	cmp	r3, #0
1a0048c4:	da38      	bge.n	1a004938 <_puts_r+0xc4>
1a0048c6:	4622      	mov	r2, r4
1a0048c8:	210a      	movs	r1, #10
1a0048ca:	4628      	mov	r0, r5
1a0048cc:	f000 f8cc 	bl	1a004a68 <__swbuf_r>
1a0048d0:	3001      	adds	r0, #1
1a0048d2:	d011      	beq.n	1a0048f8 <_puts_r+0x84>
1a0048d4:	250a      	movs	r5, #10
1a0048d6:	e011      	b.n	1a0048fc <_puts_r+0x88>
1a0048d8:	4b1b      	ldr	r3, [pc, #108]	; (1a004948 <_puts_r+0xd4>)
1a0048da:	429c      	cmp	r4, r3
1a0048dc:	d101      	bne.n	1a0048e2 <_puts_r+0x6e>
1a0048de:	68ac      	ldr	r4, [r5, #8]
1a0048e0:	e7da      	b.n	1a004898 <_puts_r+0x24>
1a0048e2:	4b1a      	ldr	r3, [pc, #104]	; (1a00494c <_puts_r+0xd8>)
1a0048e4:	429c      	cmp	r4, r3
1a0048e6:	bf08      	it	eq
1a0048e8:	68ec      	ldreq	r4, [r5, #12]
1a0048ea:	e7d5      	b.n	1a004898 <_puts_r+0x24>
1a0048ec:	4621      	mov	r1, r4
1a0048ee:	4628      	mov	r0, r5
1a0048f0:	f000 f90c 	bl	1a004b0c <__swsetup_r>
1a0048f4:	2800      	cmp	r0, #0
1a0048f6:	d0dd      	beq.n	1a0048b4 <_puts_r+0x40>
1a0048f8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
1a0048fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a0048fe:	07da      	lsls	r2, r3, #31
1a004900:	d405      	bmi.n	1a00490e <_puts_r+0x9a>
1a004902:	89a3      	ldrh	r3, [r4, #12]
1a004904:	059b      	lsls	r3, r3, #22
1a004906:	d402      	bmi.n	1a00490e <_puts_r+0x9a>
1a004908:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a00490a:	f7ff fedb 	bl	1a0046c4 <__retarget_lock_release_recursive>
1a00490e:	4628      	mov	r0, r5
1a004910:	bd70      	pop	{r4, r5, r6, pc}
1a004912:	2b00      	cmp	r3, #0
1a004914:	da04      	bge.n	1a004920 <_puts_r+0xac>
1a004916:	69a2      	ldr	r2, [r4, #24]
1a004918:	429a      	cmp	r2, r3
1a00491a:	dc06      	bgt.n	1a00492a <_puts_r+0xb6>
1a00491c:	290a      	cmp	r1, #10
1a00491e:	d004      	beq.n	1a00492a <_puts_r+0xb6>
1a004920:	6823      	ldr	r3, [r4, #0]
1a004922:	1c5a      	adds	r2, r3, #1
1a004924:	6022      	str	r2, [r4, #0]
1a004926:	7019      	strb	r1, [r3, #0]
1a004928:	e7c5      	b.n	1a0048b6 <_puts_r+0x42>
1a00492a:	4622      	mov	r2, r4
1a00492c:	4628      	mov	r0, r5
1a00492e:	f000 f89b 	bl	1a004a68 <__swbuf_r>
1a004932:	3001      	adds	r0, #1
1a004934:	d1bf      	bne.n	1a0048b6 <_puts_r+0x42>
1a004936:	e7df      	b.n	1a0048f8 <_puts_r+0x84>
1a004938:	6823      	ldr	r3, [r4, #0]
1a00493a:	250a      	movs	r5, #10
1a00493c:	1c5a      	adds	r2, r3, #1
1a00493e:	6022      	str	r2, [r4, #0]
1a004940:	701d      	strb	r5, [r3, #0]
1a004942:	e7db      	b.n	1a0048fc <_puts_r+0x88>
1a004944:	1a005830 	.word	0x1a005830
1a004948:	1a005850 	.word	0x1a005850
1a00494c:	1a005810 	.word	0x1a005810

1a004950 <puts>:
1a004950:	4b02      	ldr	r3, [pc, #8]	; (1a00495c <puts+0xc>)
1a004952:	4601      	mov	r1, r0
1a004954:	6818      	ldr	r0, [r3, #0]
1a004956:	f7ff bf8d 	b.w	1a004874 <_puts_r>
1a00495a:	bf00      	nop
1a00495c:	10000054 	.word	0x10000054

1a004960 <__sread>:
1a004960:	b510      	push	{r4, lr}
1a004962:	460c      	mov	r4, r1
1a004964:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a004968:	f7fb ff4e 	bl	1a000808 <_read_r>
1a00496c:	2800      	cmp	r0, #0
1a00496e:	bfab      	itete	ge
1a004970:	6d63      	ldrge	r3, [r4, #84]	; 0x54
1a004972:	89a3      	ldrhlt	r3, [r4, #12]
1a004974:	181b      	addge	r3, r3, r0
1a004976:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
1a00497a:	bfac      	ite	ge
1a00497c:	6563      	strge	r3, [r4, #84]	; 0x54
1a00497e:	81a3      	strhlt	r3, [r4, #12]
1a004980:	bd10      	pop	{r4, pc}

1a004982 <__swrite>:
1a004982:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a004986:	461f      	mov	r7, r3
1a004988:	898b      	ldrh	r3, [r1, #12]
1a00498a:	05db      	lsls	r3, r3, #23
1a00498c:	4605      	mov	r5, r0
1a00498e:	460c      	mov	r4, r1
1a004990:	4616      	mov	r6, r2
1a004992:	d505      	bpl.n	1a0049a0 <__swrite+0x1e>
1a004994:	2302      	movs	r3, #2
1a004996:	2200      	movs	r2, #0
1a004998:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a00499c:	f7fb ff2f 	bl	1a0007fe <_lseek_r>
1a0049a0:	89a3      	ldrh	r3, [r4, #12]
1a0049a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a0049a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
1a0049aa:	81a3      	strh	r3, [r4, #12]
1a0049ac:	4632      	mov	r2, r6
1a0049ae:	463b      	mov	r3, r7
1a0049b0:	4628      	mov	r0, r5
1a0049b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1a0049b6:	f7fb bf4e 	b.w	1a000856 <_write_r>

1a0049ba <__sseek>:
1a0049ba:	b510      	push	{r4, lr}
1a0049bc:	460c      	mov	r4, r1
1a0049be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a0049c2:	f7fb ff1c 	bl	1a0007fe <_lseek_r>
1a0049c6:	1c43      	adds	r3, r0, #1
1a0049c8:	89a3      	ldrh	r3, [r4, #12]
1a0049ca:	bf15      	itete	ne
1a0049cc:	6560      	strne	r0, [r4, #84]	; 0x54
1a0049ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
1a0049d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
1a0049d6:	81a3      	strheq	r3, [r4, #12]
1a0049d8:	bf18      	it	ne
1a0049da:	81a3      	strhne	r3, [r4, #12]
1a0049dc:	bd10      	pop	{r4, pc}

1a0049de <__sclose>:
1a0049de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a0049e2:	f7fb bef9 	b.w	1a0007d8 <_close_r>
1a0049e6:	Address 0x000000001a0049e6 is out of bounds.


1a0049e8 <__utoa>:
1a0049e8:	b5f0      	push	{r4, r5, r6, r7, lr}
1a0049ea:	4b1e      	ldr	r3, [pc, #120]	; (1a004a64 <__utoa+0x7c>)
1a0049ec:	b08b      	sub	sp, #44	; 0x2c
1a0049ee:	4607      	mov	r7, r0
1a0049f0:	460c      	mov	r4, r1
1a0049f2:	466d      	mov	r5, sp
1a0049f4:	f103 0c20 	add.w	ip, r3, #32
1a0049f8:	6818      	ldr	r0, [r3, #0]
1a0049fa:	6859      	ldr	r1, [r3, #4]
1a0049fc:	462e      	mov	r6, r5
1a0049fe:	c603      	stmia	r6!, {r0, r1}
1a004a00:	3308      	adds	r3, #8
1a004a02:	4563      	cmp	r3, ip
1a004a04:	4635      	mov	r5, r6
1a004a06:	d1f7      	bne.n	1a0049f8 <__utoa+0x10>
1a004a08:	6818      	ldr	r0, [r3, #0]
1a004a0a:	791b      	ldrb	r3, [r3, #4]
1a004a0c:	7133      	strb	r3, [r6, #4]
1a004a0e:	1e93      	subs	r3, r2, #2
1a004a10:	2b22      	cmp	r3, #34	; 0x22
1a004a12:	6030      	str	r0, [r6, #0]
1a004a14:	f04f 0100 	mov.w	r1, #0
1a004a18:	d904      	bls.n	1a004a24 <__utoa+0x3c>
1a004a1a:	7021      	strb	r1, [r4, #0]
1a004a1c:	460c      	mov	r4, r1
1a004a1e:	4620      	mov	r0, r4
1a004a20:	b00b      	add	sp, #44	; 0x2c
1a004a22:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a004a24:	1e65      	subs	r5, r4, #1
1a004a26:	fbb7 f6f2 	udiv	r6, r7, r2
1a004a2a:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
1a004a2e:	fb02 7316 	mls	r3, r2, r6, r7
1a004a32:	4463      	add	r3, ip
1a004a34:	42ba      	cmp	r2, r7
1a004a36:	f813 3c28 	ldrb.w	r3, [r3, #-40]
1a004a3a:	f805 3f01 	strb.w	r3, [r5, #1]!
1a004a3e:	f101 0001 	add.w	r0, r1, #1
1a004a42:	d90c      	bls.n	1a004a5e <__utoa+0x76>
1a004a44:	2300      	movs	r3, #0
1a004a46:	5423      	strb	r3, [r4, r0]
1a004a48:	1862      	adds	r2, r4, r1
1a004a4a:	1ac8      	subs	r0, r1, r3
1a004a4c:	4283      	cmp	r3, r0
1a004a4e:	dae6      	bge.n	1a004a1e <__utoa+0x36>
1a004a50:	5ce0      	ldrb	r0, [r4, r3]
1a004a52:	7815      	ldrb	r5, [r2, #0]
1a004a54:	54e5      	strb	r5, [r4, r3]
1a004a56:	f802 0901 	strb.w	r0, [r2], #-1
1a004a5a:	3301      	adds	r3, #1
1a004a5c:	e7f5      	b.n	1a004a4a <__utoa+0x62>
1a004a5e:	4601      	mov	r1, r0
1a004a60:	4637      	mov	r7, r6
1a004a62:	e7e0      	b.n	1a004a26 <__utoa+0x3e>
1a004a64:	1a005874 	.word	0x1a005874

1a004a68 <__swbuf_r>:
1a004a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a004a6a:	460e      	mov	r6, r1
1a004a6c:	4614      	mov	r4, r2
1a004a6e:	4605      	mov	r5, r0
1a004a70:	b118      	cbz	r0, 1a004a7a <__swbuf_r+0x12>
1a004a72:	6983      	ldr	r3, [r0, #24]
1a004a74:	b90b      	cbnz	r3, 1a004a7a <__swbuf_r+0x12>
1a004a76:	f7ff fd49 	bl	1a00450c <__sinit>
1a004a7a:	4b21      	ldr	r3, [pc, #132]	; (1a004b00 <__swbuf_r+0x98>)
1a004a7c:	429c      	cmp	r4, r3
1a004a7e:	d12b      	bne.n	1a004ad8 <__swbuf_r+0x70>
1a004a80:	686c      	ldr	r4, [r5, #4]
1a004a82:	69a3      	ldr	r3, [r4, #24]
1a004a84:	60a3      	str	r3, [r4, #8]
1a004a86:	89a3      	ldrh	r3, [r4, #12]
1a004a88:	071a      	lsls	r2, r3, #28
1a004a8a:	d52f      	bpl.n	1a004aec <__swbuf_r+0x84>
1a004a8c:	6923      	ldr	r3, [r4, #16]
1a004a8e:	b36b      	cbz	r3, 1a004aec <__swbuf_r+0x84>
1a004a90:	6923      	ldr	r3, [r4, #16]
1a004a92:	6820      	ldr	r0, [r4, #0]
1a004a94:	1ac0      	subs	r0, r0, r3
1a004a96:	6963      	ldr	r3, [r4, #20]
1a004a98:	b2f6      	uxtb	r6, r6
1a004a9a:	4283      	cmp	r3, r0
1a004a9c:	4637      	mov	r7, r6
1a004a9e:	dc04      	bgt.n	1a004aaa <__swbuf_r+0x42>
1a004aa0:	4621      	mov	r1, r4
1a004aa2:	4628      	mov	r0, r5
1a004aa4:	f7ff fc9e 	bl	1a0043e4 <_fflush_r>
1a004aa8:	bb30      	cbnz	r0, 1a004af8 <__swbuf_r+0x90>
1a004aaa:	68a3      	ldr	r3, [r4, #8]
1a004aac:	3b01      	subs	r3, #1
1a004aae:	60a3      	str	r3, [r4, #8]
1a004ab0:	6823      	ldr	r3, [r4, #0]
1a004ab2:	1c5a      	adds	r2, r3, #1
1a004ab4:	6022      	str	r2, [r4, #0]
1a004ab6:	701e      	strb	r6, [r3, #0]
1a004ab8:	6963      	ldr	r3, [r4, #20]
1a004aba:	3001      	adds	r0, #1
1a004abc:	4283      	cmp	r3, r0
1a004abe:	d004      	beq.n	1a004aca <__swbuf_r+0x62>
1a004ac0:	89a3      	ldrh	r3, [r4, #12]
1a004ac2:	07db      	lsls	r3, r3, #31
1a004ac4:	d506      	bpl.n	1a004ad4 <__swbuf_r+0x6c>
1a004ac6:	2e0a      	cmp	r6, #10
1a004ac8:	d104      	bne.n	1a004ad4 <__swbuf_r+0x6c>
1a004aca:	4621      	mov	r1, r4
1a004acc:	4628      	mov	r0, r5
1a004ace:	f7ff fc89 	bl	1a0043e4 <_fflush_r>
1a004ad2:	b988      	cbnz	r0, 1a004af8 <__swbuf_r+0x90>
1a004ad4:	4638      	mov	r0, r7
1a004ad6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a004ad8:	4b0a      	ldr	r3, [pc, #40]	; (1a004b04 <__swbuf_r+0x9c>)
1a004ada:	429c      	cmp	r4, r3
1a004adc:	d101      	bne.n	1a004ae2 <__swbuf_r+0x7a>
1a004ade:	68ac      	ldr	r4, [r5, #8]
1a004ae0:	e7cf      	b.n	1a004a82 <__swbuf_r+0x1a>
1a004ae2:	4b09      	ldr	r3, [pc, #36]	; (1a004b08 <__swbuf_r+0xa0>)
1a004ae4:	429c      	cmp	r4, r3
1a004ae6:	bf08      	it	eq
1a004ae8:	68ec      	ldreq	r4, [r5, #12]
1a004aea:	e7ca      	b.n	1a004a82 <__swbuf_r+0x1a>
1a004aec:	4621      	mov	r1, r4
1a004aee:	4628      	mov	r0, r5
1a004af0:	f000 f80c 	bl	1a004b0c <__swsetup_r>
1a004af4:	2800      	cmp	r0, #0
1a004af6:	d0cb      	beq.n	1a004a90 <__swbuf_r+0x28>
1a004af8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
1a004afc:	e7ea      	b.n	1a004ad4 <__swbuf_r+0x6c>
1a004afe:	bf00      	nop
1a004b00:	1a005830 	.word	0x1a005830
1a004b04:	1a005850 	.word	0x1a005850
1a004b08:	1a005810 	.word	0x1a005810

1a004b0c <__swsetup_r>:
1a004b0c:	4b32      	ldr	r3, [pc, #200]	; (1a004bd8 <__swsetup_r+0xcc>)
1a004b0e:	b570      	push	{r4, r5, r6, lr}
1a004b10:	681d      	ldr	r5, [r3, #0]
1a004b12:	4606      	mov	r6, r0
1a004b14:	460c      	mov	r4, r1
1a004b16:	b125      	cbz	r5, 1a004b22 <__swsetup_r+0x16>
1a004b18:	69ab      	ldr	r3, [r5, #24]
1a004b1a:	b913      	cbnz	r3, 1a004b22 <__swsetup_r+0x16>
1a004b1c:	4628      	mov	r0, r5
1a004b1e:	f7ff fcf5 	bl	1a00450c <__sinit>
1a004b22:	4b2e      	ldr	r3, [pc, #184]	; (1a004bdc <__swsetup_r+0xd0>)
1a004b24:	429c      	cmp	r4, r3
1a004b26:	d10f      	bne.n	1a004b48 <__swsetup_r+0x3c>
1a004b28:	686c      	ldr	r4, [r5, #4]
1a004b2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a004b2e:	b29a      	uxth	r2, r3
1a004b30:	0715      	lsls	r5, r2, #28
1a004b32:	d42c      	bmi.n	1a004b8e <__swsetup_r+0x82>
1a004b34:	06d0      	lsls	r0, r2, #27
1a004b36:	d411      	bmi.n	1a004b5c <__swsetup_r+0x50>
1a004b38:	2209      	movs	r2, #9
1a004b3a:	6032      	str	r2, [r6, #0]
1a004b3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a004b40:	81a3      	strh	r3, [r4, #12]
1a004b42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a004b46:	e03e      	b.n	1a004bc6 <__swsetup_r+0xba>
1a004b48:	4b25      	ldr	r3, [pc, #148]	; (1a004be0 <__swsetup_r+0xd4>)
1a004b4a:	429c      	cmp	r4, r3
1a004b4c:	d101      	bne.n	1a004b52 <__swsetup_r+0x46>
1a004b4e:	68ac      	ldr	r4, [r5, #8]
1a004b50:	e7eb      	b.n	1a004b2a <__swsetup_r+0x1e>
1a004b52:	4b24      	ldr	r3, [pc, #144]	; (1a004be4 <__swsetup_r+0xd8>)
1a004b54:	429c      	cmp	r4, r3
1a004b56:	bf08      	it	eq
1a004b58:	68ec      	ldreq	r4, [r5, #12]
1a004b5a:	e7e6      	b.n	1a004b2a <__swsetup_r+0x1e>
1a004b5c:	0751      	lsls	r1, r2, #29
1a004b5e:	d512      	bpl.n	1a004b86 <__swsetup_r+0x7a>
1a004b60:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a004b62:	b141      	cbz	r1, 1a004b76 <__swsetup_r+0x6a>
1a004b64:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a004b68:	4299      	cmp	r1, r3
1a004b6a:	d002      	beq.n	1a004b72 <__swsetup_r+0x66>
1a004b6c:	4630      	mov	r0, r6
1a004b6e:	f7ff fdc1 	bl	1a0046f4 <_free_r>
1a004b72:	2300      	movs	r3, #0
1a004b74:	6363      	str	r3, [r4, #52]	; 0x34
1a004b76:	89a3      	ldrh	r3, [r4, #12]
1a004b78:	f023 0324 	bic.w	r3, r3, #36	; 0x24
1a004b7c:	81a3      	strh	r3, [r4, #12]
1a004b7e:	2300      	movs	r3, #0
1a004b80:	6063      	str	r3, [r4, #4]
1a004b82:	6923      	ldr	r3, [r4, #16]
1a004b84:	6023      	str	r3, [r4, #0]
1a004b86:	89a3      	ldrh	r3, [r4, #12]
1a004b88:	f043 0308 	orr.w	r3, r3, #8
1a004b8c:	81a3      	strh	r3, [r4, #12]
1a004b8e:	6923      	ldr	r3, [r4, #16]
1a004b90:	b94b      	cbnz	r3, 1a004ba6 <__swsetup_r+0x9a>
1a004b92:	89a3      	ldrh	r3, [r4, #12]
1a004b94:	f403 7320 	and.w	r3, r3, #640	; 0x280
1a004b98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a004b9c:	d003      	beq.n	1a004ba6 <__swsetup_r+0x9a>
1a004b9e:	4621      	mov	r1, r4
1a004ba0:	4630      	mov	r0, r6
1a004ba2:	f000 f845 	bl	1a004c30 <__smakebuf_r>
1a004ba6:	89a2      	ldrh	r2, [r4, #12]
1a004ba8:	f012 0301 	ands.w	r3, r2, #1
1a004bac:	d00c      	beq.n	1a004bc8 <__swsetup_r+0xbc>
1a004bae:	2300      	movs	r3, #0
1a004bb0:	60a3      	str	r3, [r4, #8]
1a004bb2:	6963      	ldr	r3, [r4, #20]
1a004bb4:	425b      	negs	r3, r3
1a004bb6:	61a3      	str	r3, [r4, #24]
1a004bb8:	6923      	ldr	r3, [r4, #16]
1a004bba:	b953      	cbnz	r3, 1a004bd2 <__swsetup_r+0xc6>
1a004bbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a004bc0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
1a004bc4:	d1ba      	bne.n	1a004b3c <__swsetup_r+0x30>
1a004bc6:	bd70      	pop	{r4, r5, r6, pc}
1a004bc8:	0792      	lsls	r2, r2, #30
1a004bca:	bf58      	it	pl
1a004bcc:	6963      	ldrpl	r3, [r4, #20]
1a004bce:	60a3      	str	r3, [r4, #8]
1a004bd0:	e7f2      	b.n	1a004bb8 <__swsetup_r+0xac>
1a004bd2:	2000      	movs	r0, #0
1a004bd4:	e7f7      	b.n	1a004bc6 <__swsetup_r+0xba>
1a004bd6:	bf00      	nop
1a004bd8:	10000054 	.word	0x10000054
1a004bdc:	1a005830 	.word	0x1a005830
1a004be0:	1a005850 	.word	0x1a005850
1a004be4:	1a005810 	.word	0x1a005810

1a004be8 <__swhatbuf_r>:
1a004be8:	b570      	push	{r4, r5, r6, lr}
1a004bea:	460e      	mov	r6, r1
1a004bec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a004bf0:	2900      	cmp	r1, #0
1a004bf2:	b096      	sub	sp, #88	; 0x58
1a004bf4:	4614      	mov	r4, r2
1a004bf6:	461d      	mov	r5, r3
1a004bf8:	da07      	bge.n	1a004c0a <__swhatbuf_r+0x22>
1a004bfa:	2300      	movs	r3, #0
1a004bfc:	602b      	str	r3, [r5, #0]
1a004bfe:	89b3      	ldrh	r3, [r6, #12]
1a004c00:	061a      	lsls	r2, r3, #24
1a004c02:	d410      	bmi.n	1a004c26 <__swhatbuf_r+0x3e>
1a004c04:	f44f 6380 	mov.w	r3, #1024	; 0x400
1a004c08:	e00e      	b.n	1a004c28 <__swhatbuf_r+0x40>
1a004c0a:	466a      	mov	r2, sp
1a004c0c:	f7fb fde9 	bl	1a0007e2 <_fstat_r>
1a004c10:	2800      	cmp	r0, #0
1a004c12:	dbf2      	blt.n	1a004bfa <__swhatbuf_r+0x12>
1a004c14:	9a01      	ldr	r2, [sp, #4]
1a004c16:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
1a004c1a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
1a004c1e:	425a      	negs	r2, r3
1a004c20:	415a      	adcs	r2, r3
1a004c22:	602a      	str	r2, [r5, #0]
1a004c24:	e7ee      	b.n	1a004c04 <__swhatbuf_r+0x1c>
1a004c26:	2340      	movs	r3, #64	; 0x40
1a004c28:	2000      	movs	r0, #0
1a004c2a:	6023      	str	r3, [r4, #0]
1a004c2c:	b016      	add	sp, #88	; 0x58
1a004c2e:	bd70      	pop	{r4, r5, r6, pc}

1a004c30 <__smakebuf_r>:
1a004c30:	898b      	ldrh	r3, [r1, #12]
1a004c32:	b573      	push	{r0, r1, r4, r5, r6, lr}
1a004c34:	079d      	lsls	r5, r3, #30
1a004c36:	4606      	mov	r6, r0
1a004c38:	460c      	mov	r4, r1
1a004c3a:	d507      	bpl.n	1a004c4c <__smakebuf_r+0x1c>
1a004c3c:	f104 0347 	add.w	r3, r4, #71	; 0x47
1a004c40:	6023      	str	r3, [r4, #0]
1a004c42:	6123      	str	r3, [r4, #16]
1a004c44:	2301      	movs	r3, #1
1a004c46:	6163      	str	r3, [r4, #20]
1a004c48:	b002      	add	sp, #8
1a004c4a:	bd70      	pop	{r4, r5, r6, pc}
1a004c4c:	ab01      	add	r3, sp, #4
1a004c4e:	466a      	mov	r2, sp
1a004c50:	f7ff ffca 	bl	1a004be8 <__swhatbuf_r>
1a004c54:	9900      	ldr	r1, [sp, #0]
1a004c56:	4605      	mov	r5, r0
1a004c58:	4630      	mov	r0, r6
1a004c5a:	f7ff fd99 	bl	1a004790 <_malloc_r>
1a004c5e:	b948      	cbnz	r0, 1a004c74 <__smakebuf_r+0x44>
1a004c60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a004c64:	059a      	lsls	r2, r3, #22
1a004c66:	d4ef      	bmi.n	1a004c48 <__smakebuf_r+0x18>
1a004c68:	f023 0303 	bic.w	r3, r3, #3
1a004c6c:	f043 0302 	orr.w	r3, r3, #2
1a004c70:	81a3      	strh	r3, [r4, #12]
1a004c72:	e7e3      	b.n	1a004c3c <__smakebuf_r+0xc>
1a004c74:	4b0d      	ldr	r3, [pc, #52]	; (1a004cac <__smakebuf_r+0x7c>)
1a004c76:	62b3      	str	r3, [r6, #40]	; 0x28
1a004c78:	89a3      	ldrh	r3, [r4, #12]
1a004c7a:	6020      	str	r0, [r4, #0]
1a004c7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a004c80:	81a3      	strh	r3, [r4, #12]
1a004c82:	9b00      	ldr	r3, [sp, #0]
1a004c84:	6163      	str	r3, [r4, #20]
1a004c86:	9b01      	ldr	r3, [sp, #4]
1a004c88:	6120      	str	r0, [r4, #16]
1a004c8a:	b15b      	cbz	r3, 1a004ca4 <__smakebuf_r+0x74>
1a004c8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a004c90:	4630      	mov	r0, r6
1a004c92:	f7fb fdab 	bl	1a0007ec <_isatty_r>
1a004c96:	b128      	cbz	r0, 1a004ca4 <__smakebuf_r+0x74>
1a004c98:	89a3      	ldrh	r3, [r4, #12]
1a004c9a:	f023 0303 	bic.w	r3, r3, #3
1a004c9e:	f043 0301 	orr.w	r3, r3, #1
1a004ca2:	81a3      	strh	r3, [r4, #12]
1a004ca4:	89a3      	ldrh	r3, [r4, #12]
1a004ca6:	431d      	orrs	r5, r3
1a004ca8:	81a5      	strh	r5, [r4, #12]
1a004caa:	e7cd      	b.n	1a004c48 <__smakebuf_r+0x18>
1a004cac:	1a0044a5 	.word	0x1a0044a5

1a004cb0 <__malloc_lock>:
1a004cb0:	4801      	ldr	r0, [pc, #4]	; (1a004cb8 <__malloc_lock+0x8>)
1a004cb2:	f7ff bd06 	b.w	1a0046c2 <__retarget_lock_acquire_recursive>
1a004cb6:	bf00      	nop
1a004cb8:	10002bb0 	.word	0x10002bb0

1a004cbc <__malloc_unlock>:
1a004cbc:	4801      	ldr	r0, [pc, #4]	; (1a004cc4 <__malloc_unlock+0x8>)
1a004cbe:	f7ff bd01 	b.w	1a0046c4 <__retarget_lock_release_recursive>
1a004cc2:	bf00      	nop
1a004cc4:	10002bb0 	.word	0x10002bb0

1a004cc8 <__sfputc_r>:
1a004cc8:	6893      	ldr	r3, [r2, #8]
1a004cca:	3b01      	subs	r3, #1
1a004ccc:	2b00      	cmp	r3, #0
1a004cce:	b410      	push	{r4}
1a004cd0:	6093      	str	r3, [r2, #8]
1a004cd2:	da08      	bge.n	1a004ce6 <__sfputc_r+0x1e>
1a004cd4:	6994      	ldr	r4, [r2, #24]
1a004cd6:	42a3      	cmp	r3, r4
1a004cd8:	db01      	blt.n	1a004cde <__sfputc_r+0x16>
1a004cda:	290a      	cmp	r1, #10
1a004cdc:	d103      	bne.n	1a004ce6 <__sfputc_r+0x1e>
1a004cde:	f85d 4b04 	ldr.w	r4, [sp], #4
1a004ce2:	f7ff bec1 	b.w	1a004a68 <__swbuf_r>
1a004ce6:	6813      	ldr	r3, [r2, #0]
1a004ce8:	1c58      	adds	r0, r3, #1
1a004cea:	6010      	str	r0, [r2, #0]
1a004cec:	7019      	strb	r1, [r3, #0]
1a004cee:	4608      	mov	r0, r1
1a004cf0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a004cf4:	4770      	bx	lr

1a004cf6 <__sfputs_r>:
1a004cf6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a004cf8:	4606      	mov	r6, r0
1a004cfa:	460f      	mov	r7, r1
1a004cfc:	4614      	mov	r4, r2
1a004cfe:	18d5      	adds	r5, r2, r3
1a004d00:	42ac      	cmp	r4, r5
1a004d02:	d101      	bne.n	1a004d08 <__sfputs_r+0x12>
1a004d04:	2000      	movs	r0, #0
1a004d06:	e007      	b.n	1a004d18 <__sfputs_r+0x22>
1a004d08:	463a      	mov	r2, r7
1a004d0a:	f814 1b01 	ldrb.w	r1, [r4], #1
1a004d0e:	4630      	mov	r0, r6
1a004d10:	f7ff ffda 	bl	1a004cc8 <__sfputc_r>
1a004d14:	1c43      	adds	r3, r0, #1
1a004d16:	d1f3      	bne.n	1a004d00 <__sfputs_r+0xa>
1a004d18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a004d1a:	Address 0x000000001a004d1a is out of bounds.


1a004d1c <_vfiprintf_r>:
1a004d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a004d20:	460d      	mov	r5, r1
1a004d22:	b09d      	sub	sp, #116	; 0x74
1a004d24:	4614      	mov	r4, r2
1a004d26:	461e      	mov	r6, r3
1a004d28:	4607      	mov	r7, r0
1a004d2a:	b118      	cbz	r0, 1a004d34 <_vfiprintf_r+0x18>
1a004d2c:	6983      	ldr	r3, [r0, #24]
1a004d2e:	b90b      	cbnz	r3, 1a004d34 <_vfiprintf_r+0x18>
1a004d30:	f7ff fbec 	bl	1a00450c <__sinit>
1a004d34:	4b85      	ldr	r3, [pc, #532]	; (1a004f4c <_vfiprintf_r+0x230>)
1a004d36:	429d      	cmp	r5, r3
1a004d38:	d11b      	bne.n	1a004d72 <_vfiprintf_r+0x56>
1a004d3a:	687d      	ldr	r5, [r7, #4]
1a004d3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
1a004d3e:	07d9      	lsls	r1, r3, #31
1a004d40:	d405      	bmi.n	1a004d4e <_vfiprintf_r+0x32>
1a004d42:	89ab      	ldrh	r3, [r5, #12]
1a004d44:	059a      	lsls	r2, r3, #22
1a004d46:	d402      	bmi.n	1a004d4e <_vfiprintf_r+0x32>
1a004d48:	6da8      	ldr	r0, [r5, #88]	; 0x58
1a004d4a:	f7ff fcba 	bl	1a0046c2 <__retarget_lock_acquire_recursive>
1a004d4e:	89ab      	ldrh	r3, [r5, #12]
1a004d50:	071b      	lsls	r3, r3, #28
1a004d52:	d501      	bpl.n	1a004d58 <_vfiprintf_r+0x3c>
1a004d54:	692b      	ldr	r3, [r5, #16]
1a004d56:	b9eb      	cbnz	r3, 1a004d94 <_vfiprintf_r+0x78>
1a004d58:	4629      	mov	r1, r5
1a004d5a:	4638      	mov	r0, r7
1a004d5c:	f7ff fed6 	bl	1a004b0c <__swsetup_r>
1a004d60:	b1c0      	cbz	r0, 1a004d94 <_vfiprintf_r+0x78>
1a004d62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
1a004d64:	07d8      	lsls	r0, r3, #31
1a004d66:	d50e      	bpl.n	1a004d86 <_vfiprintf_r+0x6a>
1a004d68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a004d6c:	b01d      	add	sp, #116	; 0x74
1a004d6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a004d72:	4b77      	ldr	r3, [pc, #476]	; (1a004f50 <_vfiprintf_r+0x234>)
1a004d74:	429d      	cmp	r5, r3
1a004d76:	d101      	bne.n	1a004d7c <_vfiprintf_r+0x60>
1a004d78:	68bd      	ldr	r5, [r7, #8]
1a004d7a:	e7df      	b.n	1a004d3c <_vfiprintf_r+0x20>
1a004d7c:	4b75      	ldr	r3, [pc, #468]	; (1a004f54 <_vfiprintf_r+0x238>)
1a004d7e:	429d      	cmp	r5, r3
1a004d80:	bf08      	it	eq
1a004d82:	68fd      	ldreq	r5, [r7, #12]
1a004d84:	e7da      	b.n	1a004d3c <_vfiprintf_r+0x20>
1a004d86:	89ab      	ldrh	r3, [r5, #12]
1a004d88:	0599      	lsls	r1, r3, #22
1a004d8a:	d4ed      	bmi.n	1a004d68 <_vfiprintf_r+0x4c>
1a004d8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
1a004d8e:	f7ff fc99 	bl	1a0046c4 <__retarget_lock_release_recursive>
1a004d92:	e7e9      	b.n	1a004d68 <_vfiprintf_r+0x4c>
1a004d94:	2300      	movs	r3, #0
1a004d96:	9309      	str	r3, [sp, #36]	; 0x24
1a004d98:	2320      	movs	r3, #32
1a004d9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
1a004d9e:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 1a004f58 <_vfiprintf_r+0x23c>
1a004da2:	9603      	str	r6, [sp, #12]
1a004da4:	2330      	movs	r3, #48	; 0x30
1a004da6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
1a004daa:	f04f 0a01 	mov.w	sl, #1
1a004dae:	4623      	mov	r3, r4
1a004db0:	461e      	mov	r6, r3
1a004db2:	f813 2b01 	ldrb.w	r2, [r3], #1
1a004db6:	b10a      	cbz	r2, 1a004dbc <_vfiprintf_r+0xa0>
1a004db8:	2a25      	cmp	r2, #37	; 0x25
1a004dba:	d1f9      	bne.n	1a004db0 <_vfiprintf_r+0x94>
1a004dbc:	ebb6 0b04 	subs.w	fp, r6, r4
1a004dc0:	d00b      	beq.n	1a004dda <_vfiprintf_r+0xbe>
1a004dc2:	465b      	mov	r3, fp
1a004dc4:	4622      	mov	r2, r4
1a004dc6:	4629      	mov	r1, r5
1a004dc8:	4638      	mov	r0, r7
1a004dca:	f7ff ff94 	bl	1a004cf6 <__sfputs_r>
1a004dce:	3001      	adds	r0, #1
1a004dd0:	f000 80a3 	beq.w	1a004f1a <_vfiprintf_r+0x1fe>
1a004dd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a004dd6:	445b      	add	r3, fp
1a004dd8:	9309      	str	r3, [sp, #36]	; 0x24
1a004dda:	7833      	ldrb	r3, [r6, #0]
1a004ddc:	2b00      	cmp	r3, #0
1a004dde:	f000 809c 	beq.w	1a004f1a <_vfiprintf_r+0x1fe>
1a004de2:	2300      	movs	r3, #0
1a004de4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a004de8:	e9cd 2305 	strd	r2, r3, [sp, #20]
1a004dec:	3601      	adds	r6, #1
1a004dee:	9304      	str	r3, [sp, #16]
1a004df0:	9307      	str	r3, [sp, #28]
1a004df2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
1a004df6:	931a      	str	r3, [sp, #104]	; 0x68
1a004df8:	4634      	mov	r4, r6
1a004dfa:	2205      	movs	r2, #5
1a004dfc:	f814 1b01 	ldrb.w	r1, [r4], #1
1a004e00:	4855      	ldr	r0, [pc, #340]	; (1a004f58 <_vfiprintf_r+0x23c>)
1a004e02:	f000 fa3d 	bl	1a005280 <memchr>
1a004e06:	9b04      	ldr	r3, [sp, #16]
1a004e08:	b9c0      	cbnz	r0, 1a004e3c <_vfiprintf_r+0x120>
1a004e0a:	06da      	lsls	r2, r3, #27
1a004e0c:	bf44      	itt	mi
1a004e0e:	2220      	movmi	r2, #32
1a004e10:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a004e14:	0718      	lsls	r0, r3, #28
1a004e16:	bf44      	itt	mi
1a004e18:	222b      	movmi	r2, #43	; 0x2b
1a004e1a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a004e1e:	7832      	ldrb	r2, [r6, #0]
1a004e20:	2a2a      	cmp	r2, #42	; 0x2a
1a004e22:	d013      	beq.n	1a004e4c <_vfiprintf_r+0x130>
1a004e24:	9a07      	ldr	r2, [sp, #28]
1a004e26:	4634      	mov	r4, r6
1a004e28:	2000      	movs	r0, #0
1a004e2a:	260a      	movs	r6, #10
1a004e2c:	4621      	mov	r1, r4
1a004e2e:	f811 3b01 	ldrb.w	r3, [r1], #1
1a004e32:	3b30      	subs	r3, #48	; 0x30
1a004e34:	2b09      	cmp	r3, #9
1a004e36:	d94b      	bls.n	1a004ed0 <_vfiprintf_r+0x1b4>
1a004e38:	b970      	cbnz	r0, 1a004e58 <_vfiprintf_r+0x13c>
1a004e3a:	e014      	b.n	1a004e66 <_vfiprintf_r+0x14a>
1a004e3c:	eba0 0009 	sub.w	r0, r0, r9
1a004e40:	fa0a f000 	lsl.w	r0, sl, r0
1a004e44:	4318      	orrs	r0, r3
1a004e46:	9004      	str	r0, [sp, #16]
1a004e48:	4626      	mov	r6, r4
1a004e4a:	e7d5      	b.n	1a004df8 <_vfiprintf_r+0xdc>
1a004e4c:	9a03      	ldr	r2, [sp, #12]
1a004e4e:	1d11      	adds	r1, r2, #4
1a004e50:	6812      	ldr	r2, [r2, #0]
1a004e52:	9103      	str	r1, [sp, #12]
1a004e54:	2a00      	cmp	r2, #0
1a004e56:	db01      	blt.n	1a004e5c <_vfiprintf_r+0x140>
1a004e58:	9207      	str	r2, [sp, #28]
1a004e5a:	e004      	b.n	1a004e66 <_vfiprintf_r+0x14a>
1a004e5c:	4252      	negs	r2, r2
1a004e5e:	f043 0302 	orr.w	r3, r3, #2
1a004e62:	9207      	str	r2, [sp, #28]
1a004e64:	9304      	str	r3, [sp, #16]
1a004e66:	7823      	ldrb	r3, [r4, #0]
1a004e68:	2b2e      	cmp	r3, #46	; 0x2e
1a004e6a:	d10c      	bne.n	1a004e86 <_vfiprintf_r+0x16a>
1a004e6c:	7863      	ldrb	r3, [r4, #1]
1a004e6e:	2b2a      	cmp	r3, #42	; 0x2a
1a004e70:	d133      	bne.n	1a004eda <_vfiprintf_r+0x1be>
1a004e72:	9b03      	ldr	r3, [sp, #12]
1a004e74:	1d1a      	adds	r2, r3, #4
1a004e76:	681b      	ldr	r3, [r3, #0]
1a004e78:	9203      	str	r2, [sp, #12]
1a004e7a:	2b00      	cmp	r3, #0
1a004e7c:	bfb8      	it	lt
1a004e7e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
1a004e82:	3402      	adds	r4, #2
1a004e84:	9305      	str	r3, [sp, #20]
1a004e86:	4e35      	ldr	r6, [pc, #212]	; (1a004f5c <_vfiprintf_r+0x240>)
1a004e88:	7821      	ldrb	r1, [r4, #0]
1a004e8a:	2203      	movs	r2, #3
1a004e8c:	4630      	mov	r0, r6
1a004e8e:	f000 f9f7 	bl	1a005280 <memchr>
1a004e92:	b138      	cbz	r0, 1a004ea4 <_vfiprintf_r+0x188>
1a004e94:	2340      	movs	r3, #64	; 0x40
1a004e96:	1b80      	subs	r0, r0, r6
1a004e98:	fa03 f000 	lsl.w	r0, r3, r0
1a004e9c:	9b04      	ldr	r3, [sp, #16]
1a004e9e:	4303      	orrs	r3, r0
1a004ea0:	3401      	adds	r4, #1
1a004ea2:	9304      	str	r3, [sp, #16]
1a004ea4:	f814 1b01 	ldrb.w	r1, [r4], #1
1a004ea8:	482d      	ldr	r0, [pc, #180]	; (1a004f60 <_vfiprintf_r+0x244>)
1a004eaa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
1a004eae:	2206      	movs	r2, #6
1a004eb0:	f000 f9e6 	bl	1a005280 <memchr>
1a004eb4:	2800      	cmp	r0, #0
1a004eb6:	d03f      	beq.n	1a004f38 <_vfiprintf_r+0x21c>
1a004eb8:	4b2a      	ldr	r3, [pc, #168]	; (1a004f64 <_vfiprintf_r+0x248>)
1a004eba:	bb13      	cbnz	r3, 1a004f02 <_vfiprintf_r+0x1e6>
1a004ebc:	9b03      	ldr	r3, [sp, #12]
1a004ebe:	3307      	adds	r3, #7
1a004ec0:	f023 0307 	bic.w	r3, r3, #7
1a004ec4:	3308      	adds	r3, #8
1a004ec6:	9303      	str	r3, [sp, #12]
1a004ec8:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a004eca:	4443      	add	r3, r8
1a004ecc:	9309      	str	r3, [sp, #36]	; 0x24
1a004ece:	e76e      	b.n	1a004dae <_vfiprintf_r+0x92>
1a004ed0:	fb06 3202 	mla	r2, r6, r2, r3
1a004ed4:	2001      	movs	r0, #1
1a004ed6:	460c      	mov	r4, r1
1a004ed8:	e7a8      	b.n	1a004e2c <_vfiprintf_r+0x110>
1a004eda:	2300      	movs	r3, #0
1a004edc:	3401      	adds	r4, #1
1a004ede:	9305      	str	r3, [sp, #20]
1a004ee0:	4619      	mov	r1, r3
1a004ee2:	260a      	movs	r6, #10
1a004ee4:	4620      	mov	r0, r4
1a004ee6:	f810 2b01 	ldrb.w	r2, [r0], #1
1a004eea:	3a30      	subs	r2, #48	; 0x30
1a004eec:	2a09      	cmp	r2, #9
1a004eee:	d903      	bls.n	1a004ef8 <_vfiprintf_r+0x1dc>
1a004ef0:	2b00      	cmp	r3, #0
1a004ef2:	d0c8      	beq.n	1a004e86 <_vfiprintf_r+0x16a>
1a004ef4:	9105      	str	r1, [sp, #20]
1a004ef6:	e7c6      	b.n	1a004e86 <_vfiprintf_r+0x16a>
1a004ef8:	fb06 2101 	mla	r1, r6, r1, r2
1a004efc:	2301      	movs	r3, #1
1a004efe:	4604      	mov	r4, r0
1a004f00:	e7f0      	b.n	1a004ee4 <_vfiprintf_r+0x1c8>
1a004f02:	ab03      	add	r3, sp, #12
1a004f04:	9300      	str	r3, [sp, #0]
1a004f06:	462a      	mov	r2, r5
1a004f08:	4b17      	ldr	r3, [pc, #92]	; (1a004f68 <_vfiprintf_r+0x24c>)
1a004f0a:	a904      	add	r1, sp, #16
1a004f0c:	4638      	mov	r0, r7
1a004f0e:	f3af 8000 	nop.w
1a004f12:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a004f16:	4680      	mov	r8, r0
1a004f18:	d1d6      	bne.n	1a004ec8 <_vfiprintf_r+0x1ac>
1a004f1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
1a004f1c:	07d9      	lsls	r1, r3, #31
1a004f1e:	d405      	bmi.n	1a004f2c <_vfiprintf_r+0x210>
1a004f20:	89ab      	ldrh	r3, [r5, #12]
1a004f22:	059a      	lsls	r2, r3, #22
1a004f24:	d402      	bmi.n	1a004f2c <_vfiprintf_r+0x210>
1a004f26:	6da8      	ldr	r0, [r5, #88]	; 0x58
1a004f28:	f7ff fbcc 	bl	1a0046c4 <__retarget_lock_release_recursive>
1a004f2c:	89ab      	ldrh	r3, [r5, #12]
1a004f2e:	065b      	lsls	r3, r3, #25
1a004f30:	f53f af1a 	bmi.w	1a004d68 <_vfiprintf_r+0x4c>
1a004f34:	9809      	ldr	r0, [sp, #36]	; 0x24
1a004f36:	e719      	b.n	1a004d6c <_vfiprintf_r+0x50>
1a004f38:	ab03      	add	r3, sp, #12
1a004f3a:	9300      	str	r3, [sp, #0]
1a004f3c:	462a      	mov	r2, r5
1a004f3e:	4b0a      	ldr	r3, [pc, #40]	; (1a004f68 <_vfiprintf_r+0x24c>)
1a004f40:	a904      	add	r1, sp, #16
1a004f42:	4638      	mov	r0, r7
1a004f44:	f000 f888 	bl	1a005058 <_printf_i>
1a004f48:	e7e3      	b.n	1a004f12 <_vfiprintf_r+0x1f6>
1a004f4a:	bf00      	nop
1a004f4c:	1a005830 	.word	0x1a005830
1a004f50:	1a005850 	.word	0x1a005850
1a004f54:	1a005810 	.word	0x1a005810
1a004f58:	1a005899 	.word	0x1a005899
1a004f5c:	1a00589f 	.word	0x1a00589f
1a004f60:	1a0058a3 	.word	0x1a0058a3
1a004f64:	00000000 	.word	0x00000000
1a004f68:	1a004cf7 	.word	0x1a004cf7

1a004f6c <_printf_common>:
1a004f6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a004f70:	4691      	mov	r9, r2
1a004f72:	461f      	mov	r7, r3
1a004f74:	688a      	ldr	r2, [r1, #8]
1a004f76:	690b      	ldr	r3, [r1, #16]
1a004f78:	f8dd 8020 	ldr.w	r8, [sp, #32]
1a004f7c:	4293      	cmp	r3, r2
1a004f7e:	bfb8      	it	lt
1a004f80:	4613      	movlt	r3, r2
1a004f82:	f8c9 3000 	str.w	r3, [r9]
1a004f86:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
1a004f8a:	4606      	mov	r6, r0
1a004f8c:	460c      	mov	r4, r1
1a004f8e:	b112      	cbz	r2, 1a004f96 <_printf_common+0x2a>
1a004f90:	3301      	adds	r3, #1
1a004f92:	f8c9 3000 	str.w	r3, [r9]
1a004f96:	6823      	ldr	r3, [r4, #0]
1a004f98:	0699      	lsls	r1, r3, #26
1a004f9a:	bf42      	ittt	mi
1a004f9c:	f8d9 3000 	ldrmi.w	r3, [r9]
1a004fa0:	3302      	addmi	r3, #2
1a004fa2:	f8c9 3000 	strmi.w	r3, [r9]
1a004fa6:	6825      	ldr	r5, [r4, #0]
1a004fa8:	f015 0506 	ands.w	r5, r5, #6
1a004fac:	d107      	bne.n	1a004fbe <_printf_common+0x52>
1a004fae:	f104 0a19 	add.w	sl, r4, #25
1a004fb2:	68e3      	ldr	r3, [r4, #12]
1a004fb4:	f8d9 2000 	ldr.w	r2, [r9]
1a004fb8:	1a9b      	subs	r3, r3, r2
1a004fba:	42ab      	cmp	r3, r5
1a004fbc:	dc28      	bgt.n	1a005010 <_printf_common+0xa4>
1a004fbe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
1a004fc2:	6822      	ldr	r2, [r4, #0]
1a004fc4:	3300      	adds	r3, #0
1a004fc6:	bf18      	it	ne
1a004fc8:	2301      	movne	r3, #1
1a004fca:	0692      	lsls	r2, r2, #26
1a004fcc:	d42d      	bmi.n	1a00502a <_printf_common+0xbe>
1a004fce:	f104 0243 	add.w	r2, r4, #67	; 0x43
1a004fd2:	4639      	mov	r1, r7
1a004fd4:	4630      	mov	r0, r6
1a004fd6:	47c0      	blx	r8
1a004fd8:	3001      	adds	r0, #1
1a004fda:	d020      	beq.n	1a00501e <_printf_common+0xb2>
1a004fdc:	6823      	ldr	r3, [r4, #0]
1a004fde:	68e5      	ldr	r5, [r4, #12]
1a004fe0:	f8d9 2000 	ldr.w	r2, [r9]
1a004fe4:	f003 0306 	and.w	r3, r3, #6
1a004fe8:	2b04      	cmp	r3, #4
1a004fea:	bf08      	it	eq
1a004fec:	1aad      	subeq	r5, r5, r2
1a004fee:	68a3      	ldr	r3, [r4, #8]
1a004ff0:	6922      	ldr	r2, [r4, #16]
1a004ff2:	bf0c      	ite	eq
1a004ff4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
1a004ff8:	2500      	movne	r5, #0
1a004ffa:	4293      	cmp	r3, r2
1a004ffc:	bfc4      	itt	gt
1a004ffe:	1a9b      	subgt	r3, r3, r2
1a005000:	18ed      	addgt	r5, r5, r3
1a005002:	f04f 0900 	mov.w	r9, #0
1a005006:	341a      	adds	r4, #26
1a005008:	454d      	cmp	r5, r9
1a00500a:	d11a      	bne.n	1a005042 <_printf_common+0xd6>
1a00500c:	2000      	movs	r0, #0
1a00500e:	e008      	b.n	1a005022 <_printf_common+0xb6>
1a005010:	2301      	movs	r3, #1
1a005012:	4652      	mov	r2, sl
1a005014:	4639      	mov	r1, r7
1a005016:	4630      	mov	r0, r6
1a005018:	47c0      	blx	r8
1a00501a:	3001      	adds	r0, #1
1a00501c:	d103      	bne.n	1a005026 <_printf_common+0xba>
1a00501e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a005022:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a005026:	3501      	adds	r5, #1
1a005028:	e7c3      	b.n	1a004fb2 <_printf_common+0x46>
1a00502a:	18e1      	adds	r1, r4, r3
1a00502c:	1c5a      	adds	r2, r3, #1
1a00502e:	2030      	movs	r0, #48	; 0x30
1a005030:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
1a005034:	4422      	add	r2, r4
1a005036:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
1a00503a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
1a00503e:	3302      	adds	r3, #2
1a005040:	e7c5      	b.n	1a004fce <_printf_common+0x62>
1a005042:	2301      	movs	r3, #1
1a005044:	4622      	mov	r2, r4
1a005046:	4639      	mov	r1, r7
1a005048:	4630      	mov	r0, r6
1a00504a:	47c0      	blx	r8
1a00504c:	3001      	adds	r0, #1
1a00504e:	d0e6      	beq.n	1a00501e <_printf_common+0xb2>
1a005050:	f109 0901 	add.w	r9, r9, #1
1a005054:	e7d8      	b.n	1a005008 <_printf_common+0x9c>
1a005056:	Address 0x000000001a005056 is out of bounds.


1a005058 <_printf_i>:
1a005058:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a00505c:	4606      	mov	r6, r0
1a00505e:	460c      	mov	r4, r1
1a005060:	f101 0043 	add.w	r0, r1, #67	; 0x43
1a005064:	7e09      	ldrb	r1, [r1, #24]
1a005066:	b085      	sub	sp, #20
1a005068:	296e      	cmp	r1, #110	; 0x6e
1a00506a:	4698      	mov	r8, r3
1a00506c:	4617      	mov	r7, r2
1a00506e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a005070:	f000 80ba 	beq.w	1a0051e8 <_printf_i+0x190>
1a005074:	d824      	bhi.n	1a0050c0 <_printf_i+0x68>
1a005076:	2963      	cmp	r1, #99	; 0x63
1a005078:	d039      	beq.n	1a0050ee <_printf_i+0x96>
1a00507a:	d80a      	bhi.n	1a005092 <_printf_i+0x3a>
1a00507c:	2900      	cmp	r1, #0
1a00507e:	f000 80c3 	beq.w	1a005208 <_printf_i+0x1b0>
1a005082:	2958      	cmp	r1, #88	; 0x58
1a005084:	f000 8091 	beq.w	1a0051aa <_printf_i+0x152>
1a005088:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a00508c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
1a005090:	e035      	b.n	1a0050fe <_printf_i+0xa6>
1a005092:	2964      	cmp	r1, #100	; 0x64
1a005094:	d001      	beq.n	1a00509a <_printf_i+0x42>
1a005096:	2969      	cmp	r1, #105	; 0x69
1a005098:	d1f6      	bne.n	1a005088 <_printf_i+0x30>
1a00509a:	6825      	ldr	r5, [r4, #0]
1a00509c:	681a      	ldr	r2, [r3, #0]
1a00509e:	f015 0f80 	tst.w	r5, #128	; 0x80
1a0050a2:	f102 0104 	add.w	r1, r2, #4
1a0050a6:	d02c      	beq.n	1a005102 <_printf_i+0xaa>
1a0050a8:	6812      	ldr	r2, [r2, #0]
1a0050aa:	6019      	str	r1, [r3, #0]
1a0050ac:	2a00      	cmp	r2, #0
1a0050ae:	da03      	bge.n	1a0050b8 <_printf_i+0x60>
1a0050b0:	232d      	movs	r3, #45	; 0x2d
1a0050b2:	4252      	negs	r2, r2
1a0050b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
1a0050b8:	f8df c1bc 	ldr.w	ip, [pc, #444]	; 1a005278 <_printf_i+0x220>
1a0050bc:	230a      	movs	r3, #10
1a0050be:	e03f      	b.n	1a005140 <_printf_i+0xe8>
1a0050c0:	2973      	cmp	r1, #115	; 0x73
1a0050c2:	f000 80a5 	beq.w	1a005210 <_printf_i+0x1b8>
1a0050c6:	d808      	bhi.n	1a0050da <_printf_i+0x82>
1a0050c8:	296f      	cmp	r1, #111	; 0x6f
1a0050ca:	d021      	beq.n	1a005110 <_printf_i+0xb8>
1a0050cc:	2970      	cmp	r1, #112	; 0x70
1a0050ce:	d1db      	bne.n	1a005088 <_printf_i+0x30>
1a0050d0:	6822      	ldr	r2, [r4, #0]
1a0050d2:	f042 0220 	orr.w	r2, r2, #32
1a0050d6:	6022      	str	r2, [r4, #0]
1a0050d8:	e003      	b.n	1a0050e2 <_printf_i+0x8a>
1a0050da:	2975      	cmp	r1, #117	; 0x75
1a0050dc:	d018      	beq.n	1a005110 <_printf_i+0xb8>
1a0050de:	2978      	cmp	r1, #120	; 0x78
1a0050e0:	d1d2      	bne.n	1a005088 <_printf_i+0x30>
1a0050e2:	2278      	movs	r2, #120	; 0x78
1a0050e4:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
1a0050e8:	f8df c190 	ldr.w	ip, [pc, #400]	; 1a00527c <_printf_i+0x224>
1a0050ec:	e061      	b.n	1a0051b2 <_printf_i+0x15a>
1a0050ee:	681a      	ldr	r2, [r3, #0]
1a0050f0:	1d11      	adds	r1, r2, #4
1a0050f2:	6019      	str	r1, [r3, #0]
1a0050f4:	6813      	ldr	r3, [r2, #0]
1a0050f6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
1a0050fa:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a0050fe:	2301      	movs	r3, #1
1a005100:	e093      	b.n	1a00522a <_printf_i+0x1d2>
1a005102:	6812      	ldr	r2, [r2, #0]
1a005104:	6019      	str	r1, [r3, #0]
1a005106:	f015 0f40 	tst.w	r5, #64	; 0x40
1a00510a:	bf18      	it	ne
1a00510c:	b212      	sxthne	r2, r2
1a00510e:	e7cd      	b.n	1a0050ac <_printf_i+0x54>
1a005110:	f8d4 c000 	ldr.w	ip, [r4]
1a005114:	681a      	ldr	r2, [r3, #0]
1a005116:	f01c 0f80 	tst.w	ip, #128	; 0x80
1a00511a:	f102 0504 	add.w	r5, r2, #4
1a00511e:	601d      	str	r5, [r3, #0]
1a005120:	d001      	beq.n	1a005126 <_printf_i+0xce>
1a005122:	6812      	ldr	r2, [r2, #0]
1a005124:	e003      	b.n	1a00512e <_printf_i+0xd6>
1a005126:	f01c 0f40 	tst.w	ip, #64	; 0x40
1a00512a:	d0fa      	beq.n	1a005122 <_printf_i+0xca>
1a00512c:	8812      	ldrh	r2, [r2, #0]
1a00512e:	f8df c148 	ldr.w	ip, [pc, #328]	; 1a005278 <_printf_i+0x220>
1a005132:	296f      	cmp	r1, #111	; 0x6f
1a005134:	bf0c      	ite	eq
1a005136:	2308      	moveq	r3, #8
1a005138:	230a      	movne	r3, #10
1a00513a:	2100      	movs	r1, #0
1a00513c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
1a005140:	6865      	ldr	r5, [r4, #4]
1a005142:	60a5      	str	r5, [r4, #8]
1a005144:	2d00      	cmp	r5, #0
1a005146:	bfa2      	ittt	ge
1a005148:	6821      	ldrge	r1, [r4, #0]
1a00514a:	f021 0104 	bicge.w	r1, r1, #4
1a00514e:	6021      	strge	r1, [r4, #0]
1a005150:	b90a      	cbnz	r2, 1a005156 <_printf_i+0xfe>
1a005152:	2d00      	cmp	r5, #0
1a005154:	d046      	beq.n	1a0051e4 <_printf_i+0x18c>
1a005156:	4605      	mov	r5, r0
1a005158:	fbb2 f1f3 	udiv	r1, r2, r3
1a00515c:	fb03 2e11 	mls	lr, r3, r1, r2
1a005160:	4293      	cmp	r3, r2
1a005162:	f81c e00e 	ldrb.w	lr, [ip, lr]
1a005166:	f805 ed01 	strb.w	lr, [r5, #-1]!
1a00516a:	d939      	bls.n	1a0051e0 <_printf_i+0x188>
1a00516c:	2b08      	cmp	r3, #8
1a00516e:	d10b      	bne.n	1a005188 <_printf_i+0x130>
1a005170:	6823      	ldr	r3, [r4, #0]
1a005172:	07da      	lsls	r2, r3, #31
1a005174:	d508      	bpl.n	1a005188 <_printf_i+0x130>
1a005176:	6923      	ldr	r3, [r4, #16]
1a005178:	6862      	ldr	r2, [r4, #4]
1a00517a:	429a      	cmp	r2, r3
1a00517c:	bfde      	ittt	le
1a00517e:	2330      	movle	r3, #48	; 0x30
1a005180:	f805 3c01 	strble.w	r3, [r5, #-1]
1a005184:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
1a005188:	1b40      	subs	r0, r0, r5
1a00518a:	6120      	str	r0, [r4, #16]
1a00518c:	f8cd 8000 	str.w	r8, [sp]
1a005190:	463b      	mov	r3, r7
1a005192:	aa03      	add	r2, sp, #12
1a005194:	4621      	mov	r1, r4
1a005196:	4630      	mov	r0, r6
1a005198:	f7ff fee8 	bl	1a004f6c <_printf_common>
1a00519c:	3001      	adds	r0, #1
1a00519e:	d149      	bne.n	1a005234 <_printf_i+0x1dc>
1a0051a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0051a4:	b005      	add	sp, #20
1a0051a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a0051aa:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 1a005278 <_printf_i+0x220>
1a0051ae:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
1a0051b2:	681d      	ldr	r5, [r3, #0]
1a0051b4:	6821      	ldr	r1, [r4, #0]
1a0051b6:	f855 2b04 	ldr.w	r2, [r5], #4
1a0051ba:	601d      	str	r5, [r3, #0]
1a0051bc:	060d      	lsls	r5, r1, #24
1a0051be:	d50b      	bpl.n	1a0051d8 <_printf_i+0x180>
1a0051c0:	07cd      	lsls	r5, r1, #31
1a0051c2:	bf44      	itt	mi
1a0051c4:	f041 0120 	orrmi.w	r1, r1, #32
1a0051c8:	6021      	strmi	r1, [r4, #0]
1a0051ca:	b91a      	cbnz	r2, 1a0051d4 <_printf_i+0x17c>
1a0051cc:	6823      	ldr	r3, [r4, #0]
1a0051ce:	f023 0320 	bic.w	r3, r3, #32
1a0051d2:	6023      	str	r3, [r4, #0]
1a0051d4:	2310      	movs	r3, #16
1a0051d6:	e7b0      	b.n	1a00513a <_printf_i+0xe2>
1a0051d8:	064b      	lsls	r3, r1, #25
1a0051da:	bf48      	it	mi
1a0051dc:	b292      	uxthmi	r2, r2
1a0051de:	e7ef      	b.n	1a0051c0 <_printf_i+0x168>
1a0051e0:	460a      	mov	r2, r1
1a0051e2:	e7b9      	b.n	1a005158 <_printf_i+0x100>
1a0051e4:	4605      	mov	r5, r0
1a0051e6:	e7c1      	b.n	1a00516c <_printf_i+0x114>
1a0051e8:	681a      	ldr	r2, [r3, #0]
1a0051ea:	f8d4 c000 	ldr.w	ip, [r4]
1a0051ee:	6961      	ldr	r1, [r4, #20]
1a0051f0:	1d15      	adds	r5, r2, #4
1a0051f2:	601d      	str	r5, [r3, #0]
1a0051f4:	f01c 0f80 	tst.w	ip, #128	; 0x80
1a0051f8:	6813      	ldr	r3, [r2, #0]
1a0051fa:	d001      	beq.n	1a005200 <_printf_i+0x1a8>
1a0051fc:	6019      	str	r1, [r3, #0]
1a0051fe:	e003      	b.n	1a005208 <_printf_i+0x1b0>
1a005200:	f01c 0f40 	tst.w	ip, #64	; 0x40
1a005204:	d0fa      	beq.n	1a0051fc <_printf_i+0x1a4>
1a005206:	8019      	strh	r1, [r3, #0]
1a005208:	2300      	movs	r3, #0
1a00520a:	6123      	str	r3, [r4, #16]
1a00520c:	4605      	mov	r5, r0
1a00520e:	e7bd      	b.n	1a00518c <_printf_i+0x134>
1a005210:	681a      	ldr	r2, [r3, #0]
1a005212:	1d11      	adds	r1, r2, #4
1a005214:	6019      	str	r1, [r3, #0]
1a005216:	6815      	ldr	r5, [r2, #0]
1a005218:	6862      	ldr	r2, [r4, #4]
1a00521a:	2100      	movs	r1, #0
1a00521c:	4628      	mov	r0, r5
1a00521e:	f000 f82f 	bl	1a005280 <memchr>
1a005222:	b108      	cbz	r0, 1a005228 <_printf_i+0x1d0>
1a005224:	1b40      	subs	r0, r0, r5
1a005226:	6060      	str	r0, [r4, #4]
1a005228:	6863      	ldr	r3, [r4, #4]
1a00522a:	6123      	str	r3, [r4, #16]
1a00522c:	2300      	movs	r3, #0
1a00522e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
1a005232:	e7ab      	b.n	1a00518c <_printf_i+0x134>
1a005234:	6923      	ldr	r3, [r4, #16]
1a005236:	462a      	mov	r2, r5
1a005238:	4639      	mov	r1, r7
1a00523a:	4630      	mov	r0, r6
1a00523c:	47c0      	blx	r8
1a00523e:	3001      	adds	r0, #1
1a005240:	d0ae      	beq.n	1a0051a0 <_printf_i+0x148>
1a005242:	6823      	ldr	r3, [r4, #0]
1a005244:	079b      	lsls	r3, r3, #30
1a005246:	d413      	bmi.n	1a005270 <_printf_i+0x218>
1a005248:	68e0      	ldr	r0, [r4, #12]
1a00524a:	9b03      	ldr	r3, [sp, #12]
1a00524c:	4298      	cmp	r0, r3
1a00524e:	bfb8      	it	lt
1a005250:	4618      	movlt	r0, r3
1a005252:	e7a7      	b.n	1a0051a4 <_printf_i+0x14c>
1a005254:	2301      	movs	r3, #1
1a005256:	464a      	mov	r2, r9
1a005258:	4639      	mov	r1, r7
1a00525a:	4630      	mov	r0, r6
1a00525c:	47c0      	blx	r8
1a00525e:	3001      	adds	r0, #1
1a005260:	d09e      	beq.n	1a0051a0 <_printf_i+0x148>
1a005262:	3501      	adds	r5, #1
1a005264:	68e3      	ldr	r3, [r4, #12]
1a005266:	9a03      	ldr	r2, [sp, #12]
1a005268:	1a9b      	subs	r3, r3, r2
1a00526a:	42ab      	cmp	r3, r5
1a00526c:	dcf2      	bgt.n	1a005254 <_printf_i+0x1fc>
1a00526e:	e7eb      	b.n	1a005248 <_printf_i+0x1f0>
1a005270:	2500      	movs	r5, #0
1a005272:	f104 0919 	add.w	r9, r4, #25
1a005276:	e7f5      	b.n	1a005264 <_printf_i+0x20c>
1a005278:	1a0058aa 	.word	0x1a0058aa
1a00527c:	1a0058bb 	.word	0x1a0058bb

1a005280 <memchr>:
1a005280:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a005284:	2a10      	cmp	r2, #16
1a005286:	db2b      	blt.n	1a0052e0 <memchr+0x60>
1a005288:	f010 0f07 	tst.w	r0, #7
1a00528c:	d008      	beq.n	1a0052a0 <memchr+0x20>
1a00528e:	f810 3b01 	ldrb.w	r3, [r0], #1
1a005292:	3a01      	subs	r2, #1
1a005294:	428b      	cmp	r3, r1
1a005296:	d02d      	beq.n	1a0052f4 <memchr+0x74>
1a005298:	f010 0f07 	tst.w	r0, #7
1a00529c:	b342      	cbz	r2, 1a0052f0 <memchr+0x70>
1a00529e:	d1f6      	bne.n	1a00528e <memchr+0xe>
1a0052a0:	b4f0      	push	{r4, r5, r6, r7}
1a0052a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
1a0052a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
1a0052aa:	f022 0407 	bic.w	r4, r2, #7
1a0052ae:	f07f 0700 	mvns.w	r7, #0
1a0052b2:	2300      	movs	r3, #0
1a0052b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
1a0052b8:	3c08      	subs	r4, #8
1a0052ba:	ea85 0501 	eor.w	r5, r5, r1
1a0052be:	ea86 0601 	eor.w	r6, r6, r1
1a0052c2:	fa85 f547 	uadd8	r5, r5, r7
1a0052c6:	faa3 f587 	sel	r5, r3, r7
1a0052ca:	fa86 f647 	uadd8	r6, r6, r7
1a0052ce:	faa5 f687 	sel	r6, r5, r7
1a0052d2:	b98e      	cbnz	r6, 1a0052f8 <memchr+0x78>
1a0052d4:	d1ee      	bne.n	1a0052b4 <memchr+0x34>
1a0052d6:	bcf0      	pop	{r4, r5, r6, r7}
1a0052d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a0052dc:	f002 0207 	and.w	r2, r2, #7
1a0052e0:	b132      	cbz	r2, 1a0052f0 <memchr+0x70>
1a0052e2:	f810 3b01 	ldrb.w	r3, [r0], #1
1a0052e6:	3a01      	subs	r2, #1
1a0052e8:	ea83 0301 	eor.w	r3, r3, r1
1a0052ec:	b113      	cbz	r3, 1a0052f4 <memchr+0x74>
1a0052ee:	d1f8      	bne.n	1a0052e2 <memchr+0x62>
1a0052f0:	2000      	movs	r0, #0
1a0052f2:	4770      	bx	lr
1a0052f4:	3801      	subs	r0, #1
1a0052f6:	4770      	bx	lr
1a0052f8:	2d00      	cmp	r5, #0
1a0052fa:	bf06      	itte	eq
1a0052fc:	4635      	moveq	r5, r6
1a0052fe:	3803      	subeq	r0, #3
1a005300:	3807      	subne	r0, #7
1a005302:	f015 0f01 	tst.w	r5, #1
1a005306:	d107      	bne.n	1a005318 <memchr+0x98>
1a005308:	3001      	adds	r0, #1
1a00530a:	f415 7f80 	tst.w	r5, #256	; 0x100
1a00530e:	bf02      	ittt	eq
1a005310:	3001      	addeq	r0, #1
1a005312:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
1a005316:	3001      	addeq	r0, #1
1a005318:	bcf0      	pop	{r4, r5, r6, r7}
1a00531a:	3801      	subs	r0, #1
1a00531c:	4770      	bx	lr
1a00531e:	bf00      	nop
1a005320:	6f646f54 	.word	0x6f646f54
1a005324:	6f6c2073 	.word	0x6f6c2073
1a005328:	73652073 	.word	0x73652073
1a00532c:	6f646174 	.word	0x6f646174
1a005330:	65732073 	.word	0x65732073
1a005334:	636e6520 	.word	0x636e6520
1a005338:	746e6575 	.word	0x746e6575
1a00533c:	206e6172 	.word	0x206e6172
1a005340:	61747365 	.word	0x61747365
1a005344:	73656c62 	.word	0x73656c62
1a005348:	00000000 	.word	0x00000000
1a00534c:	65206553 	.word	0x65206553
1a005350:	6e6f636e 	.word	0x6e6f636e
1a005354:	206f7274 	.word	0x206f7274
1a005358:	626f7270 	.word	0x626f7270
1a00535c:	616d656c 	.word	0x616d656c
1a005360:	65642073 	.word	0x65642073
1a005364:	6e657420 	.word	0x6e657420
1a005368:	6e6f6973 	.word	0x6e6f6973
1a00536c:	00000000 	.word	0x00000000
1a005370:	65206553 	.word	0x65206553
1a005374:	6e6f636e 	.word	0x6e6f636e
1a005378:	206f7274 	.word	0x206f7274
1a00537c:	626f7270 	.word	0x626f7270
1a005380:	616d656c 	.word	0x616d656c
1a005384:	65642073 	.word	0x65642073
1a005388:	74616220 	.word	0x74616220
1a00538c:	61697265 	.word	0x61697265
1a005390:	00000000 	.word	0x00000000
1a005394:	61747345 	.word	0x61747345
1a005398:	64206f64 	.word	0x64206f64
1a00539c:	6c612065 	.word	0x6c612065
1a0053a0:	61747265 	.word	0x61747265
1a0053a4:	78616d20 	.word	0x78616d20
1a0053a8:	00616d69 	.word	0x00616d69
1a0053ac:	415f5054 	.word	0x415f5054
1a0053b0:	616a656c 	.word	0x616a656c
1a0053b4:	6f72646e 	.word	0x6f72646e
1a0053b8:	726f475f 	.word	0x726f475f
1a0053bc:	006e6972 	.word	0x006e6972
1a0053c0:	6154796d 	.word	0x6154796d
1a0053c4:	00006b73 	.word	0x00006b73
1a0053c8:	73206f4e 	.word	0x73206f4e
1a0053cc:	6f6c2065 	.word	0x6f6c2065
1a0053d0:	72617267 	.word	0x72617267
1a0053d4:	63206e6f 	.word	0x63206e6f
1a0053d8:	72616572 	.word	0x72616572
1a0053dc:	73616c20 	.word	0x73616c20
1a0053e0:	72617420 	.word	0x72617420
1a0053e4:	00736165 	.word	0x00736165
1a0053e8:	6f6c6156 	.word	0x6f6c6156
1a0053ec:	65642072 	.word	0x65642072
1a0053f0:	6f70206c 	.word	0x6f70206c
1a0053f4:	636e6574 	.word	0x636e6574
1a0053f8:	656d6f69 	.word	0x656d6f69
1a0053fc:	206f7274 	.word	0x206f7274
1a005400:	6f6a6162 	.word	0x6f6a6162
1a005404:	0000203a 	.word	0x0000203a
1a005408:	000a0d3b 	.word	0x000a0d3b
1a00540c:	6f666e49 	.word	0x6f666e49
1a005410:	63616d72 	.word	0x63616d72
1a005414:	206e6f69 	.word	0x206e6f69
1a005418:	206c6564 	.word	0x206c6564
1a00541c:	65707573 	.word	0x65707573
1a005420:	73697672 	.word	0x73697672
1a005424:	ff00726f 	.word	0xff00726f
1a005428:	70206553 	.word	0x70206553
1a00542c:	6f696469 	.word	0x6f696469
1a005430:	74657020 	.word	0x74657020
1a005434:	6f696369 	.word	0x6f696369
1a005438:	0000006e 	.word	0x0000006e
1a00543c:	61206573 	.word	0x61206573
1a005440:	76697463 	.word	0x76697463
1a005444:	6163206f 	.word	0x6163206f
1a005448:	6f69626d 	.word	0x6f69626d
1a00544c:	20656420 	.word	0x20656420
1a005450:	736e6574 	.word	0x736e6574
1a005454:	006e6f69 	.word	0x006e6f69
1a005458:	65726174 	.word	0x65726174
1a00545c:	65745f61 	.word	0x65745f61
1a005460:	5f616c63 	.word	0x5f616c63
1a005464:	00000031 	.word	0x00000031
1a005468:	65726174 	.word	0x65726174
1a00546c:	656c5f61 	.word	0x656c5f61
1a005470:	00425f64 	.word	0x00425f64
1a005474:	6c707041 	.word	0x6c707041
1a005478:	74616369 	.word	0x74616369
1a00547c:	206e6f69 	.word	0x206e6f69
1a005480:	6c6c614d 	.word	0x6c6c614d
1a005484:	4620636f 	.word	0x4620636f
1a005488:	656c6961 	.word	0x656c6961
1a00548c:	6f482064 	.word	0x6f482064
1a005490:	0d216b6f 	.word	0x0d216b6f
1a005494:	00000000 	.word	0x00000000
1a005498:	7362696c 	.word	0x7362696c
1a00549c:	6572662f 	.word	0x6572662f
1a0054a0:	6f747265 	.word	0x6f747265
1a0054a4:	6f732f73 	.word	0x6f732f73
1a0054a8:	65637275 	.word	0x65637275
1a0054ac:	6f6f682f 	.word	0x6f6f682f
1a0054b0:	632e736b 	.word	0x632e736b
1a0054b4:	ffffff00 	.word	0xffffff00
1a0054b8:	70410a0d 	.word	0x70410a0d
1a0054bc:	63696c70 	.word	0x63696c70
1a0054c0:	6f697461 	.word	0x6f697461
1a0054c4:	7453206e 	.word	0x7453206e
1a0054c8:	206b6361 	.word	0x206b6361
1a0054cc:	7265764f 	.word	0x7265764f
1a0054d0:	776f6c66 	.word	0x776f6c66
1a0054d4:	6f202121 	.word	0x6f202121
1a0054d8:	6154206e 	.word	0x6154206e
1a0054dc:	203a6b73 	.word	0x203a6b73
1a0054e0:	0a0d7325 	.word	0x0a0d7325
1a0054e4:	ffffff00 	.word	0xffffff00
1a0054e8:	41760a0d 	.word	0x41760a0d
1a0054ec:	72657373 	.word	0x72657373
1a0054f0:	6c614374 	.word	0x6c614374
1a0054f4:	2864656c 	.word	0x2864656c
1a0054f8:	200a0d29 	.word	0x200a0d29
1a0054fc:	4c4c2020 	.word	0x4c4c2020
1a005500:	20656e69 	.word	0x20656e69
1a005504:	626d754e 	.word	0x626d754e
1a005508:	3d207265 	.word	0x3d207265
1a00550c:	0d642520 	.word	0x0d642520
1a005510:	2020200a 	.word	0x2020200a
1a005514:	656c6946 	.word	0x656c6946
1a005518:	6d614e20 	.word	0x6d614e20
1a00551c:	203d2065 	.word	0x203d2065
1a005520:	0a0d7325 	.word	0x0a0d7325
1a005524:	ff000a0d 	.word	0xff000a0d
1a005528:	454c4449 	.word	0x454c4449
1a00552c:	ffffff00 	.word	0xffffff00
1a005530:	51726d54 	.word	0x51726d54
1a005534:	ffffff00 	.word	0xffffff00
1a005538:	20726d54 	.word	0x20726d54
1a00553c:	00637653 	.word	0x00637653

1a005540 <ExtRateIn>:
1a005540:	00000000                                ....

1a005544 <GpioButtons>:
1a005544:	08000400 09010900                       ........

1a00554c <GpioLeds>:
1a00554c:	01050005 0e000205 0c010b01              ............

1a005558 <GpioPorts>:
1a005558:	03030003 0f050403 05031005 07030603     ................
1a005568:	ffff0802                                ....

1a00556c <OscRateIn>:
1a00556c:	00b71b00                                ....

1a005570 <InitClkStates>:
1a005570:	01010f01                                ....

1a005574 <pinmuxing>:
1a005574:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a005584:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a005594:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a0055a4:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a0055b4:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a0055c4:	00d50301 00d50401 00160107 00560207     ..............V.
1a0055d4:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a0055e4:	00570206                                ..W.

1a0055e8 <UART_BClock>:
1a0055e8:	01a201c2 01620182                       ......b.

1a0055f0 <UART_PClock>:
1a0055f0:	00820081 00a200a1 08040201 0f0f0f03     ................
1a005600:	ffff00ff                                ....

1a005604 <periph_to_base>:
1a005604:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a005614:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a005624:	000100e0 01000100 01200003 00060120     .......... . ...
1a005634:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a005644:	01820013 00120182 01a201a2 01c20011     ................
1a005654:	001001c2 01e201e2 0202000f 000e0202     ................
1a005664:	02220222 0223000d 001c0223              "."...#.#...

1a005670 <InitClkStates>:
1a005670:	00010100 00010909 0001090a 01010701     ................
1a005680:	00010902 00010906 0101090c 0001090d     ................
1a005690:	0001090e 0001090f 00010910 00010911     ................
1a0056a0:	00010912 00010913 00011114 00011119     ................
1a0056b0:	0001111a 0001111b                       ........

1a0056b8 <SCTdataList>:
1a0056b8:	01040204 03040a02 0b020c02 0c060506     ................
1a0056c8:	04010301 00000501 04070507              ............

1a0056d4 <lpcUarts>:
1a0056d4:	40081000 06020406 00180205 40081000     ...@...........@
1a0056e4:	09070509 00180706 40082000 00000000     ......... .@....
1a0056f4:	00190000 400c1000 07060107 001a0602     .......@........
1a005704:	400c1000 01010f01 001a0110 400c2000     ...@......... .@
1a005714:	02020302 001b0204                       ........

1a00571c <pwmMap>:
1a00571c:	000a0c01 02070d03 ff060405              ............

1a005728 <gpioPinsInit>:
1a005728:	02000104 00050701 05010d03 04080100     ................
1a005738:	02020002 02000304 00000403 04070002     ................
1a005748:	030c0300 09050402 05040103 04030208     ................
1a005758:	04020305 06040504 0802000c 03000b06     ................
1a005768:	00090607 07060503 060f0504 03030004     ................
1a005778:	02000404 00050404 06040502 04060200     ................
1a005788:	0c050408 05040a04 0003010e 14010a00     ................
1a005798:	010f0000 0d000012 00001101 0010010c     ................
1a0057a8:	07070300 000f0300 01000001 00000000     ................
1a0057b8:	000a0600 08060603 06100504 04030005     ................
1a0057c8:	03000106 04090400 04010d05 010b0000     ................
1a0057d8:	0200000f 00000001 00010104 02010800     ................
1a0057e8:	01090000 09010006 05040002 04010200     ................
1a0057f8:	02020105 02020504 0e00000a 01000b02     ................
1a005808:	000c020b ffff0c01                       ........

1a005810 <__sf_fake_stderr>:
	...

1a005830 <__sf_fake_stdin>:
	...

1a005850 <__sf_fake_stdout>:
	...

1a005870 <_global_impure_ptr>:
1a005870:	10000058 33323130 37363534 62613938     X...0123456789ab
1a005880:	66656463 6a696867 6e6d6c6b 7271706f     cdefghijklmnopqr
1a005890:	76757473 7a797877 302d2300 6800202b     stuvwxyz.#-0+ .h
1a0058a0:	65004c6c 46456766 31300047 35343332     lL.efgEFG.012345
1a0058b0:	39383736 44434241 30004645 34333231     6789ABCDEF.01234
1a0058c0:	38373635 63626139 00666564              56789abcdef.
